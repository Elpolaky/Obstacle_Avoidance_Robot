
Obstacle Avoidance Robot V1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001616  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  00001616  000016aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  00800118  00800118  00001762  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004511  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001425  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020b9  00000000  00000000  000074ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000868  00000000  00000000  00009568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001079  00000000  00000000  00009dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022d8  00000000  00000000  0000ae49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000d121  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__vector_1>
       8:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__vector_2>
       c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__vector_3>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__vector_5>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__vector_9>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	0a 08       	sbc	r0, r10
      56:	15 08       	sbc	r1, r5
      58:	2b 08       	sbc	r2, r11
      5a:	20 08       	sbc	r2, r0
      5c:	36 08       	sbc	r3, r6
      5e:	41 08       	sbc	r4, r1
      60:	4c 08       	sbc	r4, r12

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	11 e0       	ldi	r17, 0x01	; 1
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e6 e1       	ldi	r30, 0x16	; 22
      76:	f6 e1       	ldi	r31, 0x16	; 22
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a8 31       	cpi	r26, 0x18	; 24
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	21 e0       	ldi	r18, 0x01	; 1
      86:	a8 e1       	ldi	r26, 0x18	; 24
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	ab 34       	cpi	r26, 0x4B	; 75
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <main>
      98:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <TIMER_control>:
		{
			// do nothing
		}
		Ultrasonic_GetDistance(&u8_sg_distance);
	}
	u8_sg_delay_5_sec = NOT_DONE ;
      a0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <g_timerFlag>
      a4:	81 30       	cpi	r24, 0x01	; 1
      a6:	39 f5       	brne	.+78     	; 0xf6 <TIMER_control+0x56>
      a8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
      ac:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
      b0:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_end+0x2>
      b4:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_end+0x3>
      b8:	89 39       	cpi	r24, 0x99	; 153
      ba:	91 05       	cpc	r25, r1
      bc:	a1 05       	cpc	r26, r1
      be:	b1 05       	cpc	r27, r1
      c0:	64 f4       	brge	.+24     	; 0xda <TIMER_control+0x3a>
      c2:	01 96       	adiw	r24, 0x01	; 1
      c4:	a1 1d       	adc	r26, r1
      c6:	b1 1d       	adc	r27, r1
      c8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
      cc:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
      d0:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
      d4:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
      d8:	08 95       	ret
      da:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
      de:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
      e2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end+0x2>
      e6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x3>
      ea:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_timerFlag>
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <u8_sg_delay_5_sec>
      f4:	08 95       	ret
      f6:	82 30       	cpi	r24, 0x02	; 2
      f8:	31 f5       	brne	.+76     	; 0x146 <TIMER_control+0xa6>
      fa:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
      fe:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
     102:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_end+0x2>
     106:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_end+0x3>
     10a:	8e 33       	cpi	r24, 0x3E	; 62
     10c:	91 05       	cpc	r25, r1
     10e:	a1 05       	cpc	r26, r1
     110:	b1 05       	cpc	r27, r1
     112:	64 f4       	brge	.+24     	; 0x12c <TIMER_control+0x8c>
     114:	01 96       	adiw	r24, 0x01	; 1
     116:	a1 1d       	adc	r26, r1
     118:	b1 1d       	adc	r27, r1
     11a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
     11e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
     122:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
     126:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
     12a:	08 95       	ret
     12c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
     130:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
     134:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end+0x2>
     138:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x3>
     13c:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_timerFlag>
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <u8_sg_delay_2_sec>
     146:	08 95       	ret

00000148 <app_Init>:
     148:	0e 94 15 05 	call	0xa2a	; 0xa2a <DIO_Init>
     14c:	0e 94 34 02 	call	0x468	; 0x468 <LCD_INIT>
     150:	0e 94 61 01 	call	0x2c2	; 0x2c2 <keypad_init>
     154:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TIMER_2_INT>
     158:	80 e5       	ldi	r24, 0x50	; 80
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <TIMER_2_SetCallBack>
     160:	08 95       	ret

00000162 <CAR_no_obstacle_between_30_and_70>:
/*****************************************************************************************************************************/

void CAR_no_obstacle_between_30_and_70()
{
	
	while((u8_sg_distance>30) && (u8_sg_distance<=70))
     162:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     166:	8f 51       	subi	r24, 0x1F	; 31
     168:	88 32       	cpi	r24, 0x28	; 40
     16a:	90 f5       	brcc	.+100    	; 0x1d0 <CAR_no_obstacle_between_30_and_70+0x6e>
	{
		pwm(30);
     16c:	8e e1       	ldi	r24, 0x1E	; 30
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <pwm>
		Car_Moving_FWD();
     174:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <Car_Moving_FWD>
		//LCD_Clear();
		LCD_GoTo(FIRST_LINE,COL_0);
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <LCD_GoTo>
		LCD_Write_String("Speed:30% Dir: F");
     180:	81 ea       	ldi	r24, 0xA1	; 161
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_Write_String>
		LCD_GoTo(SECOND_LINE,COL_0);
     188:	60 e0       	ldi	r22, 0x00	; 0
     18a:	82 e0       	ldi	r24, 0x02	; 2
     18c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <LCD_GoTo>
		LCD_Write_String("Dist.: ");
     190:	82 eb       	ldi	r24, 0xB2	; 178
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_Write_String>
		LCD_GoTo(SECOND_LINE,COL_9);
     198:	69 e0       	ldi	r22, 0x09	; 9
     19a:	82 e0       	ldi	r24, 0x02	; 2
     19c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <LCD_GoTo>
		LCD_Write_Number(u8_sg_distance);
     1a0:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_Write_Number>
		LCD_GoTo(SECOND_LINE,COL_11);
     1ae:	6b e0       	ldi	r22, 0x0B	; 11
     1b0:	82 e0       	ldi	r24, 0x02	; 2
     1b2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <LCD_GoTo>
		LCD_Write_String("cm");
     1b6:	8a eb       	ldi	r24, 0xBA	; 186
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCD_Write_String>
	
		Ultrasonic_GetDistance(&u8_sg_distance);
     1be:	80 e6       	ldi	r24, 0x60	; 96
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 4d 03 	call	0x69a	; 0x69a <Ultrasonic_GetDistance>
/*****************************************************************************************************************************/

void CAR_no_obstacle_between_30_and_70()
{
	
	while((u8_sg_distance>30) && (u8_sg_distance<=70))
     1c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1ca:	8f 51       	subi	r24, 0x1F	; 31
     1cc:	88 32       	cpi	r24, 0x28	; 40
     1ce:	70 f2       	brcs	.-100    	; 0x16c <CAR_no_obstacle_between_30_and_70+0xa>
     1d0:	08 95       	ret

000001d2 <pwm>:

/*****************************************************************************************************
/**DESCRIPTION:-
  this function is used to make pwm in pin pinb0
  **/
void pwm(float a_speed){
     1d2:	cf 92       	push	r12
     1d4:	df 92       	push	r13
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
	 g_speed= a_speed/100;
     1da:	20 e0       	ldi	r18, 0x00	; 0
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	48 ec       	ldi	r20, 0xC8	; 200
     1e0:	52 e4       	ldi	r21, 0x42	; 66
     1e2:	0e 94 18 09 	call	0x1230	; 0x1230 <__divsf3>
     1e6:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <g_speed>
     1ea:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <g_speed+0x1>
     1ee:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <g_speed+0x2>
     1f2:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <g_speed+0x3>
	g_time1=  (g_speed * 256);
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	40 e8       	ldi	r20, 0x80	; 128
     1fc:	53 e4       	ldi	r21, 0x43	; 67
     1fe:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__mulsf3>
     202:	6b 01       	movw	r12, r22
     204:	7c 01       	movw	r14, r24
     206:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <g_time1>
     20a:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <g_time1+0x1>
     20e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <g_time1+0x2>
     212:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <g_time1+0x3>
	 g_time2=256-g_time1;
     216:	9b 01       	movw	r18, r22
     218:	ac 01       	movw	r20, r24
     21a:	60 e0       	ldi	r22, 0x00	; 0
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	80 e8       	ldi	r24, 0x80	; 128
     220:	93 e4       	ldi	r25, 0x43	; 67
     222:	0e 94 8f 08 	call	0x111e	; 0x111e <__subsf3>
     226:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <g_time2>
     22a:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <g_time2+0x1>
     22e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_time2+0x2>
     232:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <g_time2+0x3>
	TIMER_0_pwm(g_time1);
     236:	c7 01       	movw	r24, r14
     238:	b6 01       	movw	r22, r12
     23a:	0e 94 62 07 	call	0xec4	; 0xec4 <TIMER_0_pwm>
	DIO_WRITEPIN(pind4,HIGH);
     23e:	61 e0       	ldi	r22, 0x01	; 1
     240:	8c e1       	ldi	r24, 0x1C	; 28
     242:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
	DIO_WRITEPIN(pind5,HIGH);
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	8d e1       	ldi	r24, 0x1D	; 29
     24a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>

	TIMER_0_pwm(g_time2);
     24e:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <g_time2>
     252:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <g_time2+0x1>
     256:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <g_time2+0x2>
     25a:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <g_time2+0x3>
     25e:	0e 94 62 07 	call	0xec4	; 0xec4 <TIMER_0_pwm>
	DIO_WRITEPIN(pind4,LOW);
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	8c e1       	ldi	r24, 0x1C	; 28
     266:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
	DIO_WRITEPIN(pind5,LOW);
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	8d e1       	ldi	r24, 0x1D	; 29
     26e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
	
}
     272:	ff 90       	pop	r15
     274:	ef 90       	pop	r14
     276:	df 90       	pop	r13
     278:	cf 90       	pop	r12
     27a:	08 95       	ret

0000027c <Icu_TimerOVF>:
	EXI_SetCallBack(EXInt,fptr);
}

static void Icu_TimerOVF(void)
{
	count_OVF++;
     27c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <count_OVF>
     280:	8f 5f       	subi	r24, 0xFF	; 255
     282:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <count_OVF>
     286:	08 95       	ret

00000288 <Icu_Enable>:
static void Icu_TimerOVF(void);
static uint8_t count_OVF=0;

void Icu_Enable(EN_int_t EXInt )
{
	EXI_Enable(EXInt);
     288:	0e 94 b5 05 	call	0xb6a	; 0xb6a <EXI_Enable>
	Timer1_OVF_SetCallBack(Icu_TimerOVF);
     28c:	8e e3       	ldi	r24, 0x3E	; 62
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	0e 94 a3 07 	call	0xf46	; 0xf46 <Timer1_OVF_SetCallBack>
	Timer1_OVF_InterruptEnable();
     294:	0e 94 9f 07 	call	0xf3e	; 0xf3e <Timer1_OVF_InterruptEnable>
	Timer1_Init(NORMAL_MODE,PRECALER_8);
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	0e 94 7a 07 	call	0xef4	; 0xef4 <Timer1_Init>
	TCNT1=0;
     2a0:	1d bc       	out	0x2d, r1	; 45
     2a2:	1c bc       	out	0x2c, r1	; 44
     2a4:	08 95       	ret

000002a6 <Icu_Disable>:
}
void Icu_Disable(EN_int_t EXInt)
{
	EXI_Disable(EXInt);
     2a6:	0e 94 c7 05 	call	0xb8e	; 0xb8e <EXI_Disable>
	count_OVF=0;
     2aa:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <count_OVF>
	TIMER1_STOP();
     2ae:	8e b5       	in	r24, 0x2e	; 46
     2b0:	88 7f       	andi	r24, 0xF8	; 248
     2b2:	8e bd       	out	0x2e, r24	; 46
     2b4:	08 95       	ret

000002b6 <Icu_Trigger>:
}
void Icu_Trigger(EN_int_t EXInt,EN_trig trigger)
{
	EXI_Trigger(EXInt,trigger);
     2b6:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <EXI_Trigger>
     2ba:	08 95       	ret

000002bc <Icu_SetCallback>:
}

void Icu_SetCallback(EN_int_t EXInt,void(*fptr)(void))
{
	EXI_SetCallBack(EXInt,fptr);
     2bc:	0e 94 35 06 	call	0xc6a	; 0xc6a <EXI_SetCallBack>
     2c0:	08 95       	ret

000002c2 <keypad_init>:
void keypad_init (void)
{ 

		
		// rows initialization value
		DIO_write(row1,keypad_port,LOW);
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	63 e4       	ldi	r22, 0x43	; 67
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_write>
		DIO_write(row2,keypad_port,LOW);
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	63 e4       	ldi	r22, 0x43	; 67
     2d0:	83 e0       	ldi	r24, 0x03	; 3
     2d2:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_write>
     2d6:	08 95       	ret

000002d8 <LCD_WRITE_COMMAND>:
/**DESCRIPTION:-
  This Function Clears The LCD
  **/
void LCD_Clear(void)
{
	LCD_WRITE_COMMAND(0x01);
     2d8:	cf 93       	push	r28
     2da:	c8 2f       	mov	r28, r24
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     2ec:	c4 fb       	bst	r28, 4
     2ee:	66 27       	eor	r22, r22
     2f0:	60 f9       	bld	r22, 0
     2f2:	84 e0       	ldi	r24, 0x04	; 4
     2f4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     2f8:	c5 fb       	bst	r28, 5
     2fa:	66 27       	eor	r22, r22
     2fc:	60 f9       	bld	r22, 0
     2fe:	85 e0       	ldi	r24, 0x05	; 5
     300:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     304:	c6 fb       	bst	r28, 6
     306:	66 27       	eor	r22, r22
     308:	60 f9       	bld	r22, 0
     30a:	86 e0       	ldi	r24, 0x06	; 6
     30c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     310:	6c 2f       	mov	r22, r28
     312:	66 1f       	adc	r22, r22
     314:	66 27       	eor	r22, r22
     316:	66 1f       	adc	r22, r22
     318:	87 e0       	ldi	r24, 0x07	; 7
     31a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     31e:	61 e0       	ldi	r22, 0x01	; 1
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     326:	89 ef       	ldi	r24, 0xF9	; 249
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_WRITE_COMMAND+0x52>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_WRITE_COMMAND+0x58>
     330:	00 00       	nop
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	83 e0       	ldi	r24, 0x03	; 3
     336:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     33a:	89 ef       	ldi	r24, 0xF9	; 249
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <LCD_WRITE_COMMAND+0x66>
     342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_WRITE_COMMAND+0x6c>
     344:	00 00       	nop
     346:	6c 2f       	mov	r22, r28
     348:	61 70       	andi	r22, 0x01	; 1
     34a:	84 e0       	ldi	r24, 0x04	; 4
     34c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     350:	c1 fb       	bst	r28, 1
     352:	66 27       	eor	r22, r22
     354:	60 f9       	bld	r22, 0
     356:	85 e0       	ldi	r24, 0x05	; 5
     358:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     35c:	c2 fb       	bst	r28, 2
     35e:	66 27       	eor	r22, r22
     360:	60 f9       	bld	r22, 0
     362:	86 e0       	ldi	r24, 0x06	; 6
     364:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     368:	c3 fb       	bst	r28, 3
     36a:	66 27       	eor	r22, r22
     36c:	60 f9       	bld	r22, 0
     36e:	87 e0       	ldi	r24, 0x07	; 7
     370:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     374:	61 e0       	ldi	r22, 0x01	; 1
     376:	83 e0       	ldi	r24, 0x03	; 3
     378:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     37c:	89 ef       	ldi	r24, 0xF9	; 249
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	f1 f7       	brne	.-4      	; 0x380 <LCD_WRITE_COMMAND+0xa8>
     384:	00 c0       	rjmp	.+0      	; 0x386 <LCD_WRITE_COMMAND+0xae>
     386:	00 00       	nop
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	83 e0       	ldi	r24, 0x03	; 3
     38c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     390:	89 ef       	ldi	r24, 0xF9	; 249
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	01 97       	sbiw	r24, 0x01	; 1
     396:	f1 f7       	brne	.-4      	; 0x394 <LCD_WRITE_COMMAND+0xbc>
     398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_WRITE_COMMAND+0xc2>
     39a:	00 00       	nop
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret

000003a0 <LCD_WRITE_DATA>:
     3a0:	cf 93       	push	r28
     3a2:	c8 2f       	mov	r28, r24
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     3b4:	c4 fb       	bst	r28, 4
     3b6:	66 27       	eor	r22, r22
     3b8:	60 f9       	bld	r22, 0
     3ba:	84 e0       	ldi	r24, 0x04	; 4
     3bc:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     3c0:	c5 fb       	bst	r28, 5
     3c2:	66 27       	eor	r22, r22
     3c4:	60 f9       	bld	r22, 0
     3c6:	85 e0       	ldi	r24, 0x05	; 5
     3c8:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     3cc:	c6 fb       	bst	r28, 6
     3ce:	66 27       	eor	r22, r22
     3d0:	60 f9       	bld	r22, 0
     3d2:	86 e0       	ldi	r24, 0x06	; 6
     3d4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     3d8:	6c 2f       	mov	r22, r28
     3da:	66 1f       	adc	r22, r22
     3dc:	66 27       	eor	r22, r22
     3de:	66 1f       	adc	r22, r22
     3e0:	87 e0       	ldi	r24, 0x07	; 7
     3e2:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	83 e0       	ldi	r24, 0x03	; 3
     3ea:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     3ee:	89 ef       	ldi	r24, 0xF9	; 249
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <LCD_WRITE_DATA+0x52>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <LCD_WRITE_DATA+0x58>
     3f8:	00 00       	nop
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	83 e0       	ldi	r24, 0x03	; 3
     3fe:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     402:	89 ef       	ldi	r24, 0xF9	; 249
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     40c:	00 00       	nop
     40e:	6c 2f       	mov	r22, r28
     410:	61 70       	andi	r22, 0x01	; 1
     412:	84 e0       	ldi	r24, 0x04	; 4
     414:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     418:	c1 fb       	bst	r28, 1
     41a:	66 27       	eor	r22, r22
     41c:	60 f9       	bld	r22, 0
     41e:	85 e0       	ldi	r24, 0x05	; 5
     420:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     424:	c2 fb       	bst	r28, 2
     426:	66 27       	eor	r22, r22
     428:	60 f9       	bld	r22, 0
     42a:	86 e0       	ldi	r24, 0x06	; 6
     42c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     430:	c3 fb       	bst	r28, 3
     432:	66 27       	eor	r22, r22
     434:	60 f9       	bld	r22, 0
     436:	87 e0       	ldi	r24, 0x07	; 7
     438:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	83 e0       	ldi	r24, 0x03	; 3
     440:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     444:	89 ef       	ldi	r24, 0xF9	; 249
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     44e:	00 00       	nop
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     458:	89 ef       	ldi	r24, 0xF9	; 249
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     460:	00 c0       	rjmp	.+0      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     462:	00 00       	nop
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <LCD_INIT>:
     468:	83 ed       	ldi	r24, 0xD3	; 211
     46a:	90 e3       	ldi	r25, 0x30	; 48
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <LCD_INIT+0x4>
     470:	00 c0       	rjmp	.+0      	; 0x472 <LCD_INIT+0xa>
     472:	00 00       	nop
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_WRITE_COMMAND>
     47a:	89 ef       	ldi	r24, 0xF9	; 249
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <LCD_INIT+0x16>
     482:	00 c0       	rjmp	.+0      	; 0x484 <LCD_INIT+0x1c>
     484:	00 00       	nop
     486:	88 e2       	ldi	r24, 0x28	; 40
     488:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_WRITE_COMMAND>
     48c:	89 ef       	ldi	r24, 0xF9	; 249
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <LCD_INIT+0x28>
     494:	00 c0       	rjmp	.+0      	; 0x496 <LCD_INIT+0x2e>
     496:	00 00       	nop
     498:	8c e0       	ldi	r24, 0x0C	; 12
     49a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_WRITE_COMMAND>
     49e:	89 ef       	ldi	r24, 0xF9	; 249
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <LCD_INIT+0x3a>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <LCD_INIT+0x40>
     4a8:	00 00       	nop
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_WRITE_COMMAND>
     4b0:	83 ef       	ldi	r24, 0xF3	; 243
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	01 97       	sbiw	r24, 0x01	; 1
     4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LCD_INIT+0x4c>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LCD_INIT+0x52>
     4ba:	00 00       	nop
     4bc:	86 e0       	ldi	r24, 0x06	; 6
     4be:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_WRITE_COMMAND>
     4c2:	89 ef       	ldi	r24, 0xF9	; 249
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	01 97       	sbiw	r24, 0x01	; 1
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <LCD_INIT+0x5e>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <LCD_INIT+0x64>
     4cc:	00 00       	nop
     4ce:	08 95       	ret

000004d0 <LCD_Write_String>:
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	fc 01       	movw	r30, r24
     4d8:	80 81       	ld	r24, Z
     4da:	88 23       	and	r24, r24
     4dc:	59 f0       	breq	.+22     	; 0x4f4 <LCD_Write_String+0x24>
     4de:	8f 01       	movw	r16, r30
     4e0:	c0 e0       	ldi	r28, 0x00	; 0
     4e2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WRITE_DATA>
     4e6:	cf 5f       	subi	r28, 0xFF	; 255
     4e8:	f8 01       	movw	r30, r16
     4ea:	ec 0f       	add	r30, r28
     4ec:	f1 1d       	adc	r31, r1
     4ee:	80 81       	ld	r24, Z
     4f0:	81 11       	cpse	r24, r1
     4f2:	f7 cf       	rjmp	.-18     	; 0x4e2 <LCD_Write_String+0x12>
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	08 95       	ret

000004fc <LCD_Write_Number>:
     4fc:	8f 92       	push	r8
     4fe:	9f 92       	push	r9
     500:	af 92       	push	r10
     502:	bf 92       	push	r11
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	60 97       	sbiw	r28, 0x10	; 16
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	61 15       	cp	r22, r1
     520:	71 05       	cpc	r23, r1
     522:	81 05       	cpc	r24, r1
     524:	91 05       	cpc	r25, r1
     526:	21 f4       	brne	.+8      	; 0x530 <LCD_Write_Number+0x34>
     528:	80 e3       	ldi	r24, 0x30	; 48
     52a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WRITE_DATA>
     52e:	2a c0       	rjmp	.+84     	; 0x584 <LCD_Write_Number+0x88>
     530:	10 e0       	ldi	r17, 0x00	; 0
     532:	0f 2e       	mov	r0, r31
     534:	fa e0       	ldi	r31, 0x0A	; 10
     536:	8f 2e       	mov	r8, r31
     538:	91 2c       	mov	r9, r1
     53a:	a1 2c       	mov	r10, r1
     53c:	b1 2c       	mov	r11, r1
     53e:	f0 2d       	mov	r31, r0
     540:	ee 24       	eor	r14, r14
     542:	e3 94       	inc	r14
     544:	f1 2c       	mov	r15, r1
     546:	ec 0e       	add	r14, r28
     548:	fd 1e       	adc	r15, r29
     54a:	e1 0e       	add	r14, r17
     54c:	f1 1c       	adc	r15, r1
     54e:	a5 01       	movw	r20, r10
     550:	94 01       	movw	r18, r8
     552:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__udivmodsi4>
     556:	60 5d       	subi	r22, 0xD0	; 208
     558:	f7 01       	movw	r30, r14
     55a:	60 83       	st	Z, r22
     55c:	1f 5f       	subi	r17, 0xFF	; 255
     55e:	62 2f       	mov	r22, r18
     560:	73 2f       	mov	r23, r19
     562:	84 2f       	mov	r24, r20
     564:	95 2f       	mov	r25, r21
     566:	61 15       	cp	r22, r1
     568:	71 05       	cpc	r23, r1
     56a:	81 05       	cpc	r24, r1
     56c:	91 05       	cpc	r25, r1
     56e:	41 f7       	brne	.-48     	; 0x540 <LCD_Write_Number+0x44>
     570:	11 23       	and	r17, r17
     572:	41 f0       	breq	.+16     	; 0x584 <LCD_Write_Number+0x88>
     574:	fe 01       	movw	r30, r28
     576:	e1 0f       	add	r30, r17
     578:	f1 1d       	adc	r31, r1
     57a:	80 81       	ld	r24, Z
     57c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WRITE_DATA>
     580:	11 50       	subi	r17, 0x01	; 1
     582:	c1 f7       	brne	.-16     	; 0x574 <LCD_Write_Number+0x78>
     584:	60 96       	adiw	r28, 0x10	; 16
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	ff 90       	pop	r15
     598:	ef 90       	pop	r14
     59a:	bf 90       	pop	r11
     59c:	af 90       	pop	r10
     59e:	9f 90       	pop	r9
     5a0:	8f 90       	pop	r8
     5a2:	08 95       	ret

000005a4 <LCD_GoTo>:
  This Function Takes a Specific Line and a Cell On The LCD and Displays the Data In That Location
  **/
void LCD_GoTo(uint8_t a_line,uint8_t a_cell)
{
//0x80 this is from data sheet to write an address on the DDRAM"screen"*/
	if (a_line==1)
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	29 f4       	brne	.+10     	; 0x5b2 <LCD_GoTo+0xe>
	{
		LCD_WRITE_COMMAND(0x80+a_cell);    /*0x80 means we ant to write an address and a_cell is the address we want*/
     5a8:	80 e8       	ldi	r24, 0x80	; 128
     5aa:	86 0f       	add	r24, r22
     5ac:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_WRITE_COMMAND>
     5b0:	08 95       	ret
	}
	else if (a_line==2)
     5b2:	82 30       	cpi	r24, 0x02	; 2
     5b4:	21 f4       	brne	.+8      	; 0x5be <LCD_GoTo+0x1a>
	{
		LCD_WRITE_COMMAND(0x80+0x40+a_cell);  /*0x40 to start from cell 0 at line 2 from the data sheet*/	
     5b6:	80 ec       	ldi	r24, 0xC0	; 192
     5b8:	86 0f       	add	r24, r22
     5ba:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_WRITE_COMMAND>
     5be:	08 95       	ret

000005c0 <Car_Moving_FWD>:
/**DESCRIPTION:-
this fumction is used to drive the motor to move in the +VE direction which will lead the car to move FWD
**/
void Car_Moving_FWD(void)
{
	DIO_WRITEPIN(motor1_0,LOW);          //this is used to provide voltage to the +ve pin of the motor 
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	8a e1       	ldi	r24, 0x1A	; 26
     5c4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
	DIO_WRITEPIN(motor1_1,HIGH);           //this is used to provide the ground to the -ve pin of 
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	8b e1       	ldi	r24, 0x1B	; 27
     5cc:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
	DIO_WRITEPIN(motor2_0,LOW);
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	8e e1       	ldi	r24, 0x1E	; 30
     5d4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
	DIO_WRITEPIN(motor2_1,HIGH);
     5d8:	61 e0       	ldi	r22, 0x01	; 1
     5da:	8f e1       	ldi	r24, 0x1F	; 31
     5dc:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
     5e0:	08 95       	ret

000005e2 <ultrasonicgetTime>:

static uint32_t*Disptr;

void Ultrasonic_init_SW(void)
{
	DIO_INITPIN(TRIGGER_PIN,OUTPUT);
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <flag.1986>
     5ee:	81 11       	cpse	r24, r1
     5f0:	14 c0       	rjmp	.+40     	; 0x61a <ultrasonicgetTime+0x38>
     5f2:	8c b5       	in	r24, 0x2c	; 44
     5f4:	9d b5       	in	r25, 0x2d	; 45
     5f6:	a0 e0       	ldi	r26, 0x00	; 0
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <T1.1987>
     5fe:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <T1.1987+0x1>
     602:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <T1.1987+0x2>
     606:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <T1.1987+0x3>
     60a:	62 e0       	ldi	r22, 0x02	; 2
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Icu_Trigger>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <flag.1986>
     618:	3b c0       	rjmp	.+118    	; 0x690 <ultrasonicgetTime+0xae>
     61a:	81 30       	cpi	r24, 0x01	; 1
     61c:	c9 f5       	brne	.+114    	; 0x690 <ultrasonicgetTime+0xae>
     61e:	8c b5       	in	r24, 0x2c	; 44
     620:	9d b5       	in	r25, 0x2d	; 45
     622:	a0 e0       	ldi	r26, 0x00	; 0
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <T2.1988>
     62a:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <T2.1988+0x1>
     62e:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <T2.1988+0x2>
     632:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <T2.1988+0x3>
     636:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <flag.1986>
     63a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <Get_Dis>
     63e:	1d bc       	out	0x2d, r1	; 45
     640:	1c bc       	out	0x2c, r1	; 44
     642:	c0 91 26 01 	lds	r28, 0x0126	; 0x800126 <Disptr>
     646:	d0 91 27 01 	lds	r29, 0x0127	; 0x800127 <Disptr+0x1>
     64a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <T2.1988>
     64e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <T2.1988+0x1>
     652:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <T2.1988+0x2>
     656:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <T2.1988+0x3>
     65a:	00 91 21 01 	lds	r16, 0x0121	; 0x800121 <T1.1987>
     65e:	10 91 22 01 	lds	r17, 0x0122	; 0x800122 <T1.1987+0x1>
     662:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <T1.1987+0x2>
     666:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <T1.1987+0x3>
     66a:	bc 01       	movw	r22, r24
     66c:	cd 01       	movw	r24, r26
     66e:	60 1b       	sub	r22, r16
     670:	71 0b       	sbc	r23, r17
     672:	82 0b       	sbc	r24, r18
     674:	93 0b       	sbc	r25, r19
     676:	2a e3       	ldi	r18, 0x3A	; 58
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__udivmodsi4>
     682:	28 83       	st	Y, r18
     684:	39 83       	std	Y+1, r19	; 0x01
     686:	4a 83       	std	Y+2, r20	; 0x02
     688:	5b 83       	std	Y+3, r21	; 0x03
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <Icu_Disable>
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	08 95       	ret

0000069a <Ultrasonic_GetDistance>:
}

void Ultrasonic_GetDistance(uint32_t*dis)
{
	if (Get_Dis==0)
     69a:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <Get_Dis>
     69e:	21 11       	cpse	r18, r1
     6a0:	1f c0       	rjmp	.+62     	; 0x6e0 <Ultrasonic_GetDistance+0x46>
	{
		Disptr=dis;
     6a2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <Disptr+0x1>
     6a6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <Disptr>
		Icu_SetCallback(ECO_PIN,ultrasonicgetTime);
     6aa:	61 ef       	ldi	r22, 0xF1	; 241
     6ac:	72 e0       	ldi	r23, 0x02	; 2
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <Icu_SetCallback>
		Icu_Trigger(ECO_PIN,RISING_EDGE);
     6b4:	63 e0       	ldi	r22, 0x03	; 3
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Icu_Trigger>
		Icu_Enable(ECO_PIN);
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	0e 94 44 01 	call	0x288	; 0x288 <Icu_Enable>
		DIO_WRITEPIN(TRIGGER_PIN,HIGH);
     6c2:	61 e0       	ldi	r22, 0x01	; 1
     6c4:	8b e0       	ldi	r24, 0x0B	; 11
     6c6:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ca:	83 e0       	ldi	r24, 0x03	; 3
     6cc:	8a 95       	dec	r24
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <Ultrasonic_GetDistance+0x32>
     6d0:	00 00       	nop
		_delay_us(10);
		DIO_WRITEPIN(TRIGGER_PIN,LOW);
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	8b e0       	ldi	r24, 0x0B	; 11
     6d6:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_WRITEPIN>
		Get_Dis=1;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Get_Dis>
     6e0:	08 95       	ret

000006e2 <main>:
#define F_CPU 8000000UL

int main(void)
{
	
  app_Init();
     6e2:	0e 94 a4 00 	call	0x148	; 0x148 <app_Init>
  //DIO_INITPIN(pind4,OUTPUT);
// start_stage();
 while(1){
 //pwm(30);
//CAR_no_obstacle_less_70();
CAR_no_obstacle_between_30_and_70();
     6e6:	0e 94 b1 00 	call	0x162	; 0x162 <CAR_no_obstacle_between_30_and_70>
     6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <main+0x4>

000006ec <DIO_INITPIN>:
	DIO_PIN_TYPE i;
	for(i=0; i<TOTAL_PINS ;i++)
	{
		DIO_INITPIN(i,PinsStatusArray[i]);
	}
}
     6ec:	98 2f       	mov	r25, r24
     6ee:	96 95       	lsr	r25
     6f0:	96 95       	lsr	r25
     6f2:	96 95       	lsr	r25
     6f4:	95 30       	cpi	r25, 0x05	; 5
     6f6:	08 f0       	brcs	.+2      	; 0x6fa <DIO_INITPIN+0xe>
     6f8:	f9 c0       	rjmp	.+498    	; 0x8ec <__stack+0x8d>
     6fa:	87 70       	andi	r24, 0x07	; 7
     6fc:	61 30       	cpi	r22, 0x01	; 1
     6fe:	31 f0       	breq	.+12     	; 0x70c <DIO_INITPIN+0x20>
     700:	08 f4       	brcc	.+2      	; 0x704 <DIO_INITPIN+0x18>
     702:	a4 c0       	rjmp	.+328    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     704:	62 30       	cpi	r22, 0x02	; 2
     706:	09 f4       	brne	.+2      	; 0x70a <DIO_INITPIN+0x1e>
     708:	51 c0       	rjmp	.+162    	; 0x7ac <DIO_INITPIN+0xc0>
     70a:	ef c0       	rjmp	.+478    	; 0x8ea <__stack+0x8b>
     70c:	91 30       	cpi	r25, 0x01	; 1
     70e:	c1 f0       	breq	.+48     	; 0x740 <DIO_INITPIN+0x54>
     710:	28 f0       	brcs	.+10     	; 0x71c <DIO_INITPIN+0x30>
     712:	92 30       	cpi	r25, 0x02	; 2
     714:	39 f1       	breq	.+78     	; 0x764 <DIO_INITPIN+0x78>
     716:	93 30       	cpi	r25, 0x03	; 3
     718:	b9 f1       	breq	.+110    	; 0x788 <DIO_INITPIN+0x9c>
     71a:	e7 c0       	rjmp	.+462    	; 0x8ea <__stack+0x8b>
     71c:	4a b3       	in	r20, 0x1a	; 26
     71e:	21 e0       	ldi	r18, 0x01	; 1
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	b9 01       	movw	r22, r18
     724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_INITPIN+0x3e>
     726:	66 0f       	add	r22, r22
     728:	77 1f       	adc	r23, r23
     72a:	8a 95       	dec	r24
     72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_INITPIN+0x3a>
     72e:	cb 01       	movw	r24, r22
     730:	80 95       	com	r24
     732:	94 2f       	mov	r25, r20
     734:	98 23       	and	r25, r24
     736:	9a bb       	out	0x1a, r25	; 26
     738:	9b b3       	in	r25, 0x1b	; 27
     73a:	89 23       	and	r24, r25
     73c:	8b bb       	out	0x1b, r24	; 27
     73e:	d5 c0       	rjmp	.+426    	; 0x8ea <__stack+0x8b>
     740:	47 b3       	in	r20, 0x17	; 23
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	b9 01       	movw	r22, r18
     748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_INITPIN+0x62>
     74a:	66 0f       	add	r22, r22
     74c:	77 1f       	adc	r23, r23
     74e:	8a 95       	dec	r24
     750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_INITPIN+0x5e>
     752:	cb 01       	movw	r24, r22
     754:	80 95       	com	r24
     756:	94 2f       	mov	r25, r20
     758:	98 23       	and	r25, r24
     75a:	97 bb       	out	0x17, r25	; 23
     75c:	98 b3       	in	r25, 0x18	; 24
     75e:	89 23       	and	r24, r25
     760:	88 bb       	out	0x18, r24	; 24
     762:	c3 c0       	rjmp	.+390    	; 0x8ea <__stack+0x8b>
     764:	44 b3       	in	r20, 0x14	; 20
     766:	21 e0       	ldi	r18, 0x01	; 1
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	b9 01       	movw	r22, r18
     76c:	02 c0       	rjmp	.+4      	; 0x772 <DIO_INITPIN+0x86>
     76e:	66 0f       	add	r22, r22
     770:	77 1f       	adc	r23, r23
     772:	8a 95       	dec	r24
     774:	e2 f7       	brpl	.-8      	; 0x76e <DIO_INITPIN+0x82>
     776:	cb 01       	movw	r24, r22
     778:	80 95       	com	r24
     77a:	94 2f       	mov	r25, r20
     77c:	98 23       	and	r25, r24
     77e:	94 bb       	out	0x14, r25	; 20
     780:	95 b3       	in	r25, 0x15	; 21
     782:	89 23       	and	r24, r25
     784:	85 bb       	out	0x15, r24	; 21
     786:	b1 c0       	rjmp	.+354    	; 0x8ea <__stack+0x8b>
     788:	41 b3       	in	r20, 0x11	; 17
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	b9 01       	movw	r22, r18
     790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_INITPIN+0xaa>
     792:	66 0f       	add	r22, r22
     794:	77 1f       	adc	r23, r23
     796:	8a 95       	dec	r24
     798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_INITPIN+0xa6>
     79a:	cb 01       	movw	r24, r22
     79c:	80 95       	com	r24
     79e:	94 2f       	mov	r25, r20
     7a0:	98 23       	and	r25, r24
     7a2:	91 bb       	out	0x11, r25	; 17
     7a4:	92 b3       	in	r25, 0x12	; 18
     7a6:	89 23       	and	r24, r25
     7a8:	82 bb       	out	0x12, r24	; 18
     7aa:	9f c0       	rjmp	.+318    	; 0x8ea <__stack+0x8b>
     7ac:	91 30       	cpi	r25, 0x01	; 1
     7ae:	c1 f0       	breq	.+48     	; 0x7e0 <DIO_INITPIN+0xf4>
     7b0:	28 f0       	brcs	.+10     	; 0x7bc <DIO_INITPIN+0xd0>
     7b2:	92 30       	cpi	r25, 0x02	; 2
     7b4:	39 f1       	breq	.+78     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7b6:	93 30       	cpi	r25, 0x03	; 3
     7b8:	b9 f1       	breq	.+110    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     7ba:	97 c0       	rjmp	.+302    	; 0x8ea <__stack+0x8b>
     7bc:	4a b3       	in	r20, 0x1a	; 26
     7be:	21 e0       	ldi	r18, 0x01	; 1
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	b9 01       	movw	r22, r18
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_INITPIN+0xde>
     7c6:	66 0f       	add	r22, r22
     7c8:	77 1f       	adc	r23, r23
     7ca:	8a 95       	dec	r24
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <DIO_INITPIN+0xda>
     7ce:	cb 01       	movw	r24, r22
     7d0:	96 2f       	mov	r25, r22
     7d2:	90 95       	com	r25
     7d4:	94 23       	and	r25, r20
     7d6:	9a bb       	out	0x1a, r25	; 26
     7d8:	9b b3       	in	r25, 0x1b	; 27
     7da:	89 2b       	or	r24, r25
     7dc:	8b bb       	out	0x1b, r24	; 27
     7de:	85 c0       	rjmp	.+266    	; 0x8ea <__stack+0x8b>
     7e0:	47 b3       	in	r20, 0x17	; 23
     7e2:	21 e0       	ldi	r18, 0x01	; 1
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	b9 01       	movw	r22, r18
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <DIO_INITPIN+0x102>
     7ea:	66 0f       	add	r22, r22
     7ec:	77 1f       	adc	r23, r23
     7ee:	8a 95       	dec	r24
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <DIO_INITPIN+0xfe>
     7f2:	cb 01       	movw	r24, r22
     7f4:	96 2f       	mov	r25, r22
     7f6:	90 95       	com	r25
     7f8:	94 23       	and	r25, r20
     7fa:	97 bb       	out	0x17, r25	; 23
     7fc:	98 b3       	in	r25, 0x18	; 24
     7fe:	89 2b       	or	r24, r25
     800:	88 bb       	out	0x18, r24	; 24
     802:	73 c0       	rjmp	.+230    	; 0x8ea <__stack+0x8b>
     804:	44 b3       	in	r20, 0x14	; 20
     806:	21 e0       	ldi	r18, 0x01	; 1
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	b9 01       	movw	r22, r18
     80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     80e:	66 0f       	add	r22, r22
     810:	77 1f       	adc	r23, r23
     812:	8a 95       	dec	r24
     814:	e2 f7       	brpl	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     816:	cb 01       	movw	r24, r22
     818:	96 2f       	mov	r25, r22
     81a:	90 95       	com	r25
     81c:	94 23       	and	r25, r20
     81e:	94 bb       	out	0x14, r25	; 20
     820:	95 b3       	in	r25, 0x15	; 21
     822:	89 2b       	or	r24, r25
     824:	85 bb       	out	0x15, r24	; 21
     826:	61 c0       	rjmp	.+194    	; 0x8ea <__stack+0x8b>
     828:	41 b3       	in	r20, 0x11	; 17
     82a:	21 e0       	ldi	r18, 0x01	; 1
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	b9 01       	movw	r22, r18
     830:	02 c0       	rjmp	.+4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     832:	66 0f       	add	r22, r22
     834:	77 1f       	adc	r23, r23
     836:	8a 95       	dec	r24
     838:	e2 f7       	brpl	.-8      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     83a:	cb 01       	movw	r24, r22
     83c:	96 2f       	mov	r25, r22
     83e:	90 95       	com	r25
     840:	94 23       	and	r25, r20
     842:	91 bb       	out	0x11, r25	; 17
     844:	92 b3       	in	r25, 0x12	; 18
     846:	89 2b       	or	r24, r25
     848:	82 bb       	out	0x12, r24	; 18
     84a:	4f c0       	rjmp	.+158    	; 0x8ea <__stack+0x8b>
     84c:	91 30       	cpi	r25, 0x01	; 1
     84e:	c1 f0       	breq	.+48     	; 0x880 <__stack+0x21>
     850:	28 f0       	brcs	.+10     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     852:	92 30       	cpi	r25, 0x02	; 2
     854:	39 f1       	breq	.+78     	; 0x8a4 <__stack+0x45>
     856:	93 30       	cpi	r25, 0x03	; 3
     858:	b9 f1       	breq	.+110    	; 0x8c8 <__stack+0x69>
     85a:	47 c0       	rjmp	.+142    	; 0x8ea <__stack+0x8b>
     85c:	4b b3       	in	r20, 0x1b	; 27
     85e:	21 e0       	ldi	r18, 0x01	; 1
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	b9 01       	movw	r22, r18
     864:	02 c0       	rjmp	.+4      	; 0x86a <__stack+0xb>
     866:	66 0f       	add	r22, r22
     868:	77 1f       	adc	r23, r23
     86a:	8a 95       	dec	r24
     86c:	e2 f7       	brpl	.-8      	; 0x866 <__stack+0x7>
     86e:	cb 01       	movw	r24, r22
     870:	96 2f       	mov	r25, r22
     872:	90 95       	com	r25
     874:	94 23       	and	r25, r20
     876:	9b bb       	out	0x1b, r25	; 27
     878:	9a b3       	in	r25, 0x1a	; 26
     87a:	89 2b       	or	r24, r25
     87c:	8a bb       	out	0x1a, r24	; 26
     87e:	35 c0       	rjmp	.+106    	; 0x8ea <__stack+0x8b>
     880:	48 b3       	in	r20, 0x18	; 24
     882:	21 e0       	ldi	r18, 0x01	; 1
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	b9 01       	movw	r22, r18
     888:	02 c0       	rjmp	.+4      	; 0x88e <__stack+0x2f>
     88a:	66 0f       	add	r22, r22
     88c:	77 1f       	adc	r23, r23
     88e:	8a 95       	dec	r24
     890:	e2 f7       	brpl	.-8      	; 0x88a <__stack+0x2b>
     892:	cb 01       	movw	r24, r22
     894:	96 2f       	mov	r25, r22
     896:	90 95       	com	r25
     898:	94 23       	and	r25, r20
     89a:	98 bb       	out	0x18, r25	; 24
     89c:	97 b3       	in	r25, 0x17	; 23
     89e:	89 2b       	or	r24, r25
     8a0:	87 bb       	out	0x17, r24	; 23
     8a2:	23 c0       	rjmp	.+70     	; 0x8ea <__stack+0x8b>
     8a4:	45 b3       	in	r20, 0x15	; 21
     8a6:	21 e0       	ldi	r18, 0x01	; 1
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	b9 01       	movw	r22, r18
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
     8ae:	66 0f       	add	r22, r22
     8b0:	77 1f       	adc	r23, r23
     8b2:	8a 95       	dec	r24
     8b4:	e2 f7       	brpl	.-8      	; 0x8ae <__stack+0x4f>
     8b6:	cb 01       	movw	r24, r22
     8b8:	96 2f       	mov	r25, r22
     8ba:	90 95       	com	r25
     8bc:	94 23       	and	r25, r20
     8be:	95 bb       	out	0x15, r25	; 21
     8c0:	94 b3       	in	r25, 0x14	; 20
     8c2:	89 2b       	or	r24, r25
     8c4:	84 bb       	out	0x14, r24	; 20
     8c6:	11 c0       	rjmp	.+34     	; 0x8ea <__stack+0x8b>
     8c8:	42 b3       	in	r20, 0x12	; 18
     8ca:	21 e0       	ldi	r18, 0x01	; 1
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	b9 01       	movw	r22, r18
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__stack+0x77>
     8d2:	66 0f       	add	r22, r22
     8d4:	77 1f       	adc	r23, r23
     8d6:	8a 95       	dec	r24
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <__stack+0x73>
     8da:	cb 01       	movw	r24, r22
     8dc:	96 2f       	mov	r25, r22
     8de:	90 95       	com	r25
     8e0:	94 23       	and	r25, r20
     8e2:	92 bb       	out	0x12, r25	; 18
     8e4:	91 b3       	in	r25, 0x11	; 17
     8e6:	89 2b       	or	r24, r25
     8e8:	81 bb       	out	0x11, r24	; 17
     8ea:	08 95       	ret
     8ec:	82 e0       	ldi	r24, 0x02	; 2
     8ee:	08 95       	ret

000008f0 <DIO_WRITEPIN>:
     8f0:	98 2f       	mov	r25, r24
     8f2:	96 95       	lsr	r25
     8f4:	96 95       	lsr	r25
     8f6:	96 95       	lsr	r25
     8f8:	95 30       	cpi	r25, 0x05	; 5
     8fa:	08 f0       	brcs	.+2      	; 0x8fe <DIO_WRITEPIN+0xe>
     8fc:	8e c0       	rjmp	.+284    	; 0xa1a <DIO_WRITEPIN+0x12a>
     8fe:	63 30       	cpi	r22, 0x03	; 3
     900:	08 f0       	brcs	.+2      	; 0x904 <DIO_WRITEPIN+0x14>
     902:	8d c0       	rjmp	.+282    	; 0xa1e <DIO_WRITEPIN+0x12e>
     904:	87 70       	andi	r24, 0x07	; 7
     906:	61 30       	cpi	r22, 0x01	; 1
     908:	09 f0       	breq	.+2      	; 0x90c <DIO_WRITEPIN+0x1c>
     90a:	40 c0       	rjmp	.+128    	; 0x98c <DIO_WRITEPIN+0x9c>
     90c:	91 30       	cpi	r25, 0x01	; 1
     90e:	a1 f0       	breq	.+40     	; 0x938 <DIO_WRITEPIN+0x48>
     910:	28 f0       	brcs	.+10     	; 0x91c <DIO_WRITEPIN+0x2c>
     912:	92 30       	cpi	r25, 0x02	; 2
     914:	f9 f0       	breq	.+62     	; 0x954 <DIO_WRITEPIN+0x64>
     916:	93 30       	cpi	r25, 0x03	; 3
     918:	59 f1       	breq	.+86     	; 0x970 <DIO_WRITEPIN+0x80>
     91a:	83 c0       	rjmp	.+262    	; 0xa22 <DIO_WRITEPIN+0x132>
     91c:	4b b3       	in	r20, 0x1b	; 27
     91e:	21 e0       	ldi	r18, 0x01	; 1
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	b9 01       	movw	r22, r18
     924:	02 c0       	rjmp	.+4      	; 0x92a <DIO_WRITEPIN+0x3a>
     926:	66 0f       	add	r22, r22
     928:	77 1f       	adc	r23, r23
     92a:	8a 95       	dec	r24
     92c:	e2 f7       	brpl	.-8      	; 0x926 <DIO_WRITEPIN+0x36>
     92e:	cb 01       	movw	r24, r22
     930:	84 2b       	or	r24, r20
     932:	8b bb       	out	0x1b, r24	; 27
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 95       	ret
     938:	48 b3       	in	r20, 0x18	; 24
     93a:	21 e0       	ldi	r18, 0x01	; 1
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	b9 01       	movw	r22, r18
     940:	02 c0       	rjmp	.+4      	; 0x946 <DIO_WRITEPIN+0x56>
     942:	66 0f       	add	r22, r22
     944:	77 1f       	adc	r23, r23
     946:	8a 95       	dec	r24
     948:	e2 f7       	brpl	.-8      	; 0x942 <DIO_WRITEPIN+0x52>
     94a:	cb 01       	movw	r24, r22
     94c:	84 2b       	or	r24, r20
     94e:	88 bb       	out	0x18, r24	; 24
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	08 95       	ret
     954:	45 b3       	in	r20, 0x15	; 21
     956:	21 e0       	ldi	r18, 0x01	; 1
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	b9 01       	movw	r22, r18
     95c:	02 c0       	rjmp	.+4      	; 0x962 <DIO_WRITEPIN+0x72>
     95e:	66 0f       	add	r22, r22
     960:	77 1f       	adc	r23, r23
     962:	8a 95       	dec	r24
     964:	e2 f7       	brpl	.-8      	; 0x95e <DIO_WRITEPIN+0x6e>
     966:	cb 01       	movw	r24, r22
     968:	84 2b       	or	r24, r20
     96a:	85 bb       	out	0x15, r24	; 21
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	08 95       	ret
     970:	42 b3       	in	r20, 0x12	; 18
     972:	21 e0       	ldi	r18, 0x01	; 1
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	b9 01       	movw	r22, r18
     978:	02 c0       	rjmp	.+4      	; 0x97e <DIO_WRITEPIN+0x8e>
     97a:	66 0f       	add	r22, r22
     97c:	77 1f       	adc	r23, r23
     97e:	8a 95       	dec	r24
     980:	e2 f7       	brpl	.-8      	; 0x97a <DIO_WRITEPIN+0x8a>
     982:	cb 01       	movw	r24, r22
     984:	84 2b       	or	r24, r20
     986:	82 bb       	out	0x12, r24	; 18
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	08 95       	ret
     98c:	61 11       	cpse	r22, r1
     98e:	44 c0       	rjmp	.+136    	; 0xa18 <DIO_WRITEPIN+0x128>
     990:	91 30       	cpi	r25, 0x01	; 1
     992:	a9 f0       	breq	.+42     	; 0x9be <DIO_WRITEPIN+0xce>
     994:	28 f0       	brcs	.+10     	; 0x9a0 <DIO_WRITEPIN+0xb0>
     996:	92 30       	cpi	r25, 0x02	; 2
     998:	09 f1       	breq	.+66     	; 0x9dc <DIO_WRITEPIN+0xec>
     99a:	93 30       	cpi	r25, 0x03	; 3
     99c:	71 f1       	breq	.+92     	; 0x9fa <DIO_WRITEPIN+0x10a>
     99e:	43 c0       	rjmp	.+134    	; 0xa26 <DIO_WRITEPIN+0x136>
     9a0:	4b b3       	in	r20, 0x1b	; 27
     9a2:	21 e0       	ldi	r18, 0x01	; 1
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	b9 01       	movw	r22, r18
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <DIO_WRITEPIN+0xbe>
     9aa:	66 0f       	add	r22, r22
     9ac:	77 1f       	adc	r23, r23
     9ae:	8a 95       	dec	r24
     9b0:	e2 f7       	brpl	.-8      	; 0x9aa <DIO_WRITEPIN+0xba>
     9b2:	cb 01       	movw	r24, r22
     9b4:	80 95       	com	r24
     9b6:	84 23       	and	r24, r20
     9b8:	8b bb       	out	0x1b, r24	; 27
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	08 95       	ret
     9be:	48 b3       	in	r20, 0x18	; 24
     9c0:	21 e0       	ldi	r18, 0x01	; 1
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	b9 01       	movw	r22, r18
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <DIO_WRITEPIN+0xdc>
     9c8:	66 0f       	add	r22, r22
     9ca:	77 1f       	adc	r23, r23
     9cc:	8a 95       	dec	r24
     9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <DIO_WRITEPIN+0xd8>
     9d0:	cb 01       	movw	r24, r22
     9d2:	80 95       	com	r24
     9d4:	84 23       	and	r24, r20
     9d6:	88 bb       	out	0x18, r24	; 24
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	08 95       	ret
     9dc:	45 b3       	in	r20, 0x15	; 21
     9de:	21 e0       	ldi	r18, 0x01	; 1
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	b9 01       	movw	r22, r18
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <DIO_WRITEPIN+0xfa>
     9e6:	66 0f       	add	r22, r22
     9e8:	77 1f       	adc	r23, r23
     9ea:	8a 95       	dec	r24
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <DIO_WRITEPIN+0xf6>
     9ee:	cb 01       	movw	r24, r22
     9f0:	80 95       	com	r24
     9f2:	84 23       	and	r24, r20
     9f4:	85 bb       	out	0x15, r24	; 21
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	08 95       	ret
     9fa:	42 b3       	in	r20, 0x12	; 18
     9fc:	21 e0       	ldi	r18, 0x01	; 1
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	b9 01       	movw	r22, r18
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <DIO_WRITEPIN+0x118>
     a04:	66 0f       	add	r22, r22
     a06:	77 1f       	adc	r23, r23
     a08:	8a 95       	dec	r24
     a0a:	e2 f7       	brpl	.-8      	; 0xa04 <DIO_WRITEPIN+0x114>
     a0c:	cb 01       	movw	r24, r22
     a0e:	80 95       	com	r24
     a10:	84 23       	and	r24, r20
     a12:	82 bb       	out	0x12, r24	; 18
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	08 95       	ret
     a18:	08 95       	ret
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	08 95       	ret
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	08 95       	ret
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	08 95       	ret
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	08 95       	ret

00000a2a <DIO_Init>:
/******************************************************************************************************************************************************************************/
/*it intializes a certain amount of pins based on the PINS_total in the dio.h and the type of config in the dio_arr*/

void DIO_Init(void)
{
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	c1 e6       	ldi	r28, 0x61	; 97
     a34:	d0 e0       	ldi	r29, 0x00	; 0
     a36:	07 e8       	ldi	r16, 0x87	; 135
     a38:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
	for(i=0; i<Pins_Total ;i++)
	{
		DIO_INITPIN(dio_arr[i].pin,dio_arr[i].status);
     a3a:	69 81       	ldd	r22, Y+1	; 0x01
     a3c:	88 81       	ld	r24, Y
     a3e:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_INITPIN>
     a42:	22 96       	adiw	r28, 0x02	; 2
/*it intializes a certain amount of pins based on the PINS_total in the dio.h and the type of config in the dio_arr*/

void DIO_Init(void)
{
	uint8_t i;
	for(i=0; i<Pins_Total ;i++)
     a44:	c0 17       	cp	r28, r16
     a46:	d1 07       	cpc	r29, r17
     a48:	c1 f7       	brne	.-16     	; 0xa3a <DIO_Init+0x10>
	{
		DIO_INITPIN(dio_arr[i].pin,dio_arr[i].status);
	}
}
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	08 95       	ret

00000a54 <DIO_write>:
//************************************************************************************************
void DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	switch(portNumber)
     a54:	62 34       	cpi	r22, 0x42	; 66
     a56:	59 f1       	breq	.+86     	; 0xaae <DIO_write+0x5a>
     a58:	18 f4       	brcc	.+6      	; 0xa60 <DIO_write+0xc>
     a5a:	61 34       	cpi	r22, 0x41	; 65
     a5c:	41 f0       	breq	.+16     	; 0xa6e <DIO_write+0x1a>
     a5e:	08 95       	ret
     a60:	63 34       	cpi	r22, 0x43	; 67
     a62:	09 f4       	brne	.+2      	; 0xa66 <DIO_write+0x12>
     a64:	44 c0       	rjmp	.+136    	; 0xaee <DIO_write+0x9a>
     a66:	64 34       	cpi	r22, 0x44	; 68
     a68:	09 f4       	brne	.+2      	; 0xa6c <DIO_write+0x18>
     a6a:	60 c0       	rjmp	.+192    	; 0xb2c <DIO_write+0xd8>
     a6c:	08 95       	ret
	{
		case PORT_A:
		if(value== LOW)
     a6e:	41 11       	cpse	r20, r1
     a70:	0e c0       	rjmp	.+28     	; 0xa8e <DIO_write+0x3a>
		{
			PORTA &= ~(1<<pinNumber); // write 0
     a72:	4b b3       	in	r20, 0x1b	; 27
     a74:	21 e0       	ldi	r18, 0x01	; 1
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	b9 01       	movw	r22, r18
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <DIO_write+0x2c>
     a7c:	66 0f       	add	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	e2 f7       	brpl	.-8      	; 0xa7c <DIO_write+0x28>
     a84:	cb 01       	movw	r24, r22
     a86:	80 95       	com	r24
     a88:	84 23       	and	r24, r20
     a8a:	8b bb       	out	0x1b, r24	; 27
     a8c:	08 95       	ret
		}
		else if(value==HIGH)
     a8e:	41 30       	cpi	r20, 0x01	; 1
     a90:	09 f0       	breq	.+2      	; 0xa94 <DIO_write+0x40>
     a92:	6a c0       	rjmp	.+212    	; 0xb68 <DIO_write+0x114>
		{
			PORTA |= (1<<pinNumber); // write 1
     a94:	4b b3       	in	r20, 0x1b	; 27
     a96:	21 e0       	ldi	r18, 0x01	; 1
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	b9 01       	movw	r22, r18
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <DIO_write+0x4e>
     a9e:	66 0f       	add	r22, r22
     aa0:	77 1f       	adc	r23, r23
     aa2:	8a 95       	dec	r24
     aa4:	e2 f7       	brpl	.-8      	; 0xa9e <DIO_write+0x4a>
     aa6:	cb 01       	movw	r24, r22
     aa8:	84 2b       	or	r24, r20
     aaa:	8b bb       	out	0x1b, r24	; 27
     aac:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_B:
		if(value== LOW)
     aae:	41 11       	cpse	r20, r1
     ab0:	0e c0       	rjmp	.+28     	; 0xace <DIO_write+0x7a>
		{
			PORTB &= ~(1<<pinNumber); // write 0
     ab2:	48 b3       	in	r20, 0x18	; 24
     ab4:	21 e0       	ldi	r18, 0x01	; 1
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	b9 01       	movw	r22, r18
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <DIO_write+0x6c>
     abc:	66 0f       	add	r22, r22
     abe:	77 1f       	adc	r23, r23
     ac0:	8a 95       	dec	r24
     ac2:	e2 f7       	brpl	.-8      	; 0xabc <DIO_write+0x68>
     ac4:	cb 01       	movw	r24, r22
     ac6:	80 95       	com	r24
     ac8:	84 23       	and	r24, r20
     aca:	88 bb       	out	0x18, r24	; 24
     acc:	08 95       	ret
		}
		else if(value==HIGH)
     ace:	41 30       	cpi	r20, 0x01	; 1
     ad0:	09 f0       	breq	.+2      	; 0xad4 <DIO_write+0x80>
     ad2:	4a c0       	rjmp	.+148    	; 0xb68 <DIO_write+0x114>
		{
			PORTB |= (1<<pinNumber); // write 1
     ad4:	48 b3       	in	r20, 0x18	; 24
     ad6:	21 e0       	ldi	r18, 0x01	; 1
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	b9 01       	movw	r22, r18
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <DIO_write+0x8e>
     ade:	66 0f       	add	r22, r22
     ae0:	77 1f       	adc	r23, r23
     ae2:	8a 95       	dec	r24
     ae4:	e2 f7       	brpl	.-8      	; 0xade <DIO_write+0x8a>
     ae6:	cb 01       	movw	r24, r22
     ae8:	84 2b       	or	r24, r20
     aea:	88 bb       	out	0x18, r24	; 24
     aec:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_C:
		if(value== LOW)
     aee:	41 11       	cpse	r20, r1
     af0:	0e c0       	rjmp	.+28     	; 0xb0e <DIO_write+0xba>
		{
			PORTC &= ~(1<<pinNumber); // write 0
     af2:	45 b3       	in	r20, 0x15	; 21
     af4:	21 e0       	ldi	r18, 0x01	; 1
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	b9 01       	movw	r22, r18
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <DIO_write+0xac>
     afc:	66 0f       	add	r22, r22
     afe:	77 1f       	adc	r23, r23
     b00:	8a 95       	dec	r24
     b02:	e2 f7       	brpl	.-8      	; 0xafc <DIO_write+0xa8>
     b04:	cb 01       	movw	r24, r22
     b06:	80 95       	com	r24
     b08:	84 23       	and	r24, r20
     b0a:	85 bb       	out	0x15, r24	; 21
     b0c:	08 95       	ret
		}
		else if(value==HIGH)
     b0e:	41 30       	cpi	r20, 0x01	; 1
     b10:	59 f5       	brne	.+86     	; 0xb68 <DIO_write+0x114>
		{
			PORTC |= (1<<pinNumber); // write 1
     b12:	45 b3       	in	r20, 0x15	; 21
     b14:	21 e0       	ldi	r18, 0x01	; 1
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	b9 01       	movw	r22, r18
     b1a:	02 c0       	rjmp	.+4      	; 0xb20 <DIO_write+0xcc>
     b1c:	66 0f       	add	r22, r22
     b1e:	77 1f       	adc	r23, r23
     b20:	8a 95       	dec	r24
     b22:	e2 f7       	brpl	.-8      	; 0xb1c <DIO_write+0xc8>
     b24:	cb 01       	movw	r24, r22
     b26:	84 2b       	or	r24, r20
     b28:	85 bb       	out	0x15, r24	; 21
     b2a:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_D:
		if(value== LOW)
     b2c:	41 11       	cpse	r20, r1
     b2e:	0e c0       	rjmp	.+28     	; 0xb4c <DIO_write+0xf8>
		{
			PORTD &= ~(1<<pinNumber); // write 0
     b30:	42 b3       	in	r20, 0x12	; 18
     b32:	21 e0       	ldi	r18, 0x01	; 1
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	b9 01       	movw	r22, r18
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <DIO_write+0xea>
     b3a:	66 0f       	add	r22, r22
     b3c:	77 1f       	adc	r23, r23
     b3e:	8a 95       	dec	r24
     b40:	e2 f7       	brpl	.-8      	; 0xb3a <DIO_write+0xe6>
     b42:	cb 01       	movw	r24, r22
     b44:	80 95       	com	r24
     b46:	84 23       	and	r24, r20
     b48:	82 bb       	out	0x12, r24	; 18
     b4a:	08 95       	ret
		}
		else if(value==HIGH)
     b4c:	41 30       	cpi	r20, 0x01	; 1
     b4e:	61 f4       	brne	.+24     	; 0xb68 <DIO_write+0x114>
		{
			PORTD |= (1<<pinNumber); // write 1
     b50:	42 b3       	in	r20, 0x12	; 18
     b52:	21 e0       	ldi	r18, 0x01	; 1
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	b9 01       	movw	r22, r18
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <DIO_write+0x10a>
     b5a:	66 0f       	add	r22, r22
     b5c:	77 1f       	adc	r23, r23
     b5e:	8a 95       	dec	r24
     b60:	e2 f7       	brpl	.-8      	; 0xb5a <DIO_write+0x106>
     b62:	cb 01       	movw	r24, r22
     b64:	84 2b       	or	r24, r20
     b66:	82 bb       	out	0x12, r24	; 18
     b68:	08 95       	ret

00000b6a <EXI_Enable>:
/**DESCRIPTION:-
it enables one of the external interrupt
*/
EN_int__error_t EXI_Enable (EN_int_t Interrupt)
{
	switch (Interrupt)
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	41 f0       	breq	.+16     	; 0xb7e <EXI_Enable+0x14>
     b6e:	18 f0       	brcs	.+6      	; 0xb76 <EXI_Enable+0xc>
     b70:	82 30       	cpi	r24, 0x02	; 2
     b72:	49 f0       	breq	.+18     	; 0xb86 <EXI_Enable+0x1c>
     b74:	08 95       	ret
	{
		case EXT_INT_0:
		set_bit(GICR,INT0);
     b76:	8b b7       	in	r24, 0x3b	; 59
     b78:	80 64       	ori	r24, 0x40	; 64
     b7a:	8b bf       	out	0x3b, r24	; 59
		break;
     b7c:	08 95       	ret
		case EXT_INT_1:
		set_bit(GICR,INT1);
     b7e:	8b b7       	in	r24, 0x3b	; 59
     b80:	80 68       	ori	r24, 0x80	; 128
     b82:	8b bf       	out	0x3b, r24	; 59
		break;
     b84:	08 95       	ret
		case EXT_INT_2:
		set_bit(GICR,INT2);
     b86:	8b b7       	in	r24, 0x3b	; 59
     b88:	80 62       	ori	r24, 0x20	; 32
     b8a:	8b bf       	out	0x3b, r24	; 59
		break;
	}
}
     b8c:	08 95       	ret

00000b8e <EXI_Disable>:
it disables one of the external interrupt
*/

EN_int__error_t EXI_Disable (EN_int_t Interrupt)
{
	switch (Interrupt)
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	41 f0       	breq	.+16     	; 0xba2 <EXI_Disable+0x14>
     b92:	18 f0       	brcs	.+6      	; 0xb9a <EXI_Disable+0xc>
     b94:	82 30       	cpi	r24, 0x02	; 2
     b96:	49 f0       	breq	.+18     	; 0xbaa <EXI_Disable+0x1c>
     b98:	08 95       	ret
	{
		case EXT_INT_0:
		clear_bit(GICR,INT0);
     b9a:	8b b7       	in	r24, 0x3b	; 59
     b9c:	8f 7b       	andi	r24, 0xBF	; 191
     b9e:	8b bf       	out	0x3b, r24	; 59
		break;
     ba0:	08 95       	ret
		case EXT_INT_1:
		clear_bit(GICR,INT1);
     ba2:	8b b7       	in	r24, 0x3b	; 59
     ba4:	8f 77       	andi	r24, 0x7F	; 127
     ba6:	8b bf       	out	0x3b, r24	; 59
		break;
     ba8:	08 95       	ret
		case EXT_INT_2:
		clear_bit(GICR,INT2);
     baa:	8b b7       	in	r24, 0x3b	; 59
     bac:	8f 7d       	andi	r24, 0xDF	; 223
     bae:	8b bf       	out	0x3b, r24	; 59
		break;
	}
}
     bb0:	08 95       	ret

00000bb2 <EXI_Trigger>:
*/

EN_int__error_t EXI_Trigger(EN_int_t Interrupt,EN_trig trigger)
{
	
	switch(Interrupt)
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	49 f1       	breq	.+82     	; 0xc08 <EXI_Trigger+0x56>
     bb6:	20 f0       	brcs	.+8      	; 0xbc0 <EXI_Trigger+0xe>
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	09 f4       	brne	.+2      	; 0xbbe <EXI_Trigger+0xc>
     bbc:	49 c0       	rjmp	.+146    	; 0xc50 <EXI_Trigger+0x9e>
     bbe:	08 95       	ret
	{
		case EXT_INT_0:
		switch(trigger)
     bc0:	61 30       	cpi	r22, 0x01	; 1
     bc2:	69 f0       	breq	.+26     	; 0xbde <EXI_Trigger+0x2c>
     bc4:	28 f0       	brcs	.+10     	; 0xbd0 <EXI_Trigger+0x1e>
     bc6:	62 30       	cpi	r22, 0x02	; 2
     bc8:	89 f0       	breq	.+34     	; 0xbec <EXI_Trigger+0x3a>
     bca:	63 30       	cpi	r22, 0x03	; 3
     bcc:	b1 f0       	breq	.+44     	; 0xbfa <EXI_Trigger+0x48>
     bce:	08 95       	ret
		{
			case LOW_LEVEL:
			clear_bit(MCUCR,ISC00);
     bd0:	85 b7       	in	r24, 0x35	; 53
     bd2:	8e 7f       	andi	r24, 0xFE	; 254
     bd4:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC01);
     bd6:	85 b7       	in	r24, 0x35	; 53
     bd8:	8d 7f       	andi	r24, 0xFD	; 253
     bda:	85 bf       	out	0x35, r24	; 53
			break;
     bdc:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			set_bit(MCUCR,ISC00);
     bde:	85 b7       	in	r24, 0x35	; 53
     be0:	81 60       	ori	r24, 0x01	; 1
     be2:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC01);
     be4:	85 b7       	in	r24, 0x35	; 53
     be6:	8d 7f       	andi	r24, 0xFD	; 253
     be8:	85 bf       	out	0x35, r24	; 53
			break;
     bea:	08 95       	ret
			case FALLING_EDGE:
			clear_bit(MCUCR,ISC00);
     bec:	85 b7       	in	r24, 0x35	; 53
     bee:	8e 7f       	andi	r24, 0xFE	; 254
     bf0:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC01);
     bf2:	85 b7       	in	r24, 0x35	; 53
     bf4:	82 60       	ori	r24, 0x02	; 2
     bf6:	85 bf       	out	0x35, r24	; 53
			break;
     bf8:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCR,ISC00);
     bfa:	85 b7       	in	r24, 0x35	; 53
     bfc:	81 60       	ori	r24, 0x01	; 1
     bfe:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC01);
     c00:	85 b7       	in	r24, 0x35	; 53
     c02:	82 60       	ori	r24, 0x02	; 2
     c04:	85 bf       	out	0x35, r24	; 53
			break;
     c06:	08 95       	ret
		}
		break;
		case EXT_INT_1:
		switch(trigger)
     c08:	61 30       	cpi	r22, 0x01	; 1
     c0a:	69 f0       	breq	.+26     	; 0xc26 <EXI_Trigger+0x74>
     c0c:	28 f0       	brcs	.+10     	; 0xc18 <EXI_Trigger+0x66>
     c0e:	62 30       	cpi	r22, 0x02	; 2
     c10:	89 f0       	breq	.+34     	; 0xc34 <EXI_Trigger+0x82>
     c12:	63 30       	cpi	r22, 0x03	; 3
     c14:	b1 f0       	breq	.+44     	; 0xc42 <EXI_Trigger+0x90>
     c16:	08 95       	ret
		{
			case LOW_LEVEL:
			clear_bit(MCUCR,ISC10);
     c18:	85 b7       	in	r24, 0x35	; 53
     c1a:	8b 7f       	andi	r24, 0xFB	; 251
     c1c:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC11); break;
     c1e:	85 b7       	in	r24, 0x35	; 53
     c20:	87 7f       	andi	r24, 0xF7	; 247
     c22:	85 bf       	out	0x35, r24	; 53
     c24:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			set_bit(MCUCR,ISC10);
     c26:	85 b7       	in	r24, 0x35	; 53
     c28:	84 60       	ori	r24, 0x04	; 4
     c2a:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC11); break;
     c2c:	85 b7       	in	r24, 0x35	; 53
     c2e:	87 7f       	andi	r24, 0xF7	; 247
     c30:	85 bf       	out	0x35, r24	; 53
     c32:	08 95       	ret
			case FALLING_EDGE:
			clear_bit(MCUCR,ISC10);
     c34:	85 b7       	in	r24, 0x35	; 53
     c36:	8b 7f       	andi	r24, 0xFB	; 251
     c38:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC11); break;
     c3a:	85 b7       	in	r24, 0x35	; 53
     c3c:	88 60       	ori	r24, 0x08	; 8
     c3e:	85 bf       	out	0x35, r24	; 53
     c40:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCR,ISC10);
     c42:	85 b7       	in	r24, 0x35	; 53
     c44:	84 60       	ori	r24, 0x04	; 4
     c46:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC11); break;
     c48:	85 b7       	in	r24, 0x35	; 53
     c4a:	88 60       	ori	r24, 0x08	; 8
     c4c:	85 bf       	out	0x35, r24	; 53
     c4e:	08 95       	ret
		}
		break;
		case EXT_INT_2:
		switch(trigger)
     c50:	62 30       	cpi	r22, 0x02	; 2
     c52:	19 f0       	breq	.+6      	; 0xc5a <EXI_Trigger+0xa8>
     c54:	63 30       	cpi	r22, 0x03	; 3
     c56:	29 f0       	breq	.+10     	; 0xc62 <EXI_Trigger+0xb0>
     c58:	08 95       	ret
		{
			case FALLING_EDGE:
			clear_bit(MCUCSR,ISC2);
     c5a:	84 b7       	in	r24, 0x34	; 52
     c5c:	8f 7b       	andi	r24, 0xBF	; 191
     c5e:	84 bf       	out	0x34, r24	; 52
			break;
     c60:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCSR,ISC2);
     c62:	84 b7       	in	r24, 0x34	; 52
     c64:	80 64       	ori	r24, 0x40	; 64
     c66:	84 bf       	out	0x34, r24	; 52
			break;
		}
		break;
	}
}
     c68:	08 95       	ret

00000c6a <EXI_SetCallBack>:
*/


void EXI_SetCallBack(EN_int_t Interrupt,void(*ptrf)(void))
{
	switch (Interrupt)
     c6a:	88 23       	and	r24, r24
     c6c:	19 f0       	breq	.+6      	; 0xc74 <EXI_SetCallBack+0xa>
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	51 f4       	brne	.+20     	; 0xc86 <EXI_SetCallBack+0x1c>
     c72:	05 c0       	rjmp	.+10     	; 0xc7e <EXI_SetCallBack+0x14>
	{
		case EXT_INT_0:
		ptrf_INT_0 =ptrf;
     c74:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <ptrf_INT_0+0x1>
     c78:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <ptrf_INT_0>
		break;
     c7c:	08 95       	ret
		case EXT_INT_1:
		ptrf_INT_1 =ptrf;
		break;
		case EXT_INT_2:
		ptrf_INT_2 =ptrf;
     c7e:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <ptrf_INT_2+0x1>
     c82:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <ptrf_INT_2>
     c86:	08 95       	ret

00000c88 <__vector_1>:
}
/*******************************************************ISR INT_0********************************************************/


ISR (INT0_vect)
{
     c88:	1f 92       	push	r1
     c8a:	0f 92       	push	r0
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	0f 92       	push	r0
     c90:	11 24       	eor	r1, r1
     c92:	2f 93       	push	r18
     c94:	3f 93       	push	r19
     c96:	4f 93       	push	r20
     c98:	5f 93       	push	r21
     c9a:	6f 93       	push	r22
     c9c:	7f 93       	push	r23
     c9e:	8f 93       	push	r24
     ca0:	9f 93       	push	r25
     ca2:	af 93       	push	r26
     ca4:	bf 93       	push	r27
     ca6:	ef 93       	push	r30
     ca8:	ff 93       	push	r31
	
	if (ptrf_INT_0 != NULL)
     caa:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <ptrf_INT_0>
     cae:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <ptrf_INT_0+0x1>
     cb2:	30 97       	sbiw	r30, 0x00	; 0
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <__vector_1+0x30>
	{
		ptrf_INT_0();
     cb6:	09 95       	icall
		

	}
}
     cb8:	ff 91       	pop	r31
     cba:	ef 91       	pop	r30
     cbc:	bf 91       	pop	r27
     cbe:	af 91       	pop	r26
     cc0:	9f 91       	pop	r25
     cc2:	8f 91       	pop	r24
     cc4:	7f 91       	pop	r23
     cc6:	6f 91       	pop	r22
     cc8:	5f 91       	pop	r21
     cca:	4f 91       	pop	r20
     ccc:	3f 91       	pop	r19
     cce:	2f 91       	pop	r18
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	0f 90       	pop	r0
     cd6:	1f 90       	pop	r1
     cd8:	18 95       	reti

00000cda <__vector_2>:

ISR (INT1_vect)
{
     cda:	1f 92       	push	r1
     cdc:	0f 92       	push	r0
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	0f 92       	push	r0
     ce2:	11 24       	eor	r1, r1
     ce4:	8f 93       	push	r24
	if (ptrf_INT_1 != NULL)
	{
		//ptrf_INT_1();
		
	}
	car_flag = 1 ;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <car_flag>
}
     cec:	8f 91       	pop	r24
     cee:	0f 90       	pop	r0
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	0f 90       	pop	r0
     cf4:	1f 90       	pop	r1
     cf6:	18 95       	reti

00000cf8 <__vector_3>:

ISR (INT2_vect)
{
     cf8:	1f 92       	push	r1
     cfa:	0f 92       	push	r0
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	0f 92       	push	r0
     d00:	11 24       	eor	r1, r1
     d02:	2f 93       	push	r18
     d04:	3f 93       	push	r19
     d06:	4f 93       	push	r20
     d08:	5f 93       	push	r21
     d0a:	6f 93       	push	r22
     d0c:	7f 93       	push	r23
     d0e:	8f 93       	push	r24
     d10:	9f 93       	push	r25
     d12:	af 93       	push	r26
     d14:	bf 93       	push	r27
     d16:	ef 93       	push	r30
     d18:	ff 93       	push	r31
	if (ptrf_INT_2 != NULL)
     d1a:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <ptrf_INT_2>
     d1e:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <ptrf_INT_2+0x1>
     d22:	30 97       	sbiw	r30, 0x00	; 0
     d24:	09 f0       	breq	.+2      	; 0xd28 <__vector_3+0x30>
	{
		ptrf_INT_2();
     d26:	09 95       	icall
	}
     d28:	ff 91       	pop	r31
     d2a:	ef 91       	pop	r30
     d2c:	bf 91       	pop	r27
     d2e:	af 91       	pop	r26
     d30:	9f 91       	pop	r25
     d32:	8f 91       	pop	r24
     d34:	7f 91       	pop	r23
     d36:	6f 91       	pop	r22
     d38:	5f 91       	pop	r21
     d3a:	4f 91       	pop	r20
     d3c:	3f 91       	pop	r19
     d3e:	2f 91       	pop	r18
     d40:	0f 90       	pop	r0
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	0f 90       	pop	r0
     d46:	1f 90       	pop	r1
     d48:	18 95       	reti

00000d4a <TIMER_0_init>:
	TIMER_2_init(NORMAL_MODE);
	TIMER_2_setIntialValue(0);
	TIMER_2_start(PRECALER_1);
	TIMER_2_OvfNum(ovfNum2);
	
}
     d4a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Timer_cfgArray>
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	f1 f0       	breq	.+60     	; 0xd8e <TIMER_0_init+0x44>
     d52:	28 f0       	brcs	.+10     	; 0xd5e <TIMER_0_init+0x14>
     d54:	82 30       	cpi	r24, 0x02	; 2
     d56:	99 f0       	breq	.+38     	; 0xd7e <TIMER_0_init+0x34>
     d58:	84 30       	cpi	r24, 0x04	; 4
     d5a:	49 f0       	breq	.+18     	; 0xd6e <TIMER_0_init+0x24>
     d5c:	20 c0       	rjmp	.+64     	; 0xd9e <TIMER_0_init+0x54>
     d5e:	83 b7       	in	r24, 0x33	; 51
     d60:	8f 7b       	andi	r24, 0xBF	; 191
     d62:	83 bf       	out	0x33, r24	; 51
     d64:	83 b7       	in	r24, 0x33	; 51
     d66:	87 7f       	andi	r24, 0xF7	; 247
     d68:	83 bf       	out	0x33, r24	; 51
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	08 95       	ret
     d6e:	83 b7       	in	r24, 0x33	; 51
     d70:	80 64       	ori	r24, 0x40	; 64
     d72:	83 bf       	out	0x33, r24	; 51
     d74:	83 b7       	in	r24, 0x33	; 51
     d76:	87 7f       	andi	r24, 0xF7	; 247
     d78:	83 bf       	out	0x33, r24	; 51
     d7a:	84 e0       	ldi	r24, 0x04	; 4
     d7c:	08 95       	ret
     d7e:	83 b7       	in	r24, 0x33	; 51
     d80:	8f 7b       	andi	r24, 0xBF	; 191
     d82:	83 bf       	out	0x33, r24	; 51
     d84:	83 b7       	in	r24, 0x33	; 51
     d86:	88 60       	ori	r24, 0x08	; 8
     d88:	83 bf       	out	0x33, r24	; 51
     d8a:	84 e0       	ldi	r24, 0x04	; 4
     d8c:	08 95       	ret
     d8e:	83 b7       	in	r24, 0x33	; 51
     d90:	80 64       	ori	r24, 0x40	; 64
     d92:	83 bf       	out	0x33, r24	; 51
     d94:	83 b7       	in	r24, 0x33	; 51
     d96:	88 60       	ori	r24, 0x08	; 8
     d98:	83 bf       	out	0x33, r24	; 51
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	08 95       	ret
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	08 95       	ret

00000da2 <TIMER_0_start>:
     da2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Timer_cfgArray+0x1>
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	09 f1       	breq	.+66     	; 0xdec <TIMER_0_start+0x4a>
     daa:	28 f4       	brcc	.+10     	; 0xdb6 <TIMER_0_start+0x14>
     dac:	88 23       	and	r24, r24
     dae:	41 f0       	breq	.+16     	; 0xdc0 <TIMER_0_start+0x1e>
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	89 f0       	breq	.+34     	; 0xdd6 <TIMER_0_start+0x34>
     db4:	3c c0       	rjmp	.+120    	; 0xe2e <TIMER_0_start+0x8c>
     db6:	85 30       	cpi	r24, 0x05	; 5
     db8:	21 f1       	breq	.+72     	; 0xe02 <TIMER_0_start+0x60>
     dba:	86 30       	cpi	r24, 0x06	; 6
     dbc:	69 f1       	breq	.+90     	; 0xe18 <TIMER_0_start+0x76>
     dbe:	37 c0       	rjmp	.+110    	; 0xe2e <TIMER_0_start+0x8c>
     dc0:	83 b7       	in	r24, 0x33	; 51
     dc2:	81 60       	ori	r24, 0x01	; 1
     dc4:	83 bf       	out	0x33, r24	; 51
     dc6:	83 b7       	in	r24, 0x33	; 51
     dc8:	8d 7f       	andi	r24, 0xFD	; 253
     dca:	83 bf       	out	0x33, r24	; 51
     dcc:	83 b7       	in	r24, 0x33	; 51
     dce:	8b 7f       	andi	r24, 0xFB	; 251
     dd0:	83 bf       	out	0x33, r24	; 51
     dd2:	84 e0       	ldi	r24, 0x04	; 4
     dd4:	08 95       	ret
     dd6:	83 b7       	in	r24, 0x33	; 51
     dd8:	82 60       	ori	r24, 0x02	; 2
     dda:	83 bf       	out	0x33, r24	; 51
     ddc:	83 b7       	in	r24, 0x33	; 51
     dde:	8e 7f       	andi	r24, 0xFE	; 254
     de0:	83 bf       	out	0x33, r24	; 51
     de2:	83 b7       	in	r24, 0x33	; 51
     de4:	8b 7f       	andi	r24, 0xFB	; 251
     de6:	83 bf       	out	0x33, r24	; 51
     de8:	84 e0       	ldi	r24, 0x04	; 4
     dea:	08 95       	ret
     dec:	83 b7       	in	r24, 0x33	; 51
     dee:	81 60       	ori	r24, 0x01	; 1
     df0:	83 bf       	out	0x33, r24	; 51
     df2:	83 b7       	in	r24, 0x33	; 51
     df4:	82 60       	ori	r24, 0x02	; 2
     df6:	83 bf       	out	0x33, r24	; 51
     df8:	83 b7       	in	r24, 0x33	; 51
     dfa:	8b 7f       	andi	r24, 0xFB	; 251
     dfc:	83 bf       	out	0x33, r24	; 51
     dfe:	84 e0       	ldi	r24, 0x04	; 4
     e00:	08 95       	ret
     e02:	83 b7       	in	r24, 0x33	; 51
     e04:	84 60       	ori	r24, 0x04	; 4
     e06:	83 bf       	out	0x33, r24	; 51
     e08:	83 b7       	in	r24, 0x33	; 51
     e0a:	8d 7f       	andi	r24, 0xFD	; 253
     e0c:	83 bf       	out	0x33, r24	; 51
     e0e:	83 b7       	in	r24, 0x33	; 51
     e10:	8e 7f       	andi	r24, 0xFE	; 254
     e12:	83 bf       	out	0x33, r24	; 51
     e14:	84 e0       	ldi	r24, 0x04	; 4
     e16:	08 95       	ret
     e18:	83 b7       	in	r24, 0x33	; 51
     e1a:	81 60       	ori	r24, 0x01	; 1
     e1c:	83 bf       	out	0x33, r24	; 51
     e1e:	83 b7       	in	r24, 0x33	; 51
     e20:	8d 7f       	andi	r24, 0xFD	; 253
     e22:	83 bf       	out	0x33, r24	; 51
     e24:	83 b7       	in	r24, 0x33	; 51
     e26:	84 60       	ori	r24, 0x04	; 4
     e28:	83 bf       	out	0x33, r24	; 51
     e2a:	84 e0       	ldi	r24, 0x04	; 4
     e2c:	08 95       	ret
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	08 95       	ret

00000e32 <TIMER_0_OvfNum>:
     e32:	8f 92       	push	r8
     e34:	9f 92       	push	r9
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	4b 01       	movw	r8, r22
     e44:	5c 01       	movw	r10, r24
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	a9 01       	movw	r20, r18
     e4c:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gesf2>
     e50:	18 16       	cp	r1, r24
     e52:	ec f4       	brge	.+58     	; 0xe8e <TIMER_0_OvfNum+0x5c>
     e54:	c1 2c       	mov	r12, r1
     e56:	d1 2c       	mov	r13, r1
     e58:	76 01       	movw	r14, r12
     e5a:	08 b6       	in	r0, 0x38	; 56
     e5c:	00 fe       	sbrs	r0, 0
     e5e:	fd cf       	rjmp	.-6      	; 0xe5a <TIMER_0_OvfNum+0x28>
     e60:	88 b7       	in	r24, 0x38	; 56
     e62:	81 60       	ori	r24, 0x01	; 1
     e64:	88 bf       	out	0x38, r24	; 56
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e8       	ldi	r20, 0x80	; 128
     e6c:	5f e3       	ldi	r21, 0x3F	; 63
     e6e:	c7 01       	movw	r24, r14
     e70:	b6 01       	movw	r22, r12
     e72:	0e 94 90 08 	call	0x1120	; 0x1120 <__addsf3>
     e76:	6b 01       	movw	r12, r22
     e78:	7c 01       	movw	r14, r24
     e7a:	9b 01       	movw	r18, r22
     e7c:	ac 01       	movw	r20, r24
     e7e:	c5 01       	movw	r24, r10
     e80:	b4 01       	movw	r22, r8
     e82:	0e 94 6f 0a 	call	0x14de	; 0x14de <__gesf2>
     e86:	18 16       	cp	r1, r24
     e88:	44 f3       	brlt	.-48     	; 0xe5a <TIMER_0_OvfNum+0x28>
     e8a:	84 e0       	ldi	r24, 0x04	; 4
     e8c:	12 c0       	rjmp	.+36     	; 0xeb2 <TIMER_0_OvfNum+0x80>
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	a9 01       	movw	r20, r18
     e94:	c5 01       	movw	r24, r10
     e96:	b4 01       	movw	r22, r8
     e98:	0e 94 13 09 	call	0x1226	; 0x1226 <__cmpsf2>
     e9c:	18 16       	cp	r1, r24
     e9e:	44 f0       	brlt	.+16     	; 0xeb0 <TIMER_0_OvfNum+0x7e>
     ea0:	08 b6       	in	r0, 0x38	; 56
     ea2:	00 fe       	sbrs	r0, 0
     ea4:	fd cf       	rjmp	.-6      	; 0xea0 <TIMER_0_OvfNum+0x6e>
     ea6:	88 b7       	in	r24, 0x38	; 56
     ea8:	81 60       	ori	r24, 0x01	; 1
     eaa:	88 bf       	out	0x38, r24	; 56
     eac:	84 e0       	ldi	r24, 0x04	; 4
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <TIMER_0_OvfNum+0x80>
     eb0:	82 e0       	ldi	r24, 0x02	; 2
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	bf 90       	pop	r11
     ebc:	af 90       	pop	r10
     ebe:	9f 90       	pop	r9
     ec0:	8f 90       	pop	r8
     ec2:	08 95       	ret

00000ec4 <TIMER_0_pwm>:
     ec4:	cf 93       	push	r28
     ec6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <ceil>
     eca:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fixunssfsi>
     ece:	c6 2f       	mov	r28, r22
     ed0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <TIMER_0_init>
     ed4:	c2 bf       	out	0x32, r28	; 50
     ed6:	0e 94 d1 06 	call	0xda2	; 0xda2 <TIMER_0_start>
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	80 e8       	ldi	r24, 0x80	; 128
     ee0:	9f e3       	ldi	r25, 0x3F	; 63
     ee2:	0e 94 19 07 	call	0xe32	; 0xe32 <TIMER_0_OvfNum>
     ee6:	13 be       	out	0x33, r1	; 51
     ee8:	12 be       	out	0x32, r1	; 50
     eea:	88 b7       	in	r24, 0x38	; 56
     eec:	81 60       	ori	r24, 0x01	; 1
     eee:	88 bf       	out	0x38, r24	; 56
     ef0:	cf 91       	pop	r28
     ef2:	08 95       	ret

00000ef4 <Timer1_Init>:
     ef4:	88 23       	and	r24, r24
     ef6:	19 f0       	breq	.+6      	; 0xefe <Timer1_Init+0xa>
     ef8:	83 30       	cpi	r24, 0x03	; 3
     efa:	71 f0       	breq	.+28     	; 0xf18 <Timer1_Init+0x24>
     efc:	19 c0       	rjmp	.+50     	; 0xf30 <Timer1_Init+0x3c>
     efe:	8f b5       	in	r24, 0x2f	; 47
     f00:	8e 7f       	andi	r24, 0xFE	; 254
     f02:	8f bd       	out	0x2f, r24	; 47
     f04:	8f b5       	in	r24, 0x2f	; 47
     f06:	8d 7f       	andi	r24, 0xFD	; 253
     f08:	8f bd       	out	0x2f, r24	; 47
     f0a:	8e b5       	in	r24, 0x2e	; 46
     f0c:	87 7f       	andi	r24, 0xF7	; 247
     f0e:	8e bd       	out	0x2e, r24	; 46
     f10:	8e b5       	in	r24, 0x2e	; 46
     f12:	8f 7e       	andi	r24, 0xEF	; 239
     f14:	8e bd       	out	0x2e, r24	; 46
     f16:	0c c0       	rjmp	.+24     	; 0xf30 <Timer1_Init+0x3c>
     f18:	8f b5       	in	r24, 0x2f	; 47
     f1a:	81 60       	ori	r24, 0x01	; 1
     f1c:	8f bd       	out	0x2f, r24	; 47
     f1e:	8f b5       	in	r24, 0x2f	; 47
     f20:	82 60       	ori	r24, 0x02	; 2
     f22:	8f bd       	out	0x2f, r24	; 47
     f24:	8e b5       	in	r24, 0x2e	; 46
     f26:	88 60       	ori	r24, 0x08	; 8
     f28:	8e bd       	out	0x2e, r24	; 46
     f2a:	8e b5       	in	r24, 0x2e	; 46
     f2c:	80 61       	ori	r24, 0x10	; 16
     f2e:	8e bd       	out	0x2e, r24	; 46
     f30:	8e b5       	in	r24, 0x2e	; 46
     f32:	88 7f       	andi	r24, 0xF8	; 248
     f34:	8e bd       	out	0x2e, r24	; 46
     f36:	8e b5       	in	r24, 0x2e	; 46
     f38:	68 2b       	or	r22, r24
     f3a:	6e bd       	out	0x2e, r22	; 46
     f3c:	08 95       	ret

00000f3e <Timer1_OVF_InterruptEnable>:
     f3e:	89 b7       	in	r24, 0x39	; 57
     f40:	84 60       	ori	r24, 0x04	; 4
     f42:	89 bf       	out	0x39, r24	; 57
     f44:	08 95       	ret

00000f46 <Timer1_OVF_SetCallBack>:
     f46:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <Timer1_OVF_Fptr+0x1>
     f4a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <Timer1_OVF_Fptr>
     f4e:	08 95       	ret

00000f50 <__vector_9>:
     f50:	1f 92       	push	r1
     f52:	0f 92       	push	r0
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	0f 92       	push	r0
     f58:	11 24       	eor	r1, r1
     f5a:	2f 93       	push	r18
     f5c:	3f 93       	push	r19
     f5e:	4f 93       	push	r20
     f60:	5f 93       	push	r21
     f62:	6f 93       	push	r22
     f64:	7f 93       	push	r23
     f66:	8f 93       	push	r24
     f68:	9f 93       	push	r25
     f6a:	af 93       	push	r26
     f6c:	bf 93       	push	r27
     f6e:	ef 93       	push	r30
     f70:	ff 93       	push	r31
     f72:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <Timer1_OVF_Fptr>
     f76:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <Timer1_OVF_Fptr+0x1>
     f7a:	30 97       	sbiw	r30, 0x00	; 0
     f7c:	09 f0       	breq	.+2      	; 0xf80 <__vector_9+0x30>
     f7e:	09 95       	icall
     f80:	ff 91       	pop	r31
     f82:	ef 91       	pop	r30
     f84:	bf 91       	pop	r27
     f86:	af 91       	pop	r26
     f88:	9f 91       	pop	r25
     f8a:	8f 91       	pop	r24
     f8c:	7f 91       	pop	r23
     f8e:	6f 91       	pop	r22
     f90:	5f 91       	pop	r21
     f92:	4f 91       	pop	r20
     f94:	3f 91       	pop	r19
     f96:	2f 91       	pop	r18
     f98:	0f 90       	pop	r0
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	0f 90       	pop	r0
     f9e:	1f 90       	pop	r1
     fa0:	18 95       	reti

00000fa2 <TIMER_2_init>:
     fa2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Timer_cfgArray+0x4>
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	f1 f0       	breq	.+60     	; 0xfe6 <TIMER_2_init+0x44>
     faa:	28 f0       	brcs	.+10     	; 0xfb6 <TIMER_2_init+0x14>
     fac:	82 30       	cpi	r24, 0x02	; 2
     fae:	99 f0       	breq	.+38     	; 0xfd6 <TIMER_2_init+0x34>
     fb0:	84 30       	cpi	r24, 0x04	; 4
     fb2:	49 f0       	breq	.+18     	; 0xfc6 <TIMER_2_init+0x24>
     fb4:	20 c0       	rjmp	.+64     	; 0xff6 <TIMER_2_init+0x54>
     fb6:	85 b5       	in	r24, 0x25	; 37
     fb8:	8f 7b       	andi	r24, 0xBF	; 191
     fba:	85 bd       	out	0x25, r24	; 37
     fbc:	85 b5       	in	r24, 0x25	; 37
     fbe:	87 7f       	andi	r24, 0xF7	; 247
     fc0:	85 bd       	out	0x25, r24	; 37
     fc2:	84 e0       	ldi	r24, 0x04	; 4
     fc4:	08 95       	ret
     fc6:	85 b5       	in	r24, 0x25	; 37
     fc8:	80 64       	ori	r24, 0x40	; 64
     fca:	85 bd       	out	0x25, r24	; 37
     fcc:	85 b5       	in	r24, 0x25	; 37
     fce:	87 7f       	andi	r24, 0xF7	; 247
     fd0:	85 bd       	out	0x25, r24	; 37
     fd2:	84 e0       	ldi	r24, 0x04	; 4
     fd4:	08 95       	ret
     fd6:	85 b5       	in	r24, 0x25	; 37
     fd8:	8f 7b       	andi	r24, 0xBF	; 191
     fda:	85 bd       	out	0x25, r24	; 37
     fdc:	85 b5       	in	r24, 0x25	; 37
     fde:	88 60       	ori	r24, 0x08	; 8
     fe0:	85 bd       	out	0x25, r24	; 37
     fe2:	84 e0       	ldi	r24, 0x04	; 4
     fe4:	08 95       	ret
     fe6:	85 b5       	in	r24, 0x25	; 37
     fe8:	80 64       	ori	r24, 0x40	; 64
     fea:	85 bd       	out	0x25, r24	; 37
     fec:	85 b5       	in	r24, 0x25	; 37
     fee:	88 60       	ori	r24, 0x08	; 8
     ff0:	85 bd       	out	0x25, r24	; 37
     ff2:	84 e0       	ldi	r24, 0x04	; 4
     ff4:	08 95       	ret
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	08 95       	ret

00000ffa <TIMER_2_start>:
     ffa:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <Timer_cfgArray+0x5>
     ffe:	8e 2f       	mov	r24, r30
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	87 30       	cpi	r24, 0x07	; 7
    1004:	91 05       	cpc	r25, r1
    1006:	08 f0       	brcs	.+2      	; 0x100a <TIMER_2_start+0x10>
    1008:	52 c0       	rjmp	.+164    	; 0x10ae <TIMER_2_start+0xb4>
    100a:	fc 01       	movw	r30, r24
    100c:	e6 5d       	subi	r30, 0xD6	; 214
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__tablejump2__>
    1014:	85 b5       	in	r24, 0x25	; 37
    1016:	81 60       	ori	r24, 0x01	; 1
    1018:	85 bd       	out	0x25, r24	; 37
    101a:	85 b5       	in	r24, 0x25	; 37
    101c:	8d 7f       	andi	r24, 0xFD	; 253
    101e:	85 bd       	out	0x25, r24	; 37
    1020:	85 b5       	in	r24, 0x25	; 37
    1022:	8b 7f       	andi	r24, 0xFB	; 251
    1024:	85 bd       	out	0x25, r24	; 37
    1026:	84 e0       	ldi	r24, 0x04	; 4
    1028:	08 95       	ret
    102a:	85 b5       	in	r24, 0x25	; 37
    102c:	82 60       	ori	r24, 0x02	; 2
    102e:	85 bd       	out	0x25, r24	; 37
    1030:	85 b5       	in	r24, 0x25	; 37
    1032:	8e 7f       	andi	r24, 0xFE	; 254
    1034:	85 bd       	out	0x25, r24	; 37
    1036:	85 b5       	in	r24, 0x25	; 37
    1038:	8b 7f       	andi	r24, 0xFB	; 251
    103a:	85 bd       	out	0x25, r24	; 37
    103c:	84 e0       	ldi	r24, 0x04	; 4
    103e:	08 95       	ret
    1040:	85 b5       	in	r24, 0x25	; 37
    1042:	81 60       	ori	r24, 0x01	; 1
    1044:	85 bd       	out	0x25, r24	; 37
    1046:	85 b5       	in	r24, 0x25	; 37
    1048:	82 60       	ori	r24, 0x02	; 2
    104a:	85 bd       	out	0x25, r24	; 37
    104c:	85 b5       	in	r24, 0x25	; 37
    104e:	8b 7f       	andi	r24, 0xFB	; 251
    1050:	85 bd       	out	0x25, r24	; 37
    1052:	84 e0       	ldi	r24, 0x04	; 4
    1054:	08 95       	ret
    1056:	85 b5       	in	r24, 0x25	; 37
    1058:	84 60       	ori	r24, 0x04	; 4
    105a:	85 bd       	out	0x25, r24	; 37
    105c:	85 b5       	in	r24, 0x25	; 37
    105e:	8d 7f       	andi	r24, 0xFD	; 253
    1060:	85 bd       	out	0x25, r24	; 37
    1062:	85 b5       	in	r24, 0x25	; 37
    1064:	8e 7f       	andi	r24, 0xFE	; 254
    1066:	85 bd       	out	0x25, r24	; 37
    1068:	84 e0       	ldi	r24, 0x04	; 4
    106a:	08 95       	ret
    106c:	85 b5       	in	r24, 0x25	; 37
    106e:	81 60       	ori	r24, 0x01	; 1
    1070:	85 bd       	out	0x25, r24	; 37
    1072:	85 b5       	in	r24, 0x25	; 37
    1074:	8d 7f       	andi	r24, 0xFD	; 253
    1076:	85 bd       	out	0x25, r24	; 37
    1078:	85 b5       	in	r24, 0x25	; 37
    107a:	84 60       	ori	r24, 0x04	; 4
    107c:	85 bd       	out	0x25, r24	; 37
    107e:	84 e0       	ldi	r24, 0x04	; 4
    1080:	08 95       	ret
    1082:	85 b5       	in	r24, 0x25	; 37
    1084:	84 60       	ori	r24, 0x04	; 4
    1086:	85 bd       	out	0x25, r24	; 37
    1088:	85 b5       	in	r24, 0x25	; 37
    108a:	8e 7f       	andi	r24, 0xFE	; 254
    108c:	85 bd       	out	0x25, r24	; 37
    108e:	85 b5       	in	r24, 0x25	; 37
    1090:	82 60       	ori	r24, 0x02	; 2
    1092:	85 bd       	out	0x25, r24	; 37
    1094:	84 e0       	ldi	r24, 0x04	; 4
    1096:	08 95       	ret
    1098:	85 b5       	in	r24, 0x25	; 37
    109a:	81 60       	ori	r24, 0x01	; 1
    109c:	85 bd       	out	0x25, r24	; 37
    109e:	85 b5       	in	r24, 0x25	; 37
    10a0:	82 60       	ori	r24, 0x02	; 2
    10a2:	85 bd       	out	0x25, r24	; 37
    10a4:	85 b5       	in	r24, 0x25	; 37
    10a6:	84 60       	ori	r24, 0x04	; 4
    10a8:	85 bd       	out	0x25, r24	; 37
    10aa:	84 e0       	ldi	r24, 0x04	; 4
    10ac:	08 95       	ret
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	08 95       	ret

000010b2 <TIMER_2_INT>:




void TIMER_2_INT(){
	sei();
    10b2:	78 94       	sei
	set_bit(TIMSK,TOIE2);
    10b4:	89 b7       	in	r24, 0x39	; 57
    10b6:	80 64       	ori	r24, 0x40	; 64
    10b8:	89 bf       	out	0x39, r24	; 57
	TIMER_2_init();
    10ba:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <TIMER_2_init>
Timer_ErrorStatus TIMER_2_setIntialValue(uint8_t a_value){
	Timer_ErrorStatus errorStatus = TIMER_OK;

	if(a_value < TIMR2_MAX_VALUE && a_value >= 0){
		
		TCNT2 = a_value ;
    10be:	14 bc       	out	0x24, r1	; 36
void TIMER_2_INT(){
	sei();
	set_bit(TIMSK,TOIE2);
	TIMER_2_init();
	TIMER_2_setIntialValue(0);
	TIMER_2_start();
    10c0:	0e 94 fd 07 	call	0xffa	; 0xffa <TIMER_2_start>
    10c4:	08 95       	ret

000010c6 <TIMER_2_SetCallBack>:

static void (*ptrf_TIMER_2)(void)=NULL;

void TIMER_2_SetCallBack(void(*ptrf)(void)){
	
	ptrf_TIMER_2 = ptrf;
    10c6:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <ptrf_TIMER_2+0x1>
    10ca:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <ptrf_TIMER_2>
    10ce:	08 95       	ret

000010d0 <__vector_5>:
	
}

ISR(TIMER2_OVF){
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
    10da:	2f 93       	push	r18
    10dc:	3f 93       	push	r19
    10de:	4f 93       	push	r20
    10e0:	5f 93       	push	r21
    10e2:	6f 93       	push	r22
    10e4:	7f 93       	push	r23
    10e6:	8f 93       	push	r24
    10e8:	9f 93       	push	r25
    10ea:	af 93       	push	r26
    10ec:	bf 93       	push	r27
    10ee:	ef 93       	push	r30
    10f0:	ff 93       	push	r31
	
	
	ptrf_TIMER_2();
    10f2:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <ptrf_TIMER_2>
    10f6:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <ptrf_TIMER_2+0x1>
    10fa:	09 95       	icall
	
	
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	7f 91       	pop	r23
    110a:	6f 91       	pop	r22
    110c:	5f 91       	pop	r21
    110e:	4f 91       	pop	r20
    1110:	3f 91       	pop	r19
    1112:	2f 91       	pop	r18
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

0000111e <__subsf3>:
    111e:	50 58       	subi	r21, 0x80	; 128

00001120 <__addsf3>:
    1120:	bb 27       	eor	r27, r27
    1122:	aa 27       	eor	r26, r26
    1124:	0e 94 a7 08 	call	0x114e	; 0x114e <__addsf3x>
    1128:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_round>
    112c:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fp_pscA>
    1130:	38 f0       	brcs	.+14     	; 0x1140 <__addsf3+0x20>
    1132:	0e 94 16 0a 	call	0x142c	; 0x142c <__fp_pscB>
    1136:	20 f0       	brcs	.+8      	; 0x1140 <__addsf3+0x20>
    1138:	39 f4       	brne	.+14     	; 0x1148 <__addsf3+0x28>
    113a:	9f 3f       	cpi	r25, 0xFF	; 255
    113c:	19 f4       	brne	.+6      	; 0x1144 <__addsf3+0x24>
    113e:	26 f4       	brtc	.+8      	; 0x1148 <__addsf3+0x28>
    1140:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_nan>
    1144:	0e f4       	brtc	.+2      	; 0x1148 <__addsf3+0x28>
    1146:	e0 95       	com	r30
    1148:	e7 fb       	bst	r30, 7
    114a:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__fp_inf>

0000114e <__addsf3x>:
    114e:	e9 2f       	mov	r30, r25
    1150:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fp_split3>
    1154:	58 f3       	brcs	.-42     	; 0x112c <__addsf3+0xc>
    1156:	ba 17       	cp	r27, r26
    1158:	62 07       	cpc	r22, r18
    115a:	73 07       	cpc	r23, r19
    115c:	84 07       	cpc	r24, r20
    115e:	95 07       	cpc	r25, r21
    1160:	20 f0       	brcs	.+8      	; 0x116a <__addsf3x+0x1c>
    1162:	79 f4       	brne	.+30     	; 0x1182 <__addsf3x+0x34>
    1164:	a6 f5       	brtc	.+104    	; 0x11ce <__addsf3x+0x80>
    1166:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__fp_zero>
    116a:	0e f4       	brtc	.+2      	; 0x116e <__addsf3x+0x20>
    116c:	e0 95       	com	r30
    116e:	0b 2e       	mov	r0, r27
    1170:	ba 2f       	mov	r27, r26
    1172:	a0 2d       	mov	r26, r0
    1174:	0b 01       	movw	r0, r22
    1176:	b9 01       	movw	r22, r18
    1178:	90 01       	movw	r18, r0
    117a:	0c 01       	movw	r0, r24
    117c:	ca 01       	movw	r24, r20
    117e:	a0 01       	movw	r20, r0
    1180:	11 24       	eor	r1, r1
    1182:	ff 27       	eor	r31, r31
    1184:	59 1b       	sub	r21, r25
    1186:	99 f0       	breq	.+38     	; 0x11ae <__addsf3x+0x60>
    1188:	59 3f       	cpi	r21, 0xF9	; 249
    118a:	50 f4       	brcc	.+20     	; 0x11a0 <__addsf3x+0x52>
    118c:	50 3e       	cpi	r21, 0xE0	; 224
    118e:	68 f1       	brcs	.+90     	; 0x11ea <__addsf3x+0x9c>
    1190:	1a 16       	cp	r1, r26
    1192:	f0 40       	sbci	r31, 0x00	; 0
    1194:	a2 2f       	mov	r26, r18
    1196:	23 2f       	mov	r18, r19
    1198:	34 2f       	mov	r19, r20
    119a:	44 27       	eor	r20, r20
    119c:	58 5f       	subi	r21, 0xF8	; 248
    119e:	f3 cf       	rjmp	.-26     	; 0x1186 <__addsf3x+0x38>
    11a0:	46 95       	lsr	r20
    11a2:	37 95       	ror	r19
    11a4:	27 95       	ror	r18
    11a6:	a7 95       	ror	r26
    11a8:	f0 40       	sbci	r31, 0x00	; 0
    11aa:	53 95       	inc	r21
    11ac:	c9 f7       	brne	.-14     	; 0x11a0 <__addsf3x+0x52>
    11ae:	7e f4       	brtc	.+30     	; 0x11ce <__addsf3x+0x80>
    11b0:	1f 16       	cp	r1, r31
    11b2:	ba 0b       	sbc	r27, r26
    11b4:	62 0b       	sbc	r22, r18
    11b6:	73 0b       	sbc	r23, r19
    11b8:	84 0b       	sbc	r24, r20
    11ba:	ba f0       	brmi	.+46     	; 0x11ea <__addsf3x+0x9c>
    11bc:	91 50       	subi	r25, 0x01	; 1
    11be:	a1 f0       	breq	.+40     	; 0x11e8 <__addsf3x+0x9a>
    11c0:	ff 0f       	add	r31, r31
    11c2:	bb 1f       	adc	r27, r27
    11c4:	66 1f       	adc	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	c2 f7       	brpl	.-16     	; 0x11bc <__addsf3x+0x6e>
    11cc:	0e c0       	rjmp	.+28     	; 0x11ea <__addsf3x+0x9c>
    11ce:	ba 0f       	add	r27, r26
    11d0:	62 1f       	adc	r22, r18
    11d2:	73 1f       	adc	r23, r19
    11d4:	84 1f       	adc	r24, r20
    11d6:	48 f4       	brcc	.+18     	; 0x11ea <__addsf3x+0x9c>
    11d8:	87 95       	ror	r24
    11da:	77 95       	ror	r23
    11dc:	67 95       	ror	r22
    11de:	b7 95       	ror	r27
    11e0:	f7 95       	ror	r31
    11e2:	9e 3f       	cpi	r25, 0xFE	; 254
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <__addsf3x+0x9a>
    11e6:	b0 cf       	rjmp	.-160    	; 0x1148 <__addsf3+0x28>
    11e8:	93 95       	inc	r25
    11ea:	88 0f       	add	r24, r24
    11ec:	08 f0       	brcs	.+2      	; 0x11f0 <__addsf3x+0xa2>
    11ee:	99 27       	eor	r25, r25
    11f0:	ee 0f       	add	r30, r30
    11f2:	97 95       	ror	r25
    11f4:	87 95       	ror	r24
    11f6:	08 95       	ret

000011f8 <ceil>:
    11f8:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fp_trunc>
    11fc:	90 f0       	brcs	.+36     	; 0x1222 <ceil+0x2a>
    11fe:	9f 37       	cpi	r25, 0x7F	; 127
    1200:	48 f4       	brcc	.+18     	; 0x1214 <ceil+0x1c>
    1202:	91 11       	cpse	r25, r1
    1204:	16 f4       	brtc	.+4      	; 0x120a <ceil+0x12>
    1206:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_szero>
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	80 e8       	ldi	r24, 0x80	; 128
    1210:	9f e3       	ldi	r25, 0x3F	; 63
    1212:	08 95       	ret
    1214:	26 f0       	brts	.+8      	; 0x121e <ceil+0x26>
    1216:	1b 16       	cp	r1, r27
    1218:	61 1d       	adc	r22, r1
    121a:	71 1d       	adc	r23, r1
    121c:	81 1d       	adc	r24, r1
    121e:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__fp_mintl>
    1222:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__fp_mpack>

00001226 <__cmpsf2>:
    1226:	0e 94 b9 09 	call	0x1372	; 0x1372 <__fp_cmp>
    122a:	08 f4       	brcc	.+2      	; 0x122e <__cmpsf2+0x8>
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	08 95       	ret

00001230 <__divsf3>:
    1230:	0e 94 2c 09 	call	0x1258	; 0x1258 <__divsf3x>
    1234:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_round>
    1238:	0e 94 16 0a 	call	0x142c	; 0x142c <__fp_pscB>
    123c:	58 f0       	brcs	.+22     	; 0x1254 <__divsf3+0x24>
    123e:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fp_pscA>
    1242:	40 f0       	brcs	.+16     	; 0x1254 <__divsf3+0x24>
    1244:	29 f4       	brne	.+10     	; 0x1250 <__divsf3+0x20>
    1246:	5f 3f       	cpi	r21, 0xFF	; 255
    1248:	29 f0       	breq	.+10     	; 0x1254 <__divsf3+0x24>
    124a:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__fp_inf>
    124e:	51 11       	cpse	r21, r1
    1250:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_szero>
    1254:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_nan>

00001258 <__divsf3x>:
    1258:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fp_split3>
    125c:	68 f3       	brcs	.-38     	; 0x1238 <__divsf3+0x8>

0000125e <__divsf3_pse>:
    125e:	99 23       	and	r25, r25
    1260:	b1 f3       	breq	.-20     	; 0x124e <__divsf3+0x1e>
    1262:	55 23       	and	r21, r21
    1264:	91 f3       	breq	.-28     	; 0x124a <__divsf3+0x1a>
    1266:	95 1b       	sub	r25, r21
    1268:	55 0b       	sbc	r21, r21
    126a:	bb 27       	eor	r27, r27
    126c:	aa 27       	eor	r26, r26
    126e:	62 17       	cp	r22, r18
    1270:	73 07       	cpc	r23, r19
    1272:	84 07       	cpc	r24, r20
    1274:	38 f0       	brcs	.+14     	; 0x1284 <__divsf3_pse+0x26>
    1276:	9f 5f       	subi	r25, 0xFF	; 255
    1278:	5f 4f       	sbci	r21, 0xFF	; 255
    127a:	22 0f       	add	r18, r18
    127c:	33 1f       	adc	r19, r19
    127e:	44 1f       	adc	r20, r20
    1280:	aa 1f       	adc	r26, r26
    1282:	a9 f3       	breq	.-22     	; 0x126e <__divsf3_pse+0x10>
    1284:	35 d0       	rcall	.+106    	; 0x12f0 <__divsf3_pse+0x92>
    1286:	0e 2e       	mov	r0, r30
    1288:	3a f0       	brmi	.+14     	; 0x1298 <__divsf3_pse+0x3a>
    128a:	e0 e8       	ldi	r30, 0x80	; 128
    128c:	32 d0       	rcall	.+100    	; 0x12f2 <__divsf3_pse+0x94>
    128e:	91 50       	subi	r25, 0x01	; 1
    1290:	50 40       	sbci	r21, 0x00	; 0
    1292:	e6 95       	lsr	r30
    1294:	00 1c       	adc	r0, r0
    1296:	ca f7       	brpl	.-14     	; 0x128a <__divsf3_pse+0x2c>
    1298:	2b d0       	rcall	.+86     	; 0x12f0 <__divsf3_pse+0x92>
    129a:	fe 2f       	mov	r31, r30
    129c:	29 d0       	rcall	.+82     	; 0x12f0 <__divsf3_pse+0x92>
    129e:	66 0f       	add	r22, r22
    12a0:	77 1f       	adc	r23, r23
    12a2:	88 1f       	adc	r24, r24
    12a4:	bb 1f       	adc	r27, r27
    12a6:	26 17       	cp	r18, r22
    12a8:	37 07       	cpc	r19, r23
    12aa:	48 07       	cpc	r20, r24
    12ac:	ab 07       	cpc	r26, r27
    12ae:	b0 e8       	ldi	r27, 0x80	; 128
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <__divsf3_pse+0x56>
    12b2:	bb 0b       	sbc	r27, r27
    12b4:	80 2d       	mov	r24, r0
    12b6:	bf 01       	movw	r22, r30
    12b8:	ff 27       	eor	r31, r31
    12ba:	93 58       	subi	r25, 0x83	; 131
    12bc:	5f 4f       	sbci	r21, 0xFF	; 255
    12be:	3a f0       	brmi	.+14     	; 0x12ce <__divsf3_pse+0x70>
    12c0:	9e 3f       	cpi	r25, 0xFE	; 254
    12c2:	51 05       	cpc	r21, r1
    12c4:	78 f0       	brcs	.+30     	; 0x12e4 <__divsf3_pse+0x86>
    12c6:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__fp_inf>
    12ca:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_szero>
    12ce:	5f 3f       	cpi	r21, 0xFF	; 255
    12d0:	e4 f3       	brlt	.-8      	; 0x12ca <__divsf3_pse+0x6c>
    12d2:	98 3e       	cpi	r25, 0xE8	; 232
    12d4:	d4 f3       	brlt	.-12     	; 0x12ca <__divsf3_pse+0x6c>
    12d6:	86 95       	lsr	r24
    12d8:	77 95       	ror	r23
    12da:	67 95       	ror	r22
    12dc:	b7 95       	ror	r27
    12de:	f7 95       	ror	r31
    12e0:	9f 5f       	subi	r25, 0xFF	; 255
    12e2:	c9 f7       	brne	.-14     	; 0x12d6 <__divsf3_pse+0x78>
    12e4:	88 0f       	add	r24, r24
    12e6:	91 1d       	adc	r25, r1
    12e8:	96 95       	lsr	r25
    12ea:	87 95       	ror	r24
    12ec:	97 f9       	bld	r25, 7
    12ee:	08 95       	ret
    12f0:	e1 e0       	ldi	r30, 0x01	; 1
    12f2:	66 0f       	add	r22, r22
    12f4:	77 1f       	adc	r23, r23
    12f6:	88 1f       	adc	r24, r24
    12f8:	bb 1f       	adc	r27, r27
    12fa:	62 17       	cp	r22, r18
    12fc:	73 07       	cpc	r23, r19
    12fe:	84 07       	cpc	r24, r20
    1300:	ba 07       	cpc	r27, r26
    1302:	20 f0       	brcs	.+8      	; 0x130c <__divsf3_pse+0xae>
    1304:	62 1b       	sub	r22, r18
    1306:	73 0b       	sbc	r23, r19
    1308:	84 0b       	sbc	r24, r20
    130a:	ba 0b       	sbc	r27, r26
    130c:	ee 1f       	adc	r30, r30
    130e:	88 f7       	brcc	.-30     	; 0x12f2 <__divsf3_pse+0x94>
    1310:	e0 95       	com	r30
    1312:	08 95       	ret

00001314 <__fixunssfsi>:
    1314:	0e 94 36 0a 	call	0x146c	; 0x146c <__fp_splitA>
    1318:	88 f0       	brcs	.+34     	; 0x133c <__fixunssfsi+0x28>
    131a:	9f 57       	subi	r25, 0x7F	; 127
    131c:	98 f0       	brcs	.+38     	; 0x1344 <__fixunssfsi+0x30>
    131e:	b9 2f       	mov	r27, r25
    1320:	99 27       	eor	r25, r25
    1322:	b7 51       	subi	r27, 0x17	; 23
    1324:	b0 f0       	brcs	.+44     	; 0x1352 <__fixunssfsi+0x3e>
    1326:	e1 f0       	breq	.+56     	; 0x1360 <__fixunssfsi+0x4c>
    1328:	66 0f       	add	r22, r22
    132a:	77 1f       	adc	r23, r23
    132c:	88 1f       	adc	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	1a f0       	brmi	.+6      	; 0x1338 <__fixunssfsi+0x24>
    1332:	ba 95       	dec	r27
    1334:	c9 f7       	brne	.-14     	; 0x1328 <__fixunssfsi+0x14>
    1336:	14 c0       	rjmp	.+40     	; 0x1360 <__fixunssfsi+0x4c>
    1338:	b1 30       	cpi	r27, 0x01	; 1
    133a:	91 f0       	breq	.+36     	; 0x1360 <__fixunssfsi+0x4c>
    133c:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fp_zero>
    1340:	b1 e0       	ldi	r27, 0x01	; 1
    1342:	08 95       	ret
    1344:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__fp_zero>
    1348:	67 2f       	mov	r22, r23
    134a:	78 2f       	mov	r23, r24
    134c:	88 27       	eor	r24, r24
    134e:	b8 5f       	subi	r27, 0xF8	; 248
    1350:	39 f0       	breq	.+14     	; 0x1360 <__fixunssfsi+0x4c>
    1352:	b9 3f       	cpi	r27, 0xF9	; 249
    1354:	cc f3       	brlt	.-14     	; 0x1348 <__fixunssfsi+0x34>
    1356:	86 95       	lsr	r24
    1358:	77 95       	ror	r23
    135a:	67 95       	ror	r22
    135c:	b3 95       	inc	r27
    135e:	d9 f7       	brne	.-10     	; 0x1356 <__fixunssfsi+0x42>
    1360:	3e f4       	brtc	.+14     	; 0x1370 <__fixunssfsi+0x5c>
    1362:	90 95       	com	r25
    1364:	80 95       	com	r24
    1366:	70 95       	com	r23
    1368:	61 95       	neg	r22
    136a:	7f 4f       	sbci	r23, 0xFF	; 255
    136c:	8f 4f       	sbci	r24, 0xFF	; 255
    136e:	9f 4f       	sbci	r25, 0xFF	; 255
    1370:	08 95       	ret

00001372 <__fp_cmp>:
    1372:	99 0f       	add	r25, r25
    1374:	00 08       	sbc	r0, r0
    1376:	55 0f       	add	r21, r21
    1378:	aa 0b       	sbc	r26, r26
    137a:	e0 e8       	ldi	r30, 0x80	; 128
    137c:	fe ef       	ldi	r31, 0xFE	; 254
    137e:	16 16       	cp	r1, r22
    1380:	17 06       	cpc	r1, r23
    1382:	e8 07       	cpc	r30, r24
    1384:	f9 07       	cpc	r31, r25
    1386:	c0 f0       	brcs	.+48     	; 0x13b8 <__fp_cmp+0x46>
    1388:	12 16       	cp	r1, r18
    138a:	13 06       	cpc	r1, r19
    138c:	e4 07       	cpc	r30, r20
    138e:	f5 07       	cpc	r31, r21
    1390:	98 f0       	brcs	.+38     	; 0x13b8 <__fp_cmp+0x46>
    1392:	62 1b       	sub	r22, r18
    1394:	73 0b       	sbc	r23, r19
    1396:	84 0b       	sbc	r24, r20
    1398:	95 0b       	sbc	r25, r21
    139a:	39 f4       	brne	.+14     	; 0x13aa <__fp_cmp+0x38>
    139c:	0a 26       	eor	r0, r26
    139e:	61 f0       	breq	.+24     	; 0x13b8 <__fp_cmp+0x46>
    13a0:	23 2b       	or	r18, r19
    13a2:	24 2b       	or	r18, r20
    13a4:	25 2b       	or	r18, r21
    13a6:	21 f4       	brne	.+8      	; 0x13b0 <__fp_cmp+0x3e>
    13a8:	08 95       	ret
    13aa:	0a 26       	eor	r0, r26
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <__fp_cmp+0x3e>
    13ae:	a1 40       	sbci	r26, 0x01	; 1
    13b0:	a6 95       	lsr	r26
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	81 1d       	adc	r24, r1
    13b6:	81 1d       	adc	r24, r1
    13b8:	08 95       	ret

000013ba <__fp_inf>:
    13ba:	97 f9       	bld	r25, 7
    13bc:	9f 67       	ori	r25, 0x7F	; 127
    13be:	80 e8       	ldi	r24, 0x80	; 128
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	08 95       	ret

000013c6 <__fp_mintl>:
    13c6:	88 23       	and	r24, r24
    13c8:	71 f4       	brne	.+28     	; 0x13e6 <__fp_mintl+0x20>
    13ca:	77 23       	and	r23, r23
    13cc:	21 f0       	breq	.+8      	; 0x13d6 <__fp_mintl+0x10>
    13ce:	98 50       	subi	r25, 0x08	; 8
    13d0:	87 2b       	or	r24, r23
    13d2:	76 2f       	mov	r23, r22
    13d4:	07 c0       	rjmp	.+14     	; 0x13e4 <__fp_mintl+0x1e>
    13d6:	66 23       	and	r22, r22
    13d8:	11 f4       	brne	.+4      	; 0x13de <__fp_mintl+0x18>
    13da:	99 27       	eor	r25, r25
    13dc:	0d c0       	rjmp	.+26     	; 0x13f8 <__fp_mintl+0x32>
    13de:	90 51       	subi	r25, 0x10	; 16
    13e0:	86 2b       	or	r24, r22
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	2a f0       	brmi	.+10     	; 0x13f2 <__fp_mintl+0x2c>
    13e8:	9a 95       	dec	r25
    13ea:	66 0f       	add	r22, r22
    13ec:	77 1f       	adc	r23, r23
    13ee:	88 1f       	adc	r24, r24
    13f0:	da f7       	brpl	.-10     	; 0x13e8 <__fp_mintl+0x22>
    13f2:	88 0f       	add	r24, r24
    13f4:	96 95       	lsr	r25
    13f6:	87 95       	ror	r24
    13f8:	97 f9       	bld	r25, 7
    13fa:	08 95       	ret

000013fc <__fp_mpack>:
    13fc:	9f 3f       	cpi	r25, 0xFF	; 255
    13fe:	31 f0       	breq	.+12     	; 0x140c <__fp_mpack_finite+0xc>

00001400 <__fp_mpack_finite>:
    1400:	91 50       	subi	r25, 0x01	; 1
    1402:	20 f4       	brcc	.+8      	; 0x140c <__fp_mpack_finite+0xc>
    1404:	87 95       	ror	r24
    1406:	77 95       	ror	r23
    1408:	67 95       	ror	r22
    140a:	b7 95       	ror	r27
    140c:	88 0f       	add	r24, r24
    140e:	91 1d       	adc	r25, r1
    1410:	96 95       	lsr	r25
    1412:	87 95       	ror	r24
    1414:	97 f9       	bld	r25, 7
    1416:	08 95       	ret

00001418 <__fp_nan>:
    1418:	9f ef       	ldi	r25, 0xFF	; 255
    141a:	80 ec       	ldi	r24, 0xC0	; 192
    141c:	08 95       	ret

0000141e <__fp_pscA>:
    141e:	00 24       	eor	r0, r0
    1420:	0a 94       	dec	r0
    1422:	16 16       	cp	r1, r22
    1424:	17 06       	cpc	r1, r23
    1426:	18 06       	cpc	r1, r24
    1428:	09 06       	cpc	r0, r25
    142a:	08 95       	ret

0000142c <__fp_pscB>:
    142c:	00 24       	eor	r0, r0
    142e:	0a 94       	dec	r0
    1430:	12 16       	cp	r1, r18
    1432:	13 06       	cpc	r1, r19
    1434:	14 06       	cpc	r1, r20
    1436:	05 06       	cpc	r0, r21
    1438:	08 95       	ret

0000143a <__fp_round>:
    143a:	09 2e       	mov	r0, r25
    143c:	03 94       	inc	r0
    143e:	00 0c       	add	r0, r0
    1440:	11 f4       	brne	.+4      	; 0x1446 <__fp_round+0xc>
    1442:	88 23       	and	r24, r24
    1444:	52 f0       	brmi	.+20     	; 0x145a <__fp_round+0x20>
    1446:	bb 0f       	add	r27, r27
    1448:	40 f4       	brcc	.+16     	; 0x145a <__fp_round+0x20>
    144a:	bf 2b       	or	r27, r31
    144c:	11 f4       	brne	.+4      	; 0x1452 <__fp_round+0x18>
    144e:	60 ff       	sbrs	r22, 0
    1450:	04 c0       	rjmp	.+8      	; 0x145a <__fp_round+0x20>
    1452:	6f 5f       	subi	r22, 0xFF	; 255
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	8f 4f       	sbci	r24, 0xFF	; 255
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	08 95       	ret

0000145c <__fp_split3>:
    145c:	57 fd       	sbrc	r21, 7
    145e:	90 58       	subi	r25, 0x80	; 128
    1460:	44 0f       	add	r20, r20
    1462:	55 1f       	adc	r21, r21
    1464:	59 f0       	breq	.+22     	; 0x147c <__fp_splitA+0x10>
    1466:	5f 3f       	cpi	r21, 0xFF	; 255
    1468:	71 f0       	breq	.+28     	; 0x1486 <__fp_splitA+0x1a>
    146a:	47 95       	ror	r20

0000146c <__fp_splitA>:
    146c:	88 0f       	add	r24, r24
    146e:	97 fb       	bst	r25, 7
    1470:	99 1f       	adc	r25, r25
    1472:	61 f0       	breq	.+24     	; 0x148c <__fp_splitA+0x20>
    1474:	9f 3f       	cpi	r25, 0xFF	; 255
    1476:	79 f0       	breq	.+30     	; 0x1496 <__fp_splitA+0x2a>
    1478:	87 95       	ror	r24
    147a:	08 95       	ret
    147c:	12 16       	cp	r1, r18
    147e:	13 06       	cpc	r1, r19
    1480:	14 06       	cpc	r1, r20
    1482:	55 1f       	adc	r21, r21
    1484:	f2 cf       	rjmp	.-28     	; 0x146a <__fp_split3+0xe>
    1486:	46 95       	lsr	r20
    1488:	f1 df       	rcall	.-30     	; 0x146c <__fp_splitA>
    148a:	08 c0       	rjmp	.+16     	; 0x149c <__fp_splitA+0x30>
    148c:	16 16       	cp	r1, r22
    148e:	17 06       	cpc	r1, r23
    1490:	18 06       	cpc	r1, r24
    1492:	99 1f       	adc	r25, r25
    1494:	f1 cf       	rjmp	.-30     	; 0x1478 <__fp_splitA+0xc>
    1496:	86 95       	lsr	r24
    1498:	71 05       	cpc	r23, r1
    149a:	61 05       	cpc	r22, r1
    149c:	08 94       	sec
    149e:	08 95       	ret

000014a0 <__fp_trunc>:
    14a0:	0e 94 36 0a 	call	0x146c	; 0x146c <__fp_splitA>
    14a4:	a0 f0       	brcs	.+40     	; 0x14ce <__fp_trunc+0x2e>
    14a6:	be e7       	ldi	r27, 0x7E	; 126
    14a8:	b9 17       	cp	r27, r25
    14aa:	88 f4       	brcc	.+34     	; 0x14ce <__fp_trunc+0x2e>
    14ac:	bb 27       	eor	r27, r27
    14ae:	9f 38       	cpi	r25, 0x8F	; 143
    14b0:	60 f4       	brcc	.+24     	; 0x14ca <__fp_trunc+0x2a>
    14b2:	16 16       	cp	r1, r22
    14b4:	b1 1d       	adc	r27, r1
    14b6:	67 2f       	mov	r22, r23
    14b8:	78 2f       	mov	r23, r24
    14ba:	88 27       	eor	r24, r24
    14bc:	98 5f       	subi	r25, 0xF8	; 248
    14be:	f7 cf       	rjmp	.-18     	; 0x14ae <__fp_trunc+0xe>
    14c0:	86 95       	lsr	r24
    14c2:	77 95       	ror	r23
    14c4:	67 95       	ror	r22
    14c6:	b1 1d       	adc	r27, r1
    14c8:	93 95       	inc	r25
    14ca:	96 39       	cpi	r25, 0x96	; 150
    14cc:	c8 f3       	brcs	.-14     	; 0x14c0 <__fp_trunc+0x20>
    14ce:	08 95       	ret

000014d0 <__fp_zero>:
    14d0:	e8 94       	clt

000014d2 <__fp_szero>:
    14d2:	bb 27       	eor	r27, r27
    14d4:	66 27       	eor	r22, r22
    14d6:	77 27       	eor	r23, r23
    14d8:	cb 01       	movw	r24, r22
    14da:	97 f9       	bld	r25, 7
    14dc:	08 95       	ret

000014de <__gesf2>:
    14de:	0e 94 b9 09 	call	0x1372	; 0x1372 <__fp_cmp>
    14e2:	08 f4       	brcc	.+2      	; 0x14e6 <__gesf2+0x8>
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	08 95       	ret

000014e8 <__mulsf3>:
    14e8:	0e 94 87 0a 	call	0x150e	; 0x150e <__mulsf3x>
    14ec:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_round>
    14f0:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fp_pscA>
    14f4:	38 f0       	brcs	.+14     	; 0x1504 <__mulsf3+0x1c>
    14f6:	0e 94 16 0a 	call	0x142c	; 0x142c <__fp_pscB>
    14fa:	20 f0       	brcs	.+8      	; 0x1504 <__mulsf3+0x1c>
    14fc:	95 23       	and	r25, r21
    14fe:	11 f0       	breq	.+4      	; 0x1504 <__mulsf3+0x1c>
    1500:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__fp_inf>
    1504:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_nan>
    1508:	11 24       	eor	r1, r1
    150a:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_szero>

0000150e <__mulsf3x>:
    150e:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fp_split3>
    1512:	70 f3       	brcs	.-36     	; 0x14f0 <__mulsf3+0x8>

00001514 <__mulsf3_pse>:
    1514:	95 9f       	mul	r25, r21
    1516:	c1 f3       	breq	.-16     	; 0x1508 <__mulsf3+0x20>
    1518:	95 0f       	add	r25, r21
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	55 1f       	adc	r21, r21
    151e:	62 9f       	mul	r22, r18
    1520:	f0 01       	movw	r30, r0
    1522:	72 9f       	mul	r23, r18
    1524:	bb 27       	eor	r27, r27
    1526:	f0 0d       	add	r31, r0
    1528:	b1 1d       	adc	r27, r1
    152a:	63 9f       	mul	r22, r19
    152c:	aa 27       	eor	r26, r26
    152e:	f0 0d       	add	r31, r0
    1530:	b1 1d       	adc	r27, r1
    1532:	aa 1f       	adc	r26, r26
    1534:	64 9f       	mul	r22, r20
    1536:	66 27       	eor	r22, r22
    1538:	b0 0d       	add	r27, r0
    153a:	a1 1d       	adc	r26, r1
    153c:	66 1f       	adc	r22, r22
    153e:	82 9f       	mul	r24, r18
    1540:	22 27       	eor	r18, r18
    1542:	b0 0d       	add	r27, r0
    1544:	a1 1d       	adc	r26, r1
    1546:	62 1f       	adc	r22, r18
    1548:	73 9f       	mul	r23, r19
    154a:	b0 0d       	add	r27, r0
    154c:	a1 1d       	adc	r26, r1
    154e:	62 1f       	adc	r22, r18
    1550:	83 9f       	mul	r24, r19
    1552:	a0 0d       	add	r26, r0
    1554:	61 1d       	adc	r22, r1
    1556:	22 1f       	adc	r18, r18
    1558:	74 9f       	mul	r23, r20
    155a:	33 27       	eor	r19, r19
    155c:	a0 0d       	add	r26, r0
    155e:	61 1d       	adc	r22, r1
    1560:	23 1f       	adc	r18, r19
    1562:	84 9f       	mul	r24, r20
    1564:	60 0d       	add	r22, r0
    1566:	21 1d       	adc	r18, r1
    1568:	82 2f       	mov	r24, r18
    156a:	76 2f       	mov	r23, r22
    156c:	6a 2f       	mov	r22, r26
    156e:	11 24       	eor	r1, r1
    1570:	9f 57       	subi	r25, 0x7F	; 127
    1572:	50 40       	sbci	r21, 0x00	; 0
    1574:	9a f0       	brmi	.+38     	; 0x159c <__mulsf3_pse+0x88>
    1576:	f1 f0       	breq	.+60     	; 0x15b4 <__mulsf3_pse+0xa0>
    1578:	88 23       	and	r24, r24
    157a:	4a f0       	brmi	.+18     	; 0x158e <__mulsf3_pse+0x7a>
    157c:	ee 0f       	add	r30, r30
    157e:	ff 1f       	adc	r31, r31
    1580:	bb 1f       	adc	r27, r27
    1582:	66 1f       	adc	r22, r22
    1584:	77 1f       	adc	r23, r23
    1586:	88 1f       	adc	r24, r24
    1588:	91 50       	subi	r25, 0x01	; 1
    158a:	50 40       	sbci	r21, 0x00	; 0
    158c:	a9 f7       	brne	.-22     	; 0x1578 <__mulsf3_pse+0x64>
    158e:	9e 3f       	cpi	r25, 0xFE	; 254
    1590:	51 05       	cpc	r21, r1
    1592:	80 f0       	brcs	.+32     	; 0x15b4 <__mulsf3_pse+0xa0>
    1594:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__fp_inf>
    1598:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_szero>
    159c:	5f 3f       	cpi	r21, 0xFF	; 255
    159e:	e4 f3       	brlt	.-8      	; 0x1598 <__mulsf3_pse+0x84>
    15a0:	98 3e       	cpi	r25, 0xE8	; 232
    15a2:	d4 f3       	brlt	.-12     	; 0x1598 <__mulsf3_pse+0x84>
    15a4:	86 95       	lsr	r24
    15a6:	77 95       	ror	r23
    15a8:	67 95       	ror	r22
    15aa:	b7 95       	ror	r27
    15ac:	f7 95       	ror	r31
    15ae:	e7 95       	ror	r30
    15b0:	9f 5f       	subi	r25, 0xFF	; 255
    15b2:	c1 f7       	brne	.-16     	; 0x15a4 <__mulsf3_pse+0x90>
    15b4:	fe 2b       	or	r31, r30
    15b6:	88 0f       	add	r24, r24
    15b8:	91 1d       	adc	r25, r1
    15ba:	96 95       	lsr	r25
    15bc:	87 95       	ror	r24
    15be:	97 f9       	bld	r25, 7
    15c0:	08 95       	ret

000015c2 <__udivmodsi4>:
    15c2:	a1 e2       	ldi	r26, 0x21	; 33
    15c4:	1a 2e       	mov	r1, r26
    15c6:	aa 1b       	sub	r26, r26
    15c8:	bb 1b       	sub	r27, r27
    15ca:	fd 01       	movw	r30, r26
    15cc:	0d c0       	rjmp	.+26     	; 0x15e8 <__udivmodsi4_ep>

000015ce <__udivmodsi4_loop>:
    15ce:	aa 1f       	adc	r26, r26
    15d0:	bb 1f       	adc	r27, r27
    15d2:	ee 1f       	adc	r30, r30
    15d4:	ff 1f       	adc	r31, r31
    15d6:	a2 17       	cp	r26, r18
    15d8:	b3 07       	cpc	r27, r19
    15da:	e4 07       	cpc	r30, r20
    15dc:	f5 07       	cpc	r31, r21
    15de:	20 f0       	brcs	.+8      	; 0x15e8 <__udivmodsi4_ep>
    15e0:	a2 1b       	sub	r26, r18
    15e2:	b3 0b       	sbc	r27, r19
    15e4:	e4 0b       	sbc	r30, r20
    15e6:	f5 0b       	sbc	r31, r21

000015e8 <__udivmodsi4_ep>:
    15e8:	66 1f       	adc	r22, r22
    15ea:	77 1f       	adc	r23, r23
    15ec:	88 1f       	adc	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	1a 94       	dec	r1
    15f2:	69 f7       	brne	.-38     	; 0x15ce <__udivmodsi4_loop>
    15f4:	60 95       	com	r22
    15f6:	70 95       	com	r23
    15f8:	80 95       	com	r24
    15fa:	90 95       	com	r25
    15fc:	9b 01       	movw	r18, r22
    15fe:	ac 01       	movw	r20, r24
    1600:	bd 01       	movw	r22, r26
    1602:	cf 01       	movw	r24, r30
    1604:	08 95       	ret

00001606 <__tablejump2__>:
    1606:	ee 0f       	add	r30, r30
    1608:	ff 1f       	adc	r31, r31
    160a:	05 90       	lpm	r0, Z+
    160c:	f4 91       	lpm	r31, Z
    160e:	e0 2d       	mov	r30, r0
    1610:	09 94       	ijmp

00001612 <_exit>:
    1612:	f8 94       	cli

00001614 <__stop_program>:
    1614:	ff cf       	rjmp	.-2      	; 0x1614 <__stop_program>
