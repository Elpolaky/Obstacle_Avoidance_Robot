
Obstacle Avoidance Robot V1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  000021fc  00002290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  0080014a  0080014a  0000237a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000237a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000023ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ddb  00000000  00000000  00002808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016ae  00000000  00000000  000075e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002643  00000000  00000000  00008c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000998  00000000  00000000  0000b2d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001205  00000000  00000000  0000bc6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000281e  00000000  00000000  0000ce71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000f68f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_1>
       8:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__vector_2>
       c:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__vector_3>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__vector_5>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__vector_9>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	51 0d       	add	r21, r1
      56:	9e 0d       	add	r25, r14
      58:	5c 0d       	add	r21, r12
      5a:	72 0d       	add	r23, r2
      5c:	67 0d       	add	r22, r7
      5e:	7d 0d       	add	r23, r13
      60:	88 0d       	add	r24, r8
      62:	93 0d       	add	r25, r3

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec ef       	ldi	r30, 0xFC	; 252
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	aa 34       	cpi	r26, 0x4A	; 74
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	21 e0       	ldi	r18, 0x01	; 1
      88:	aa e4       	ldi	r26, 0x4A	; 74
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	af 38       	cpi	r26, 0x8F	; 143
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 62 07 	call	0xec4	; 0xec4 <main>
      9a:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <TIMER_control>:
	//start_stage();
}
/*****************************************************************************************************************************/
void TIMER_control(){
	
	if(g_timerFlag == _5_SEC_FLAG){
      a2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <g_timerFlag>
      a6:	81 30       	cpi	r24, 0x01	; 1
      a8:	79 f5       	brne	.+94     	; 0x108 <TIMER_control+0x66>
		
		if (TIMER_ovf < _5_SEC ){
      aa:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <TIMER_ovf>
      ae:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <TIMER_ovf+0x1>
      b2:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <TIMER_ovf+0x2>
      b6:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <TIMER_ovf+0x3>
      ba:	89 39       	cpi	r24, 0x99	; 153
      bc:	91 05       	cpc	r25, r1
      be:	a1 05       	cpc	r26, r1
      c0:	b1 05       	cpc	r27, r1
      c2:	a4 f4       	brge	.+40     	; 0xec <TIMER_control+0x4a>
			TIMER_ovf++;
      c4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <TIMER_ovf>
      c8:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <TIMER_ovf+0x1>
      cc:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <TIMER_ovf+0x2>
      d0:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <TIMER_ovf+0x3>
      d4:	01 96       	adiw	r24, 0x01	; 1
      d6:	a1 1d       	adc	r26, r1
      d8:	b1 1d       	adc	r27, r1
      da:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <TIMER_ovf>
      de:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <TIMER_ovf+0x1>
      e2:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <TIMER_ovf+0x2>
      e6:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <TIMER_ovf+0x3>
      ea:	08 95       	ret
			}
			
			else {
			TIMER_ovf = 0 ;
      ec:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <TIMER_ovf>
      f0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <TIMER_ovf+0x1>
      f4:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <TIMER_ovf+0x2>
      f8:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <TIMER_ovf+0x3>
			g_timerFlag = 0 ;
      fc:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <g_timerFlag>
			u8_sg_delay_5_sec = DONE ;
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <u8_sg_delay_5_sec>
     106:	08 95       	ret
			}
	}
			
	else if (g_timerFlag == _2_SEC_FLAG )
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	71 f5       	brne	.+92     	; 0x168 <TIMER_control+0xc6>
	{
		
			if (TIMER_ovf < _2_SEC ){
     10c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <TIMER_ovf>
     110:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <TIMER_ovf+0x1>
     114:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <TIMER_ovf+0x2>
     118:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <TIMER_ovf+0x3>
     11c:	0a 97       	sbiw	r24, 0x0a	; 10
     11e:	a1 05       	cpc	r26, r1
     120:	b1 05       	cpc	r27, r1
     122:	a4 f4       	brge	.+40     	; 0x14c <TIMER_control+0xaa>
				TIMER_ovf++;
     124:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <TIMER_ovf>
     128:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <TIMER_ovf+0x1>
     12c:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <TIMER_ovf+0x2>
     130:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <TIMER_ovf+0x3>
     134:	01 96       	adiw	r24, 0x01	; 1
     136:	a1 1d       	adc	r26, r1
     138:	b1 1d       	adc	r27, r1
     13a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <TIMER_ovf>
     13e:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <TIMER_ovf+0x1>
     142:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <TIMER_ovf+0x2>
     146:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <TIMER_ovf+0x3>
     14a:	08 95       	ret
			}
			
			else {
				TIMER_ovf = 0 ;
     14c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <TIMER_ovf>
     150:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <TIMER_ovf+0x1>
     154:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <TIMER_ovf+0x2>
     158:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <TIMER_ovf+0x3>
				g_timerFlag = 0 ;
     15c:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <g_timerFlag>
				u8_sg_delay_2_sec = DONE ;
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <u8_sg_delay_2_sec>
     166:	08 95       	ret
			}
	}
	else if(g_timerFlag == _5_sec_flag){
     168:	83 30       	cpi	r24, 0x03	; 3
     16a:	69 f5       	brne	.+90     	; 0x1c6 <TIMER_control+0x124>
		
		if (TIMER_ovf < _5_sec ){
     16c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <TIMER_ovf>
     170:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <TIMER_ovf+0x1>
     174:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <TIMER_ovf+0x2>
     178:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <TIMER_ovf+0x3>
     17c:	4e 97       	sbiw	r24, 0x1e	; 30
     17e:	a1 05       	cpc	r26, r1
     180:	b1 05       	cpc	r27, r1
     182:	a4 f4       	brge	.+40     	; 0x1ac <TIMER_control+0x10a>
			TIMER_ovf++;
     184:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <TIMER_ovf>
     188:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <TIMER_ovf+0x1>
     18c:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <TIMER_ovf+0x2>
     190:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <TIMER_ovf+0x3>
     194:	01 96       	adiw	r24, 0x01	; 1
     196:	a1 1d       	adc	r26, r1
     198:	b1 1d       	adc	r27, r1
     19a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <TIMER_ovf>
     19e:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <TIMER_ovf+0x1>
     1a2:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <TIMER_ovf+0x2>
     1a6:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <TIMER_ovf+0x3>
     1aa:	08 95       	ret
		}
		
		else {
			TIMER_ovf = 0 ;
     1ac:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <TIMER_ovf>
     1b0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <TIMER_ovf+0x1>
     1b4:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <TIMER_ovf+0x2>
     1b8:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <TIMER_ovf+0x3>
			g_timerFlag = 0 ;
     1bc:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <g_timerFlag>
			u8_sg_delay_5_SEC = DONE ;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <u8_sg_delay_5_SEC>
     1c6:	08 95       	ret

000001c8 <app_Init>:
uint8_t button_state = HIGH;
uint8_t u8_sg_default_Rot = right;
 /*****************************************************************************************************************************/
void app_Init(void){
	//Button_INIT(button_0);
	DIO_Init();
     1c8:	0e 94 55 09 	call	0x12aa	; 0x12aa <DIO_Init>
	Ultrasonic_init_SW();
     1cc:	0e 94 39 07 	call	0xe72	; 0xe72 <Ultrasonic_init_SW>
	LCD_INIT();
     1d0:	0e 94 d4 05 	call	0xba8	; 0xba8 <LCD_INIT>
	keypad_init();
     1d4:	0e 94 9b 04 	call	0x936	; 0x936 <keypad_init>
     1d8:	08 95       	ret

000001da <start_stage>:
void start_stage (void)
{
	// initializing button and lcd

	// start stage
	LCD_GoTo(FIRST_LINE,COL_2);
     1da:	62 e0       	ldi	r22, 0x02	; 2
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
	LCD_Write_String("Set Rotation:");
     1e2:	8f e8       	ldi	r24, 0x8F	; 143
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
	LCD_GoTo(SECOND_LINE,COL_6);
     1ea:	66 e0       	ldi	r22, 0x06	; 6
     1ec:	82 e0       	ldi	r24, 0x02	; 2
     1ee:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
	LCD_Write_String("Right");
     1f2:	8d e9       	ldi	r24, 0x9D	; 157
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
	u8_sg_stageFlag++;
     1fa:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_sg_stageFlag>
     1fe:	8f 5f       	subi	r24, 0xFF	; 255
     200:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <u8_sg_stageFlag>
     204:	08 95       	ret

00000206 <stop_stage>:
	
}
/*****************************************************************************************************************************/
int stop_stage (void)
{
	keypad_get_value(&g_stop);
     206:	82 e6       	ldi	r24, 0x62	; 98
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 a6 04 	call	0x94c	; 0x94c <keypad_get_value>
	if (g_stop==3)
     20e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_stop>
     212:	83 30       	cpi	r24, 0x03	; 3
     214:	41 f4       	brne	.+16     	; 0x226 <stop_stage+0x20>
	{
		u8_g_stop_flag = 1;
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <u8_g_stop_flag>
		g_start_stop=STOP;
     21c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <g_start_stop>
		g_stop=17;
     220:	81 e1       	ldi	r24, 0x11	; 17
     222:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <g_stop>
	}
	

}
     226:	08 95       	ret

00000228 <CAR_set_rotation_dir>:
/*****************************************************************************************************************************/
void CAR_set_rotation_dir(){
	
	uint8_t flag=0;
	static uint8_t flag_Wait=0;
	if (flag_Wait==0)
     228:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <flag_Wait.2110>
     22c:	81 11       	cpse	r24, r1
     22e:	0c c0       	rjmp	.+24     	; 0x248 <CAR_set_rotation_dir+0x20>
	{
		g_timerFlag = _5_sec_flag ;
     230:	83 e0       	ldi	r24, 0x03	; 3
     232:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <g_timerFlag>
		TIMER_2_INT();
     236:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <TIMER_2_INT>
		TIMER_2_SetCallBack(TIMER_control);
     23a:	81 e5       	ldi	r24, 0x51	; 81
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <TIMER_2_SetCallBack>
		flag_Wait=1;
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <flag_Wait.2110>
	}	
	if (u8_sg_delay_5_SEC == NOT_DONE)
     248:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u8_sg_delay_5_SEC>
     24c:	81 11       	cpse	r24, r1
     24e:	35 c0       	rjmp	.+106    	; 0x2ba <CAR_set_rotation_dir+0x92>
	{
		Button_read(button_0,&button_state);
     250:	61 e6       	ldi	r22, 0x61	; 97
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	84 e1       	ldi	r24, 0x14	; 20
     256:	0e 94 39 04 	call	0x872	; 0x872 <Button_read>
		while(button_state == LOW && u8_sg_delay_5_sec == NOT_DONE )  
     25a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <button_state>
     25e:	81 11       	cpse	r24, r1
     260:	41 c0       	rjmp	.+130    	; 0x2e4 <CAR_set_rotation_dir+0xbc>
     262:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8_sg_delay_5_sec>
     266:	81 11       	cpse	r24, r1
     268:	3d c0       	rjmp	.+122    	; 0x2e4 <CAR_set_rotation_dir+0xbc>
		{
			Button_read(button_0,&button_state);
     26a:	61 e6       	ldi	r22, 0x61	; 97
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	84 e1       	ldi	r24, 0x14	; 20
     270:	0e 94 39 04 	call	0x872	; 0x872 <Button_read>
		flag_Wait=1;
	}	
	if (u8_sg_delay_5_SEC == NOT_DONE)
	{
		Button_read(button_0,&button_state);
		while(button_state == LOW && u8_sg_delay_5_sec == NOT_DONE )  
     274:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <button_state>
     278:	81 11       	cpse	r24, r1
     27a:	2f c0       	rjmp	.+94     	; 0x2da <CAR_set_rotation_dir+0xb2>
     27c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8_sg_delay_5_sec>
     280:	88 23       	and	r24, r24
     282:	99 f3       	breq	.-26     	; 0x26a <CAR_set_rotation_dir+0x42>
     284:	2a c0       	rjmp	.+84     	; 0x2da <CAR_set_rotation_dir+0xb2>
		}
		if (flag==1)
		{
			if (u8_sg_default_Rot== right)
			{
				LCD_GoTo(SECOND_LINE,COL_6);
     286:	66 e0       	ldi	r22, 0x06	; 6
     288:	82 e0       	ldi	r24, 0x02	; 2
     28a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
				LCD_Write_String("Left ");
     28e:	83 ea       	ldi	r24, 0xA3	; 163
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
				u8_sg_default_Rot=left;
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     29c:	08 95       	ret
			}
			else if (u8_sg_default_Rot==left)
     29e:	81 30       	cpi	r24, 0x01	; 1
     2a0:	09 f5       	brne	.+66     	; 0x2e4 <CAR_set_rotation_dir+0xbc>
			{
				LCD_GoTo(SECOND_LINE,COL_6);
     2a2:	66 e0       	ldi	r22, 0x06	; 6
     2a4:	82 e0       	ldi	r24, 0x02	; 2
     2a6:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
				LCD_Write_String("Right");
     2aa:	8d e9       	ldi	r24, 0x9D	; 157
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
				u8_sg_default_Rot=right;
     2b2:	82 e0       	ldi	r24, 0x02	; 2
     2b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     2b8:	08 95       	ret
		//{
			//Button_read(button_0,&button_state);
		//}
	}
	
	else if (u8_sg_delay_5_SEC == DONE)
     2ba:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u8_sg_delay_5_SEC>
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	89 f4       	brne	.+34     	; 0x2e4 <CAR_set_rotation_dir+0xbc>
	{
		u8_sg_delay_5_SEC = NOT_DONE;
     2c2:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <u8_sg_delay_5_SEC>
		u8_sg_stageFlag ++ ;
     2c6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_sg_stageFlag>
     2ca:	8f 5f       	subi	r24, 0xFF	; 255
     2cc:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <u8_sg_stageFlag>
		TIMER_2_stop();
     2d0:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <TIMER_2_stop>
		flag=0;
		flag_Wait= 0;
     2d4:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <flag_Wait.2110>
		
	}

}
     2d8:	08 95       	ret
			Button_read(button_0,&button_state);
			flag=1;
		}
		if (flag==1)
		{
			if (u8_sg_default_Rot== right)
     2da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	f1 f6       	brne	.-68     	; 0x29e <CAR_set_rotation_dir+0x76>
     2e2:	d1 cf       	rjmp	.-94     	; 0x286 <CAR_set_rotation_dir+0x5e>
     2e4:	08 95       	ret

000002e6 <CAR_wait_2_sec>:

/*****************************************************************************************************************************/
void CAR_wait_2_sec(){
	
	static uint8_t flag_Wait=0;
	if (flag_Wait==0)
     2e6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <flag_Wait.2116>
     2ea:	81 11       	cpse	r24, r1
     2ec:	2d c0       	rjmp	.+90     	; 0x348 <CAR_wait_2_sec+0x62>
	{
		TIMER_2_INT();
     2ee:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <TIMER_2_INT>
		TIMER_2_SetCallBack(TIMER_control);
     2f2:	81 e5       	ldi	r24, 0x51	; 81
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <TIMER_2_SetCallBack>
		g_timerFlag = _2_SEC_FLAG ;
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <g_timerFlag>
		flag_Wait=1;
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <flag_Wait.2116>
		LCD_Clear();
     306:	0e 94 72 06 	call	0xce4	; 0xce4 <LCD_Clear>
		LCD_GoTo(1,0);
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
		LCD_Write_String((uint8_t*)"The Default");
     312:	89 ea       	ldi	r24, 0xA9	; 169
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
		LCD_GoTo(2,0);
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
		if (u8_sg_default_Rot==right)
     322:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     326:	82 30       	cpi	r24, 0x02	; 2
     328:	29 f4       	brne	.+10     	; 0x334 <CAR_wait_2_sec+0x4e>
		{
			LCD_Write_String((uint8_t*)"Rotation Right ");
     32a:	85 eb       	ldi	r24, 0xB5	; 181
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
     332:	04 c0       	rjmp	.+8      	; 0x33c <CAR_wait_2_sec+0x56>
		}
		else
		{
			LCD_Write_String((uint8_t*)"Rotation Left");
     334:	85 ec       	ldi	r24, 0xC5	; 197
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
		}
		TIMER_2_INT();
     33c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <TIMER_2_INT>
		TIMER_2_SetCallBack(TIMER_control);
     340:	81 e5       	ldi	r24, 0x51	; 81
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <TIMER_2_SetCallBack>
	}
	
	if (u8_sg_delay_2_sec == DONE)
     348:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <u8_sg_delay_2_sec>
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	59 f4       	brne	.+22     	; 0x366 <CAR_wait_2_sec+0x80>
	{
		TIMER_2_stop();
     350:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <TIMER_2_stop>
		u8_sg_delay_2_sec = NOT_DONE;
     354:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <u8_sg_delay_2_sec>
		u8_sg_stageFlag ++ ;
     358:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_sg_stageFlag>
     35c:	8f 5f       	subi	r24, 0xFF	; 255
     35e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <u8_sg_stageFlag>
		flag_Wait=0;
     362:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <flag_Wait.2116>
     366:	08 95       	ret

00000368 <CAR_no_obstacle_less_70>:
/*****************************************************************************************************************************/

void CAR_no_obstacle_less_70()
{
	//set timer flag to start the timer
	g_timerFlag = _5_SEC_FLAG ;
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <g_timerFlag>
	
	//	
	static uint8_t flag_Wait=0;
	if (flag_Wait==0)
     36e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
     372:	81 11       	cpse	r24, r1
     374:	0b c0       	rjmp	.+22     	; 0x38c <CAR_no_obstacle_less_70+0x24>
	{
		TIMER_2_INT();
     376:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <TIMER_2_INT>
		TIMER_2_SetCallBack(TIMER_control);
     37a:	81 e5       	ldi	r24, 0x51	; 81
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <TIMER_2_SetCallBack>
		flag_Wait=1;
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
		LCD_Clear();
     388:	0e 94 72 06 	call	0xce4	; 0xce4 <LCD_Clear>
	}
	
	while(u8_sg_distance>70 && (u8_g_stop_flag==0))
     38c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <u8_sg_distance>
     390:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     394:	87 34       	cpi	r24, 0x47	; 71
     396:	91 05       	cpc	r25, r1
     398:	08 f4       	brcc	.+2      	; 0x39c <CAR_no_obstacle_less_70+0x34>
     39a:	81 c0       	rjmp	.+258    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     39c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8_g_stop_flag>
     3a0:	81 11       	cpse	r24, r1
     3a2:	7d c0       	rjmp	.+250    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
	{
		Ultrasonic_GetDistance(&u8_sg_distance);
     3a4:	89 e7       	ldi	r24, 0x79	; 121
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <Ultrasonic_GetDistance>
		if(u8_sg_delay_5_sec == NOT_DONE)
     3ac:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8_sg_delay_5_sec>
     3b0:	81 11       	cpse	r24, r1
     3b2:	31 c0       	rjmp	.+98     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		{
			//Ultrasonic_GetDistance(&u8_sg_distance);
			if (u8_pwm_flag == _30_)
     3b4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <u8_pwm_flag>
     3b8:	81 30       	cpi	r24, 0x01	; 1
     3ba:	41 f4       	brne	.+16     	; 0x3cc <CAR_no_obstacle_less_70+0x64>
			{
				Car_Moving_FWD();
     3bc:	0e 94 8a 06 	call	0xd14	; 0xd14 <Car_Moving_FWD>
				PWM_duty(30);
     3c0:	8e e1       	ldi	r24, 0x1E	; 30
     3c2:	0e 94 94 0b 	call	0x1728	; 0x1728 <PWM_duty>
				u8_pwm_flag = _50_ ;
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <u8_pwm_flag>
			}
			
			
			LCD_GoTo(FIRST_LINE,COL_0);	
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_String("Speed:30% Dir: F");
     3d4:	83 ed       	ldi	r24, 0xD3	; 211
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
			LCD_GoTo(SECOND_LINE,COL_0);
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_String("Dist.: ");
     3e4:	84 ee       	ldi	r24, 0xE4	; 228
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
			LCD_GoTo(SECOND_LINE,COL_9);
     3ec:	69 e0       	ldi	r22, 0x09	; 9
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_Number(u8_sg_distance);
     3f4:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <u8_sg_distance>
     3f8:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 1e 06 	call	0xc3c	; 0xc3c <LCD_Write_Number>
			LCD_GoTo(SECOND_LINE,COL_11);
     404:	6b e0       	ldi	r22, 0x0B	; 11
     406:	82 e0       	ldi	r24, 0x02	; 2
     408:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_String("cm");
     40c:	8c ee       	ldi	r24, 0xEC	; 236
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
     414:	36 c0       	rjmp	.+108    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
		}
	 else if(u8_sg_delay_5_sec == DONE)
     416:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <u8_sg_delay_5_sec>
     41a:	81 30       	cpi	r24, 0x01	; 1
     41c:	91 f5       	brne	.+100    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
		{
			if (u8_pwm_flag == _50_)
     41e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <u8_pwm_flag>
     422:	82 30       	cpi	r24, 0x02	; 2
     424:	41 f4       	brne	.+16     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			{
				Car_Moving_FWD();
     426:	0e 94 8a 06 	call	0xd14	; 0xd14 <Car_Moving_FWD>
				PWM_duty(50);
     42a:	82 e3       	ldi	r24, 0x32	; 50
     42c:	0e 94 94 0b 	call	0x1728	; 0x1728 <PWM_duty>
				u8_pwm_flag = _30_ ;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <u8_pwm_flag>
			}
			
			//LCD_Clear();
			LCD_GoTo(FIRST_LINE,COL_0);
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_String("Speed:50% Dir: F");
     43e:	8f ee       	ldi	r24, 0xEF	; 239
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
			LCD_GoTo(SECOND_LINE,COL_0);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	82 e0       	ldi	r24, 0x02	; 2
     44a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_String("Dist.: ");
     44e:	84 ee       	ldi	r24, 0xE4	; 228
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
			LCD_GoTo(SECOND_LINE,COL_9);
     456:	69 e0       	ldi	r22, 0x09	; 9
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_Number(u8_sg_distance);
     45e:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <u8_sg_distance>
     462:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 1e 06 	call	0xc3c	; 0xc3c <LCD_Write_Number>
			LCD_GoTo(SECOND_LINE,COL_11);
     46e:	6b e0       	ldi	r22, 0x0B	; 11
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_String("cm");
     476:	8c ee       	ldi	r24, 0xEC	; 236
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
			TIMER_2_stop();
     47e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <TIMER_2_stop>
		}
		stop_stage();
     482:	0e 94 03 01 	call	0x206	; 0x206 <stop_stage>
		TIMER_2_SetCallBack(TIMER_control);
		flag_Wait=1;
		LCD_Clear();
	}
	
	while(u8_sg_distance>70 && (u8_g_stop_flag==0))
     486:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <u8_sg_distance>
     48a:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     48e:	87 34       	cpi	r24, 0x47	; 71
     490:	91 05       	cpc	r25, r1
     492:	28 f0       	brcs	.+10     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     494:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8_g_stop_flag>
     498:	88 23       	and	r24, r24
     49a:	09 f4       	brne	.+2      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     49c:	83 cf       	rjmp	.-250    	; 0x3a4 <CAR_no_obstacle_less_70+0x3c>
			LCD_Write_String("cm");
			TIMER_2_stop();
		}
		stop_stage();
	}
	u8_sg_delay_5_sec = NOT_DONE ;
     49e:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <u8_sg_delay_5_sec>
	flag_Wait=0;
     4a2:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
	u8_pwm_flag = _30_;
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <u8_pwm_flag>
     4ac:	08 95       	ret

000004ae <CAR_no_obstacle_between_30_and_70>:

/*****************************************************************************************************************************/

void CAR_no_obstacle_between_30_and_70()
{
	LCD_Clear();
     4ae:	0e 94 72 06 	call	0xce4	; 0xce4 <LCD_Clear>
	while((u8_sg_distance>30) && (u8_sg_distance<=70)&& (u8_g_stop_flag==0))
     4b2:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <u8_sg_distance>
     4b6:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     4ba:	4f 97       	sbiw	r24, 0x1f	; 31
     4bc:	88 97       	sbiw	r24, 0x28	; 40
     4be:	08 f0       	brcs	.+2      	; 0x4c2 <CAR_no_obstacle_between_30_and_70+0x14>
     4c0:	48 c0       	rjmp	.+144    	; 0x552 <CAR_no_obstacle_between_30_and_70+0xa4>
     4c2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8_g_stop_flag>
     4c6:	81 11       	cpse	r24, r1
     4c8:	44 c0       	rjmp	.+136    	; 0x552 <CAR_no_obstacle_between_30_and_70+0xa4>
	{
		LCD_GoTo(FIRST_LINE,COL_0);
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
		LCD_Write_String("Speed:30% Dir: F");
     4d2:	83 ed       	ldi	r24, 0xD3	; 211
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
		LCD_GoTo(SECOND_LINE,COL_0);
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
		LCD_Write_String("Dist.: ");
     4e2:	84 ee       	ldi	r24, 0xE4	; 228
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
		LCD_GoTo(SECOND_LINE,COL_9);
     4ea:	69 e0       	ldi	r22, 0x09	; 9
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
		LCD_Write_Number(u8_sg_distance);
     4f2:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <u8_sg_distance>
     4f6:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 1e 06 	call	0xc3c	; 0xc3c <LCD_Write_Number>
		LCD_GoTo(SECOND_LINE,COL_11);
     502:	6b e0       	ldi	r22, 0x0B	; 11
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
		LCD_Write_String("cm");
     50a:	8c ee       	ldi	r24, 0xEC	; 236
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
		if (u8_pwm_flag == _30_)
     512:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <u8_pwm_flag>
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	41 f4       	brne	.+16     	; 0x52a <CAR_no_obstacle_between_30_and_70+0x7c>
		{
			Car_Moving_FWD();
     51a:	0e 94 8a 06 	call	0xd14	; 0xd14 <Car_Moving_FWD>
			PWM_duty(30);
     51e:	8e e1       	ldi	r24, 0x1E	; 30
     520:	0e 94 94 0b 	call	0x1728	; 0x1728 <PWM_duty>
			u8_pwm_flag = _50_ ;
     524:	82 e0       	ldi	r24, 0x02	; 2
     526:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <u8_pwm_flag>
		}
		Car_Moving_FWD();
     52a:	0e 94 8a 06 	call	0xd14	; 0xd14 <Car_Moving_FWD>
		Ultrasonic_GetDistance(&u8_sg_distance);
     52e:	89 e7       	ldi	r24, 0x79	; 121
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	0e 94 3e 07 	call	0xe7c	; 0xe7c <Ultrasonic_GetDistance>
		stop_stage();
     536:	0e 94 03 01 	call	0x206	; 0x206 <stop_stage>
/*****************************************************************************************************************************/

void CAR_no_obstacle_between_30_and_70()
{
	LCD_Clear();
	while((u8_sg_distance>30) && (u8_sg_distance<=70)&& (u8_g_stop_flag==0))
     53a:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <u8_sg_distance>
     53e:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     542:	4f 97       	sbiw	r24, 0x1f	; 31
     544:	88 97       	sbiw	r24, 0x28	; 40
     546:	28 f4       	brcc	.+10     	; 0x552 <CAR_no_obstacle_between_30_and_70+0xa4>
     548:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8_g_stop_flag>
     54c:	88 23       	and	r24, r24
     54e:	09 f4       	brne	.+2      	; 0x552 <CAR_no_obstacle_between_30_and_70+0xa4>
     550:	bc cf       	rjmp	.-136    	; 0x4ca <CAR_no_obstacle_between_30_and_70+0x1c>
		}
		Car_Moving_FWD();
		Ultrasonic_GetDistance(&u8_sg_distance);
		stop_stage();
	}
	u8_pwm_flag = _30_ ;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <u8_pwm_flag>
     558:	08 95       	ret

0000055a <CAR_no_obstacle_between_20_and_30>:
/*****************************************************************************************************************************/

void CAR_no_obstacle_between_20_and_30()
{
	
	Car_Stop();
     55a:	0e 94 ac 06 	call	0xd58	; 0xd58 <Car_Stop>
	LCD_Clear();
     55e:	0e 94 72 06 	call	0xce4	; 0xce4 <LCD_Clear>
	while((u8_sg_distance>20) && (u8_sg_distance<=30)&& (u8_g_stop_flag==0))
     562:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <u8_sg_distance>
     566:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     56a:	45 97       	sbiw	r24, 0x15	; 21
     56c:	0a 97       	sbiw	r24, 0x0a	; 10
     56e:	08 f0       	brcs	.+2      	; 0x572 <CAR_no_obstacle_between_20_and_30+0x18>
     570:	89 c0       	rjmp	.+274    	; 0x684 <CAR_no_obstacle_between_20_and_30+0x12a>
     572:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8_g_stop_flag>
     576:	81 11       	cpse	r24, r1
     578:	85 c0       	rjmp	.+266    	; 0x684 <CAR_no_obstacle_between_20_and_30+0x12a>
	{
		
		
		if(u8_sg_default_Rot == right )
     57a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     57e:	82 30       	cpi	r24, 0x02	; 2
     580:	b9 f5       	brne	.+110    	; 0x5f0 <CAR_no_obstacle_between_20_and_30+0x96>
		{
			Ultrasonic_GetDistance(&u8_sg_distance);
     582:	89 e7       	ldi	r24, 0x79	; 121
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	0e 94 3e 07 	call	0xe7c	; 0xe7c <Ultrasonic_GetDistance>
			LCD_GoTo(FIRST_LINE,COL_0);
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_String("Speed:30% Dir: R");
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
			
			LCD_GoTo(SECOND_LINE,COL_0);
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_String("Dist.: ");
     5a2:	84 ee       	ldi	r24, 0xE4	; 228
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
			LCD_GoTo(SECOND_LINE,COL_9);
     5aa:	69 e0       	ldi	r22, 0x09	; 9
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_Number(u8_sg_distance);
     5b2:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <u8_sg_distance>
     5b6:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 1e 06 	call	0xc3c	; 0xc3c <LCD_Write_Number>
			LCD_GoTo(SECOND_LINE,COL_11);
     5c2:	6b e0       	ldi	r22, 0x0B	; 11
     5c4:	82 e0       	ldi	r24, 0x02	; 2
     5c6:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_String("cm");
     5ca:	8c ee       	ldi	r24, 0xEC	; 236
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
			
			if (u8_pwm_flag == _30_)
     5d2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <u8_pwm_flag>
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	41 f4       	brne	.+16     	; 0x5ea <CAR_no_obstacle_between_20_and_30+0x90>
			{
				PWM_duty(30);
     5da:	8e e1       	ldi	r24, 0x1E	; 30
     5dc:	0e 94 94 0b 	call	0x1728	; 0x1728 <PWM_duty>
				rotate_90degree_Right();
     5e0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <rotate_90degree_Right>
				u8_pwm_flag = _50_ ;
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <u8_pwm_flag>
			}
			Car_Stop();
     5ea:	0e 94 ac 06 	call	0xd58	; 0xd58 <Car_Stop>
     5ee:	38 c0       	rjmp	.+112    	; 0x660 <CAR_no_obstacle_between_20_and_30+0x106>
		
		}
		else if(u8_sg_default_Rot == left )
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	b1 f5       	brne	.+108    	; 0x660 <CAR_no_obstacle_between_20_and_30+0x106>
		{
			Ultrasonic_GetDistance(&u8_sg_distance);
     5f4:	89 e7       	ldi	r24, 0x79	; 121
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <Ultrasonic_GetDistance>
			
			//LCD_Clear();
			LCD_GoTo(FIRST_LINE,COL_0);
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_String("Speed:30% Dir: L");
     604:	81 e1       	ldi	r24, 0x11	; 17
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
			LCD_GoTo(FIRST_LINE,COL_0);
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_String("Dist.: ");
     614:	84 ee       	ldi	r24, 0xE4	; 228
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
			LCD_GoTo(SECOND_LINE,COL_9);
     61c:	69 e0       	ldi	r22, 0x09	; 9
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_Number(u8_sg_distance);
     624:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <u8_sg_distance>
     628:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 1e 06 	call	0xc3c	; 0xc3c <LCD_Write_Number>
			LCD_GoTo(SECOND_LINE,COL_11);
     634:	6b e0       	ldi	r22, 0x0B	; 11
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
			LCD_Write_String("cm");
     63c:	8c ee       	ldi	r24, 0xEC	; 236
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
			if (u8_pwm_flag == _30_)
     644:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <u8_pwm_flag>
     648:	81 30       	cpi	r24, 0x01	; 1
     64a:	41 f4       	brne	.+16     	; 0x65c <CAR_no_obstacle_between_20_and_30+0x102>
			{
				
				PWM_duty(30);
     64c:	8e e1       	ldi	r24, 0x1E	; 30
     64e:	0e 94 94 0b 	call	0x1728	; 0x1728 <PWM_duty>
				rotate_90degree_Left();
     652:	0e 94 69 04 	call	0x8d2	; 0x8d2 <rotate_90degree_Left>
				u8_pwm_flag = _50_ ;
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <u8_pwm_flag>
			}
			Car_Stop();
     65c:	0e 94 ac 06 	call	0xd58	; 0xd58 <Car_Stop>
		}
		else
		{
			// DO NOTHING
		}
		Ultrasonic_GetDistance(&u8_sg_distance);
     660:	89 e7       	ldi	r24, 0x79	; 121
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	0e 94 3e 07 	call	0xe7c	; 0xe7c <Ultrasonic_GetDistance>
		stop_stage();
     668:	0e 94 03 01 	call	0x206	; 0x206 <stop_stage>
void CAR_no_obstacle_between_20_and_30()
{
	
	Car_Stop();
	LCD_Clear();
	while((u8_sg_distance>20) && (u8_sg_distance<=30)&& (u8_g_stop_flag==0))
     66c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <u8_sg_distance>
     670:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     674:	45 97       	sbiw	r24, 0x15	; 21
     676:	0a 97       	sbiw	r24, 0x0a	; 10
     678:	28 f4       	brcc	.+10     	; 0x684 <CAR_no_obstacle_between_20_and_30+0x12a>
     67a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8_g_stop_flag>
     67e:	88 23       	and	r24, r24
     680:	09 f4       	brne	.+2      	; 0x684 <CAR_no_obstacle_between_20_and_30+0x12a>
     682:	7b cf       	rjmp	.-266    	; 0x57a <CAR_no_obstacle_between_20_and_30+0x20>
		Ultrasonic_GetDistance(&u8_sg_distance);
		stop_stage();
	} //  end of while
	
	
	u8_pwm_flag = _30_ ;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <u8_pwm_flag>
     68a:	08 95       	ret

0000068c <CAR_no_obstacle_less_20>:

}

/*****************************************************************************************************************************/
void CAR_no_obstacle_less_20()
{
     68c:	cf 93       	push	r28
		Car_Stop();
     68e:	0e 94 ac 06 	call	0xd58	; 0xd58 <Car_Stop>
		LCD_Clear();
     692:	0e 94 72 06 	call	0xce4	; 0xce4 <LCD_Clear>
		LCD_GoTo(FIRST_LINE,COL_0);
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
		LCD_Write_String("Speed:30% Dir: S");
     69e:	82 e2       	ldi	r24, 0x22	; 34
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
		LCD_GoTo(SECOND_LINE,COL_0);
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	82 e0       	ldi	r24, 0x02	; 2
     6aa:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
		LCD_Write_String("Dist.: ");
     6ae:	84 ee       	ldi	r24, 0xE4	; 228
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
		LCD_GoTo(SECOND_LINE,COL_9);
     6b6:	69 e0       	ldi	r22, 0x09	; 9
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
		LCD_Write_Number(u8_sg_distance);
     6be:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <u8_sg_distance>
     6c2:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 1e 06 	call	0xc3c	; 0xc3c <LCD_Write_Number>
		LCD_GoTo(SECOND_LINE,COL_11);
     6ce:	6b e0       	ldi	r22, 0x0B	; 11
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
		LCD_Write_String("cm");
     6d6:	8c ee       	ldi	r24, 0xEC	; 236
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6de:	2f ef       	ldi	r18, 0xFF	; 255
     6e0:	89 e6       	ldi	r24, 0x69	; 105
     6e2:	98 e1       	ldi	r25, 0x18	; 24
     6e4:	21 50       	subi	r18, 0x01	; 1
     6e6:	80 40       	sbci	r24, 0x00	; 0
     6e8:	90 40       	sbci	r25, 0x00	; 0
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <CAR_no_obstacle_less_20+0x58>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <CAR_no_obstacle_less_20+0x62>
     6ee:	00 00       	nop
		_delay_ms(1000);
		LCD_Clear();
     6f0:	0e 94 72 06 	call	0xce4	; 0xce4 <LCD_Clear>
	while(u8_sg_distance<=20 && (u8_g_stop_flag==0))
     6f4:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <u8_sg_distance>
     6f8:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     6fc:	45 97       	sbiw	r24, 0x15	; 21
     6fe:	08 f0       	brcs	.+2      	; 0x702 <CAR_no_obstacle_less_20+0x76>
     700:	44 c0       	rjmp	.+136    	; 0x78a <CAR_no_obstacle_less_20+0xfe>
     702:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8_g_stop_flag>
     706:	81 11       	cpse	r24, r1
     708:	40 c0       	rjmp	.+128    	; 0x78a <CAR_no_obstacle_less_20+0xfe>
		
		if (u8_pwm_flag == _30_)
		{
			Car_Moving_BWD();
			PWM_duty(30);
			u8_pwm_flag = _50_ ;
     70a:	c2 e0       	ldi	r28, 0x02	; 2
		_delay_ms(1000);
		LCD_Clear();
	while(u8_sg_distance<=20 && (u8_g_stop_flag==0))
	{
		
		if (u8_pwm_flag == _30_)
     70c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <u8_pwm_flag>
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	39 f4       	brne	.+14     	; 0x722 <CAR_no_obstacle_less_20+0x96>
		{
			Car_Moving_BWD();
     714:	0e 94 9b 06 	call	0xd36	; 0xd36 <Car_Moving_BWD>
			PWM_duty(30);
     718:	8e e1       	ldi	r24, 0x1E	; 30
     71a:	0e 94 94 0b 	call	0x1728	; 0x1728 <PWM_duty>
			u8_pwm_flag = _50_ ;
     71e:	c0 93 63 00 	sts	0x0063, r28	; 0x800063 <u8_pwm_flag>
		}
		LCD_GoTo(FIRST_LINE,COL_0);
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
		LCD_Write_String("Speed:30% Dir: B");
     72a:	83 e3       	ldi	r24, 0x33	; 51
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
		LCD_GoTo(SECOND_LINE,COL_0);
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	8c 2f       	mov	r24, r28
     736:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
		LCD_Write_String("Dist.: ");
     73a:	84 ee       	ldi	r24, 0xE4	; 228
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
		LCD_GoTo(SECOND_LINE,COL_9);
     742:	69 e0       	ldi	r22, 0x09	; 9
     744:	8c 2f       	mov	r24, r28
     746:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
		LCD_Write_Number(u8_sg_distance);
     74a:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <u8_sg_distance>
     74e:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 1e 06 	call	0xc3c	; 0xc3c <LCD_Write_Number>
		LCD_GoTo(SECOND_LINE,COL_11);
     75a:	6b e0       	ldi	r22, 0x0B	; 11
     75c:	8c 2f       	mov	r24, r28
     75e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <LCD_GoTo>
		LCD_Write_String("cm");
     762:	8c ee       	ldi	r24, 0xEC	; 236
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Write_String>
		
		Ultrasonic_GetDistance(&u8_sg_distance);
     76a:	89 e7       	ldi	r24, 0x79	; 121
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <Ultrasonic_GetDistance>
		stop_stage();
     772:	0e 94 03 01 	call	0x206	; 0x206 <stop_stage>
		LCD_Write_Number(u8_sg_distance);
		LCD_GoTo(SECOND_LINE,COL_11);
		LCD_Write_String("cm");
		_delay_ms(1000);
		LCD_Clear();
	while(u8_sg_distance<=20 && (u8_g_stop_flag==0))
     776:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <u8_sg_distance>
     77a:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     77e:	45 97       	sbiw	r24, 0x15	; 21
     780:	20 f4       	brcc	.+8      	; 0x78a <CAR_no_obstacle_less_20+0xfe>
     782:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8_g_stop_flag>
     786:	88 23       	and	r24, r24
     788:	09 f2       	breq	.-126    	; 0x70c <CAR_no_obstacle_less_20+0x80>
		
		Ultrasonic_GetDistance(&u8_sg_distance);
		stop_stage();
	}
	
	u8_pwm_flag = _30_ ;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <u8_pwm_flag>
}
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <app_Start>:
			 {
				 LCD_Clear();
				 Car_Stop();
				 PWM_duty(0);
				 TIMER_2_stop();
				 u8_sg_default_Rot = right ;
     794:	c2 e0       	ldi	r28, 0x02	; 2
void app_Start(void){
 

 while(1)
	{
			 if (g_start_stop==START)
     796:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <g_start_stop>
     79a:	81 11       	cpse	r24, r1
     79c:	51 c0       	rjmp	.+162    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
			 {
				 keypad_get_value(&g_start_stop);
     79e:	84 e6       	ldi	r24, 0x64	; 100
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 a6 04 	call	0x94c	; 0x94c <keypad_get_value>
				 if (u8_sg_stageFlag == START_PAGE )
     7a6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_sg_stageFlag>
     7aa:	81 11       	cpse	r24, r1
     7ac:	0b c0       	rjmp	.+22     	; 0x7c4 <app_Start+0x30>
				 {
					 start_stage();
     7ae:	0e 94 ed 00 	call	0x1da	; 0x1da <start_stage>
				 else if ( u8_sg_stageFlag == WAIT_2SEC)
				 {
					 
					 CAR_wait_2_sec();
				 }
				 while(u8_sg_stageFlag == MOVING && u8_g_stop_flag==0)
     7b2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_sg_stageFlag>
     7b6:	83 30       	cpi	r24, 0x03	; 3
     7b8:	71 f7       	brne	.-36     	; 0x796 <app_Start+0x2>
     7ba:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8_g_stop_flag>
     7be:	88 23       	and	r24, r24
     7c0:	79 f0       	breq	.+30     	; 0x7e0 <app_Start+0x4c>
     7c2:	e9 cf       	rjmp	.-46     	; 0x796 <app_Start+0x2>
				 keypad_get_value(&g_start_stop);
				 if (u8_sg_stageFlag == START_PAGE )
				 {
					 start_stage();
				 }
				 else if (u8_sg_stageFlag == SET_ROTATION )
     7c4:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_sg_stageFlag>
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	19 f4       	brne	.+6      	; 0x7d2 <app_Start+0x3e>
				 {
					 CAR_set_rotation_dir();
     7cc:	0e 94 14 01 	call	0x228	; 0x228 <CAR_set_rotation_dir>
     7d0:	f0 cf       	rjmp	.-32     	; 0x7b2 <app_Start+0x1e>
				 }
				 else if ( u8_sg_stageFlag == WAIT_2SEC)
     7d2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_sg_stageFlag>
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	61 f7       	brne	.-40     	; 0x7b2 <app_Start+0x1e>
				 {
					 
					 CAR_wait_2_sec();
     7da:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CAR_wait_2_sec>
     7de:	e9 cf       	rjmp	.-46     	; 0x7b2 <app_Start+0x1e>
				 }
				 while(u8_sg_stageFlag == MOVING && u8_g_stop_flag==0)
				 {
					 Ultrasonic_GetDistance(&u8_sg_distance);
     7e0:	89 e7       	ldi	r24, 0x79	; 121
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <Ultrasonic_GetDistance>
					 if ( u8_sg_distance > 70)
     7e8:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <u8_sg_distance>
     7ec:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <u8_sg_distance+0x1>
     7f0:	87 34       	cpi	r24, 0x47	; 71
     7f2:	91 05       	cpc	r25, r1
     7f4:	18 f0       	brcs	.+6      	; 0x7fc <app_Start+0x68>
					 {
						 CAR_no_obstacle_less_70();
     7f6:	0e 94 b4 01 	call	0x368	; 0x368 <CAR_no_obstacle_less_70>
     7fa:	16 c0       	rjmp	.+44     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
					 }
					 else if ((u8_sg_distance>30) && (u8_sg_distance<=70) )
     7fc:	9c 01       	movw	r18, r24
     7fe:	2f 51       	subi	r18, 0x1F	; 31
     800:	31 09       	sbc	r19, r1
     802:	28 32       	cpi	r18, 0x28	; 40
     804:	31 05       	cpc	r19, r1
     806:	18 f4       	brcc	.+6      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
					 {
						 CAR_no_obstacle_between_30_and_70();
     808:	0e 94 57 02 	call	0x4ae	; 0x4ae <CAR_no_obstacle_between_30_and_70>
     80c:	0d c0       	rjmp	.+26     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
						 
					 }
					 else if  ((u8_sg_distance>20) && (u8_sg_distance<=30) )
     80e:	9c 01       	movw	r18, r24
     810:	25 51       	subi	r18, 0x15	; 21
     812:	31 09       	sbc	r19, r1
     814:	2a 30       	cpi	r18, 0x0A	; 10
     816:	31 05       	cpc	r19, r1
     818:	18 f4       	brcc	.+6      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
					 {
						 
						 CAR_no_obstacle_between_20_and_30();
     81a:	0e 94 ad 02 	call	0x55a	; 0x55a <CAR_no_obstacle_between_20_and_30>
     81e:	04 c0       	rjmp	.+8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
						 
					 }
					 else if  (u8_sg_distance<=20)
     820:	45 97       	sbiw	r24, 0x15	; 21
     822:	10 f4       	brcc	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
					 {
						 
						 CAR_no_obstacle_less_20();
     824:	0e 94 46 03 	call	0x68c	; 0x68c <CAR_no_obstacle_less_20>
					 }
					       stop_stage();
     828:	0e 94 03 01 	call	0x206	; 0x206 <stop_stage>
				 else if ( u8_sg_stageFlag == WAIT_2SEC)
				 {
					 
					 CAR_wait_2_sec();
				 }
				 while(u8_sg_stageFlag == MOVING && u8_g_stop_flag==0)
     82c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_sg_stageFlag>
     830:	83 30       	cpi	r24, 0x03	; 3
     832:	09 f0       	breq	.+2      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     834:	b0 cf       	rjmp	.-160    	; 0x796 <app_Start+0x2>
     836:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8_g_stop_flag>
     83a:	88 23       	and	r24, r24
     83c:	89 f2       	breq	.-94     	; 0x7e0 <app_Start+0x4c>
     83e:	ab cf       	rjmp	.-170    	; 0x796 <app_Start+0x2>
						 CAR_no_obstacle_less_20();
					 }
					       stop_stage();
				 }
			 }
			 else if (u8_g_stop_flag==1)
     840:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <u8_g_stop_flag>
     844:	81 30       	cpi	r24, 0x01	; 1
     846:	81 f4       	brne	.+32     	; 0x868 <__stack+0x9>
			 {
				 LCD_Clear();
     848:	0e 94 72 06 	call	0xce4	; 0xce4 <LCD_Clear>
				 Car_Stop();
     84c:	0e 94 ac 06 	call	0xd58	; 0xd58 <Car_Stop>
				 PWM_duty(0);
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0e 94 94 0b 	call	0x1728	; 0x1728 <PWM_duty>
				 TIMER_2_stop();
     856:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <TIMER_2_stop>
				 u8_sg_default_Rot = right ;
     85a:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
				  u8_g_stop_flag=0;
     85e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <u8_g_stop_flag>
				 u8_sg_stageFlag =START_PAGE;
     862:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <u8_sg_stageFlag>
     866:	97 cf       	rjmp	.-210    	; 0x796 <app_Start+0x2>
			 }
				   
			 else keypad_get_value(&g_start_stop);
     868:	84 e6       	ldi	r24, 0x64	; 100
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 a6 04 	call	0x94c	; 0x94c <keypad_get_value>
     870:	92 cf       	rjmp	.-220    	; 0x796 <app_Start+0x2>

00000872 <Button_read>:
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
     872:	88 32       	cpi	r24, 0x28	; 40
     874:	20 f4       	brcc	.+8      	; 0x87e <Button_read+0xc>
	{
		return INVALID_BUTTON_PIN_NUMBER;
	}
	else
	{
		DIO_READPIN(PIN,VOLT);
     876:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_READPIN>
		return VALID_BUTTON;
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_BUTTON_PORT;
     87e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		DIO_READPIN(PIN,VOLT);
		return VALID_BUTTON;
	}
}
     880:	08 95       	ret

00000882 <rotate_90degree_calculation>:
	//circle_circumference= PI*distance_between_wheels;
	//(1.2) the circumference of the wheel.
	//wheel_circumference= PI*wheel_diameter;
	//(1.3) total rotations needed for one circular path.
	//rotation_per_circle = circle_circumference/wheel_circumference;
	rotation_per_circle = ((PI*distance_between_wheels)/(PI*wheel_diameter));
     882:	86 e7       	ldi	r24, 0x76	; 118
     884:	9b e0       	ldi	r25, 0x0B	; 11
     886:	af e3       	ldi	r26, 0x3F	; 63
     888:	b0 e4       	ldi	r27, 0x40	; 64
     88a:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <rotation_per_circle>
     88e:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <rotation_per_circle+0x1>
     892:	a0 93 85 01 	sts	0x0185, r26	; 0x800185 <rotation_per_circle+0x2>
     896:	b0 93 86 01 	sts	0x0186, r27	; 0x800186 <rotation_per_circle+0x3>
	//2- Calculate the rotation of each wheel to rotate 90 degrees:
	//(2.1)  rotation per wheel= rotation_per_circle/0.25
	//(2.2) time needed for car to turn 90 degree= (rotation per wheel/maximum speed percentage)*60) in sec
	time_rotation_state= ((rotation_per_circle*0.25)/(max_speed*0.1))*60;
     89a:	84 e5       	ldi	r24, 0x54	; 84
     89c:	9e ec       	ldi	r25, 0xCE	; 206
     89e:	ae e6       	ldi	r26, 0x6E	; 110
     8a0:	b0 e4       	ldi	r27, 0x40	; 64
     8a2:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <time_rotation_state>
     8a6:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <time_rotation_state+0x1>
     8aa:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <time_rotation_state+0x2>
     8ae:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <time_rotation_state+0x3>
     8b2:	08 95       	ret

000008b4 <rotate_90degree_Right>:
/*******************************************************************************************************************************************/
/**DESCRIPTION:-
this function makes the car rotate 90 degree to the right */
void rotate_90degree_Right (void)
{
	rotate_90degree_calculation();
     8b4:	0e 94 41 04 	call	0x882	; 0x882 <rotate_90degree_calculation>
	//mode_ovf = time_rotation_state/ 0.000256 ;  // 3.75 seconds for simulation test
	// Rotation state
	Car_Rotating_Right();
     8b8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <Car_Rotating_Right>
	// set speed of rotation
	//pwm(30);
	TIMER_2_DELAY_MS(time_rotation_state);
     8bc:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <time_rotation_state>
     8c0:	70 91 80 01 	lds	r23, 0x0180	; 0x800180 <time_rotation_state+0x1>
     8c4:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <time_rotation_state+0x2>
     8c8:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <time_rotation_state+0x3>
     8cc:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <TIMER_2_DELAY_MS>
     8d0:	08 95       	ret

000008d2 <rotate_90degree_Left>:
/*******************************************************************************************************************************************/
/**DESCRIPTION:-
this function makes the car rotate 90 degree to the Left */
void rotate_90degree_Left (void)
{
	rotate_90degree_calculation();
     8d2:	0e 94 41 04 	call	0x882	; 0x882 <rotate_90degree_calculation>
	//mode_ovf = time_rotation_state/ 0.000256 ;  // 3.75 seconds for simulation test
	// Rotation state
	Car_Rotating_Left();
     8d6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Car_Rotating_Left>
	// set speed of rotation
	//pwm(30);
		TIMER_2_DELAY_MS(time_rotation_state);
     8da:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <time_rotation_state>
     8de:	70 91 80 01 	lds	r23, 0x0180	; 0x800180 <time_rotation_state+0x1>
     8e2:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <time_rotation_state+0x2>
     8e6:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <time_rotation_state+0x3>
     8ea:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <TIMER_2_DELAY_MS>
     8ee:	08 95       	ret

000008f0 <Icu_TimerOVF>:
	EXI_SetCallBack(EXInt,fptr);
}

static void Icu_TimerOVF(void)
{
	count_OVF++;
     8f0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <count_OVF>
     8f4:	8f 5f       	subi	r24, 0xFF	; 255
     8f6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <count_OVF>
     8fa:	08 95       	ret

000008fc <Icu_Enable>:
static void Icu_TimerOVF(void);
static uint8_t count_OVF=0;

void Icu_Enable(EN_int_t EXInt )
{
	EXI_Enable(EXInt);
     8fc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <EXI_Enable>
	TCNT1=0;
     900:	1d bc       	out	0x2d, r1	; 45
     902:	1c bc       	out	0x2c, r1	; 44
	Timer1_OVF_SetCallBack(Icu_TimerOVF);
     904:	88 e7       	ldi	r24, 0x78	; 120
     906:	94 e0       	ldi	r25, 0x04	; 4
     908:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <Timer1_OVF_SetCallBack>
	Timer1_OVF_InterruptEnable();
     90c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <Timer1_OVF_InterruptEnable>
	Timer1_Init(NORMAL_MODE,PRECALER_8);
     910:	62 e0       	ldi	r22, 0x02	; 2
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	0e 94 b7 0c 	call	0x196e	; 0x196e <Timer1_Init>
     918:	08 95       	ret

0000091a <Icu_Disable>:
}
void Icu_Disable(EN_int_t EXInt)
{
	EXI_Disable(EXInt);
     91a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <EXI_Disable>
	count_OVF=0;
     91e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <count_OVF>
	TIMER1_STOP();
     922:	8e b5       	in	r24, 0x2e	; 46
     924:	88 7f       	andi	r24, 0xF8	; 248
     926:	8e bd       	out	0x2e, r24	; 46
     928:	08 95       	ret

0000092a <Icu_Trigger>:
}
void Icu_Trigger(EN_int_t EXInt,EN_trig trigger)
{
	EXI_Trigger(EXInt,trigger);
     92a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <EXI_Trigger>
     92e:	08 95       	ret

00000930 <Icu_SetCallback>:
}

void Icu_SetCallback(EN_int_t EXInt,void(*fptr)(void))
{
	EXI_SetCallBack(EXInt,fptr);
     930:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <EXI_SetCallBack>
     934:	08 95       	ret

00000936 <keypad_init>:
void keypad_init (void)
{ 

		
		// rows initialization value
		DIO_write(row1,keypad_port,LOW);
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	63 e4       	ldi	r22, 0x43	; 67
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <DIO_write>
		DIO_write(row2,keypad_port,LOW);
     940:	40 e0       	ldi	r20, 0x00	; 0
     942:	63 e4       	ldi	r22, 0x43	; 67
     944:	83 e0       	ldi	r24, 0x03	; 3
     946:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <DIO_write>
     94a:	08 95       	ret

0000094c <keypad_get_value>:
//********************************************************************************************************
/*Description:
This function is used to get the value of the pressed key
*/
keypad_get_value  (uint8_t *value)
{
     94c:	7f 92       	push	r7
     94e:	8f 92       	push	r8
     950:	9f 92       	push	r9
     952:	af 92       	push	r10
     954:	bf 92       	push	r11
     956:	cf 92       	push	r12
     958:	df 92       	push	r13
     95a:	ef 92       	push	r14
     95c:	ff 92       	push	r15
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	1f 92       	push	r1
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	5c 01       	movw	r10, r24
	uint8_t row_c=0,column_c=0;
	uint8_t row_pin,column_pin;
	uint8_t state=0;
     96e:	19 82       	std	Y+1, r1	; 0x01
     970:	0f 2e       	mov	r0, r31
     972:	f5 e6       	ldi	r31, 0x65	; 101
     974:	cf 2e       	mov	r12, r31
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	df 2e       	mov	r13, r31
     97a:	f0 2d       	mov	r31, r0
     97c:	02 e0       	ldi	r16, 0x02	; 2
	uint8_t key_unpressed=0;
     97e:	91 2c       	mov	r9, r1
		DIO_write(row1,keypad_port,LOW);
		DIO_write(row2,keypad_port,LOW);
		//DIO_write(row3,keypad_port,LOW);
		//DIO_write(row4,keypad_port,LOW);
		row_pin=row_c+2;
		DIO_write(row_pin,keypad_port,HIGH);
     980:	88 24       	eor	r8, r8
     982:	83 94       	inc	r8
			DIO_read(column_pin,keypad_port,&state);
			if (state==HIGH) {
			if (counter==0) 
			{
				*value=button_value[row_c][column_c];
				counter=1;
     984:	78 2c       	mov	r7, r8
	uint8_t state=0;
	uint8_t key_unpressed=0;
	for (row_c=0;row_c<keypad_rows_num;row_c++)
	{
		
		DIO_write(row1,keypad_port,LOW);
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	63 e4       	ldi	r22, 0x43	; 67
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <DIO_write>
		DIO_write(row2,keypad_port,LOW);
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	63 e4       	ldi	r22, 0x43	; 67
     994:	83 e0       	ldi	r24, 0x03	; 3
     996:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <DIO_write>
		//DIO_write(row3,keypad_port,LOW);
		//DIO_write(row4,keypad_port,LOW);
		row_pin=row_c+2;
		DIO_write(row_pin,keypad_port,HIGH);
     99a:	48 2d       	mov	r20, r8
     99c:	63 e4       	ldi	r22, 0x43	; 67
     99e:	80 2f       	mov	r24, r16
     9a0:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <DIO_write>
     9a4:	76 01       	movw	r14, r12
     9a6:	15 e0       	ldi	r17, 0x05	; 5
		
		
		for(column_c=0;column_c<keypad_columns_num;column_c++)
		{
			column_pin=column_c+5;
			DIO_read(column_pin,keypad_port,&state);
     9a8:	ae 01       	movw	r20, r28
     9aa:	4f 5f       	subi	r20, 0xFF	; 255
     9ac:	5f 4f       	sbci	r21, 0xFF	; 255
     9ae:	63 e4       	ldi	r22, 0x43	; 67
     9b0:	81 2f       	mov	r24, r17
     9b2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <DIO_read>
			if (state==HIGH) {
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	59 f4       	brne	.+22     	; 0x9d2 <keypad_get_value+0x86>
			if (counter==0) 
     9bc:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <counter>
     9c0:	81 11       	cpse	r24, r1
     9c2:	0a c0       	rjmp	.+20     	; 0x9d8 <keypad_get_value+0x8c>
			{
				*value=button_value[row_c][column_c];
     9c4:	f7 01       	movw	r30, r14
     9c6:	80 81       	ld	r24, Z
     9c8:	f5 01       	movw	r30, r10
     9ca:	80 83       	st	Z, r24
				counter=1;
     9cc:	70 92 57 01 	sts	0x0157, r7	; 0x800157 <counter>
     9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <keypad_get_value+0x8c>
			}
			}
			else if (state==LOW) key_unpressed++;	
     9d2:	81 11       	cpse	r24, r1
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <keypad_get_value+0x8c>
     9d6:	93 94       	inc	r9
     9d8:	1f 5f       	subi	r17, 0xFF	; 255
     9da:	ff ef       	ldi	r31, 0xFF	; 255
     9dc:	ef 1a       	sub	r14, r31
     9de:	ff 0a       	sbc	r15, r31
		//DIO_write(row4,keypad_port,LOW);
		row_pin=row_c+2;
		DIO_write(row_pin,keypad_port,HIGH);
		
		
		for(column_c=0;column_c<keypad_columns_num;column_c++)
     9e0:	17 30       	cpi	r17, 0x07	; 7
     9e2:	11 f7       	brne	.-60     	; 0x9a8 <keypad_get_value+0x5c>
				counter=1;
			}
			}
			else if (state==LOW) key_unpressed++;	
		}
		if (key_unpressed==keypad_rows_num) counter=0;
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	98 12       	cpse	r9, r24
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <keypad_get_value+0xa2>
     9ea:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <counter>
     9ee:	0f 5f       	subi	r16, 0xFF	; 255
     9f0:	e2 e0       	ldi	r30, 0x02	; 2
     9f2:	ce 0e       	add	r12, r30
     9f4:	d1 1c       	adc	r13, r1
{
	uint8_t row_c=0,column_c=0;
	uint8_t row_pin,column_pin;
	uint8_t state=0;
	uint8_t key_unpressed=0;
	for (row_c=0;row_c<keypad_rows_num;row_c++)
     9f6:	04 30       	cpi	r16, 0x04	; 4
     9f8:	31 f6       	brne	.-116    	; 0x986 <keypad_get_value+0x3a>
			}
			else if (state==LOW) key_unpressed++;	
		}
		if (key_unpressed==keypad_rows_num) counter=0;
		}
		}
     9fa:	0f 90       	pop	r0
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
     a0e:	af 90       	pop	r10
     a10:	9f 90       	pop	r9
     a12:	8f 90       	pop	r8
     a14:	7f 90       	pop	r7
     a16:	08 95       	ret

00000a18 <LCD_WRITE_COMMAND>:
/*************************************************************************************************
                                     4_bit_mode
*****************************************************************************************************/

void LCD_WRITE_COMMAND(uint8_t a_COMMAND)
{
     a18:	cf 93       	push	r28
     a1a:	c8 2f       	mov	r28, r24
	DIO_WRITEPIN(RS,LOW);
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(RW,LOW);
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	82 e0       	ldi	r24, 0x02	; 2
     a28:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	/**for the 4 most significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_COMMAND,4));
     a2c:	c4 fb       	bst	r28, 4
     a2e:	66 27       	eor	r22, r22
     a30:	60 f9       	bld	r22, 0
     a32:	84 e0       	ldi	r24, 0x04	; 4
     a34:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_COMMAND,5));
     a38:	c5 fb       	bst	r28, 5
     a3a:	66 27       	eor	r22, r22
     a3c:	60 f9       	bld	r22, 0
     a3e:	85 e0       	ldi	r24, 0x05	; 5
     a40:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_COMMAND,6));
     a44:	c6 fb       	bst	r28, 6
     a46:	66 27       	eor	r22, r22
     a48:	60 f9       	bld	r22, 0
     a4a:	86 e0       	ldi	r24, 0x06	; 6
     a4c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_COMMAND,7));
     a50:	6c 2f       	mov	r22, r28
     a52:	66 1f       	adc	r22, r22
     a54:	66 27       	eor	r22, r22
     a56:	66 1f       	adc	r22, r22
     a58:	87 e0       	ldi	r24, 0x07	; 7
     a5a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     a66:	89 ef       	ldi	r24, 0xF9	; 249
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <LCD_WRITE_COMMAND+0x52>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <LCD_WRITE_COMMAND+0x58>
     a70:	00 00       	nop
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     a7a:	89 ef       	ldi	r24, 0xF9	; 249
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	f1 f7       	brne	.-4      	; 0xa7e <LCD_WRITE_COMMAND+0x66>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <LCD_WRITE_COMMAND+0x6c>
     a84:	00 00       	nop
	_delay_ms(1);
	/**for the 4 least significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_COMMAND,0));
     a86:	6c 2f       	mov	r22, r28
     a88:	61 70       	andi	r22, 0x01	; 1
     a8a:	84 e0       	ldi	r24, 0x04	; 4
     a8c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_COMMAND,1));
     a90:	c1 fb       	bst	r28, 1
     a92:	66 27       	eor	r22, r22
     a94:	60 f9       	bld	r22, 0
     a96:	85 e0       	ldi	r24, 0x05	; 5
     a98:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_COMMAND,2));
     a9c:	c2 fb       	bst	r28, 2
     a9e:	66 27       	eor	r22, r22
     aa0:	60 f9       	bld	r22, 0
     aa2:	86 e0       	ldi	r24, 0x06	; 6
     aa4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_COMMAND,3));
     aa8:	c3 fb       	bst	r28, 3
     aaa:	66 27       	eor	r22, r22
     aac:	60 f9       	bld	r22, 0
     aae:	87 e0       	ldi	r24, 0x07	; 7
     ab0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     ab4:	61 e0       	ldi	r22, 0x01	; 1
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     abc:	89 ef       	ldi	r24, 0xF9	; 249
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <LCD_WRITE_COMMAND+0xa8>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <LCD_WRITE_COMMAND+0xae>
     ac6:	00 00       	nop
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     ad0:	89 ef       	ldi	r24, 0xF9	; 249
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <LCD_WRITE_COMMAND+0xbc>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <LCD_WRITE_COMMAND+0xc2>
     ada:	00 00       	nop
	_delay_ms(1);
}
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <LCD_WRITE_DATA>:

/*************************************************************************************************************************/

void LCD_WRITE_DATA(uint8_t a_DATA)
{
     ae0:	cf 93       	push	r28
     ae2:	c8 2f       	mov	r28, r24
	DIO_WRITEPIN(RS,HIGH);
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(RW,LOW);
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	/**for the 4 most significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_DATA,4));
     af4:	c4 fb       	bst	r28, 4
     af6:	66 27       	eor	r22, r22
     af8:	60 f9       	bld	r22, 0
     afa:	84 e0       	ldi	r24, 0x04	; 4
     afc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_DATA,5));
     b00:	c5 fb       	bst	r28, 5
     b02:	66 27       	eor	r22, r22
     b04:	60 f9       	bld	r22, 0
     b06:	85 e0       	ldi	r24, 0x05	; 5
     b08:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_DATA,6));
     b0c:	c6 fb       	bst	r28, 6
     b0e:	66 27       	eor	r22, r22
     b10:	60 f9       	bld	r22, 0
     b12:	86 e0       	ldi	r24, 0x06	; 6
     b14:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_DATA,7));
     b18:	6c 2f       	mov	r22, r28
     b1a:	66 1f       	adc	r22, r22
     b1c:	66 27       	eor	r22, r22
     b1e:	66 1f       	adc	r22, r22
     b20:	87 e0       	ldi	r24, 0x07	; 7
     b22:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     b26:	61 e0       	ldi	r22, 0x01	; 1
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     b2e:	89 ef       	ldi	r24, 0xF9	; 249
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	f1 f7       	brne	.-4      	; 0xb32 <LCD_WRITE_DATA+0x52>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <LCD_WRITE_DATA+0x58>
     b38:	00 00       	nop
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	83 e0       	ldi	r24, 0x03	; 3
     b3e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     b42:	89 ef       	ldi	r24, 0xF9	; 249
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	f1 f7       	brne	.-4      	; 0xb46 <LCD_WRITE_DATA+0x66>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <LCD_WRITE_DATA+0x6c>
     b4c:	00 00       	nop
	_delay_ms(1);
	/**for the 4 least significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_DATA,0));
     b4e:	6c 2f       	mov	r22, r28
     b50:	61 70       	andi	r22, 0x01	; 1
     b52:	84 e0       	ldi	r24, 0x04	; 4
     b54:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_DATA,1));
     b58:	c1 fb       	bst	r28, 1
     b5a:	66 27       	eor	r22, r22
     b5c:	60 f9       	bld	r22, 0
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_DATA,2));
     b64:	c2 fb       	bst	r28, 2
     b66:	66 27       	eor	r22, r22
     b68:	60 f9       	bld	r22, 0
     b6a:	86 e0       	ldi	r24, 0x06	; 6
     b6c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_DATA,3));
     b70:	c3 fb       	bst	r28, 3
     b72:	66 27       	eor	r22, r22
     b74:	60 f9       	bld	r22, 0
     b76:	87 e0       	ldi	r24, 0x07	; 7
     b78:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     b84:	89 ef       	ldi	r24, 0xF9	; 249
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <LCD_WRITE_DATA+0xa8>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <LCD_WRITE_DATA+0xae>
     b8e:	00 00       	nop
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	83 e0       	ldi	r24, 0x03	; 3
     b94:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     b98:	89 ef       	ldi	r24, 0xF9	; 249
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <LCD_WRITE_DATA+0xbc>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <LCD_WRITE_DATA+0xc2>
     ba2:	00 00       	nop
	_delay_ms(1);
}
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <LCD_INIT>:
     ba8:	83 ed       	ldi	r24, 0xD3	; 211
     baa:	90 e3       	ldi	r25, 0x30	; 48
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	f1 f7       	brne	.-4      	; 0xbac <LCD_INIT+0x4>
     bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <LCD_INIT+0xa>
     bb2:	00 00       	nop

void LCD_INIT(void)
{

	_delay_ms(50);
	LCD_WRITE_COMMAND(0x02);
     bb4:	82 e0       	ldi	r24, 0x02	; 2
     bb6:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_WRITE_COMMAND>
     bba:	89 ef       	ldi	r24, 0xF9	; 249
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <LCD_INIT+0x16>
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <LCD_INIT+0x1c>
     bc4:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0X28);                     /* THIS IS FOR FUNCTION SET IN THE DATA SHEET  4BIT MODE, 2LINE, 5*7*/
     bc6:	88 e2       	ldi	r24, 0x28	; 40
     bc8:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_WRITE_COMMAND>
     bcc:	89 ef       	ldi	r24, 0xF9	; 249
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <LCD_INIT+0x28>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <LCD_INIT+0x2e>
     bd6:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0x0c);                     /*SCREEN ON, CURSOR OFF*/
     bd8:	8c e0       	ldi	r24, 0x0C	; 12
     bda:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_WRITE_COMMAND>
     bde:	89 ef       	ldi	r24, 0xF9	; 249
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	f1 f7       	brne	.-4      	; 0xbe2 <LCD_INIT+0x3a>
     be6:	00 c0       	rjmp	.+0      	; 0xbe8 <LCD_INIT+0x40>
     be8:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0X01);                      /*CLEAR SCREEN*/
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_WRITE_COMMAND>
     bf0:	83 ef       	ldi	r24, 0xF3	; 243
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <LCD_INIT+0x4c>
     bf8:	00 c0       	rjmp	.+0      	; 0xbfa <LCD_INIT+0x52>
     bfa:	00 00       	nop
	_delay_ms(2);
	LCD_WRITE_COMMAND(0X06);
     bfc:	86 e0       	ldi	r24, 0x06	; 6
     bfe:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_WRITE_COMMAND>
     c02:	89 ef       	ldi	r24, 0xF9	; 249
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <LCD_INIT+0x5e>
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <LCD_INIT+0x64>
     c0c:	00 00       	nop
     c0e:	08 95       	ret

00000c10 <LCD_Write_String>:
********************************************************************************************************/
/**DESCRIPTION:-
  This Function Takes a Full String and Displays It
  **/
void LCD_Write_String(uint8_t*a_String)
{
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	fc 01       	movw	r30, r24
	uint8_t L_Index_i=0;
	while(a_String[L_Index_i])
     c18:	80 81       	ld	r24, Z
     c1a:	88 23       	and	r24, r24
     c1c:	59 f0       	breq	.+22     	; 0xc34 <LCD_Write_String+0x24>
     c1e:	8f 01       	movw	r16, r30
     c20:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_WRITE_DATA(a_String[L_Index_i]);
     c22:	0e 94 70 05 	call	0xae0	; 0xae0 <LCD_WRITE_DATA>
		L_Index_i++;
     c26:	cf 5f       	subi	r28, 0xFF	; 255
  This Function Takes a Full String and Displays It
  **/
void LCD_Write_String(uint8_t*a_String)
{
	uint8_t L_Index_i=0;
	while(a_String[L_Index_i])
     c28:	f8 01       	movw	r30, r16
     c2a:	ec 0f       	add	r30, r28
     c2c:	f1 1d       	adc	r31, r1
     c2e:	80 81       	ld	r24, Z
     c30:	81 11       	cpse	r24, r1
     c32:	f7 cf       	rjmp	.-18     	; 0xc22 <LCD_Write_String+0x12>
	{
		LCD_WRITE_DATA(a_String[L_Index_i]);
		L_Index_i++;
	}
}
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	08 95       	ret

00000c3c <LCD_Write_Number>:
/********************************************************************************************/
/**DESCRIPTION:-
  This Function Takes a Number and Displays IT
  **/
void LCD_Write_Number(uint32_t a_number)
{
     c3c:	8f 92       	push	r8
     c3e:	9f 92       	push	r9
     c40:	af 92       	push	r10
     c42:	bf 92       	push	r11
     c44:	ef 92       	push	r14
     c46:	ff 92       	push	r15
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	60 97       	sbiw	r28, 0x10	; 16
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
	uint8_t L_Remainder=0,L_Arr[16],L_Index_i=0,L_Index_j;
	if (a_number==0)
     c5e:	61 15       	cp	r22, r1
     c60:	71 05       	cpc	r23, r1
     c62:	81 05       	cpc	r24, r1
     c64:	91 05       	cpc	r25, r1
     c66:	21 f4       	brne	.+8      	; 0xc70 <LCD_Write_Number+0x34>
	{
		LCD_WRITE_DATA('0');
     c68:	80 e3       	ldi	r24, 0x30	; 48
     c6a:	0e 94 70 05 	call	0xae0	; 0xae0 <LCD_WRITE_DATA>
     c6e:	2a c0       	rjmp	.+84     	; 0xcc4 <LCD_Write_Number+0x88>
     c70:	10 e0       	ldi	r17, 0x00	; 0
	}
	while(a_number>0)
	{
	L_Remainder=a_number%10;
	L_Arr[L_Index_i]=L_Remainder+'0';    /*tp display the number it self, when we add the zero asci it shits the number to it's asci*/
     c72:	0f 2e       	mov	r0, r31
     c74:	fa e0       	ldi	r31, 0x0A	; 10
     c76:	8f 2e       	mov	r8, r31
     c78:	91 2c       	mov	r9, r1
     c7a:	a1 2c       	mov	r10, r1
     c7c:	b1 2c       	mov	r11, r1
     c7e:	f0 2d       	mov	r31, r0
     c80:	ee 24       	eor	r14, r14
     c82:	e3 94       	inc	r14
     c84:	f1 2c       	mov	r15, r1
     c86:	ec 0e       	add	r14, r28
     c88:	fd 1e       	adc	r15, r29
     c8a:	e1 0e       	add	r14, r17
     c8c:	f1 1c       	adc	r15, r1
     c8e:	a5 01       	movw	r20, r10
     c90:	94 01       	movw	r18, r8
     c92:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__udivmodsi4>
     c96:	60 5d       	subi	r22, 0xD0	; 208
     c98:	f7 01       	movw	r30, r14
     c9a:	60 83       	st	Z, r22
	L_Index_i++;
     c9c:	1f 5f       	subi	r17, 0xFF	; 255
	a_number/=10;
     c9e:	62 2f       	mov	r22, r18
     ca0:	73 2f       	mov	r23, r19
     ca2:	84 2f       	mov	r24, r20
     ca4:	95 2f       	mov	r25, r21
	uint8_t L_Remainder=0,L_Arr[16],L_Index_i=0,L_Index_j;
	if (a_number==0)
	{
		LCD_WRITE_DATA('0');
	}
	while(a_number>0)
     ca6:	61 15       	cp	r22, r1
     ca8:	71 05       	cpc	r23, r1
     caa:	81 05       	cpc	r24, r1
     cac:	91 05       	cpc	r25, r1
     cae:	41 f7       	brne	.-48     	; 0xc80 <LCD_Write_Number+0x44>
	L_Arr[L_Index_i]=L_Remainder+'0';    /*tp display the number it self, when we add the zero asci it shits the number to it's asci*/
	L_Index_i++;
	a_number/=10;
	}
	
	for (L_Index_j=L_Index_i;L_Index_j>0;L_Index_j--)    /*to display the array of number */
     cb0:	11 23       	and	r17, r17
     cb2:	41 f0       	breq	.+16     	; 0xcc4 <LCD_Write_Number+0x88>
	{
		LCD_WRITE_DATA(L_Arr[L_Index_j-1]);
     cb4:	fe 01       	movw	r30, r28
     cb6:	e1 0f       	add	r30, r17
     cb8:	f1 1d       	adc	r31, r1
     cba:	80 81       	ld	r24, Z
     cbc:	0e 94 70 05 	call	0xae0	; 0xae0 <LCD_WRITE_DATA>
	L_Arr[L_Index_i]=L_Remainder+'0';    /*tp display the number it self, when we add the zero asci it shits the number to it's asci*/
	L_Index_i++;
	a_number/=10;
	}
	
	for (L_Index_j=L_Index_i;L_Index_j>0;L_Index_j--)    /*to display the array of number */
     cc0:	11 50       	subi	r17, 0x01	; 1
     cc2:	c1 f7       	brne	.-16     	; 0xcb4 <LCD_Write_Number+0x78>
	{
		LCD_WRITE_DATA(L_Arr[L_Index_j-1]);
	}
}
     cc4:	60 96       	adiw	r28, 0x10	; 16
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	bf 90       	pop	r11
     cdc:	af 90       	pop	r10
     cde:	9f 90       	pop	r9
     ce0:	8f 90       	pop	r8
     ce2:	08 95       	ret

00000ce4 <LCD_Clear>:
/**DESCRIPTION:-
  This Function Clears The LCD
  **/
void LCD_Clear(void)
{
	LCD_WRITE_COMMAND(0x01);
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_WRITE_COMMAND>
     cea:	83 ef       	ldi	r24, 0xF3	; 243
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	f1 f7       	brne	.-4      	; 0xcee <LCD_Clear+0xa>
     cf2:	00 c0       	rjmp	.+0      	; 0xcf4 <LCD_Clear+0x10>
     cf4:	00 00       	nop
     cf6:	08 95       	ret

00000cf8 <LCD_GoTo>:
  This Function Takes a Specific Line and a Cell On The LCD and Displays the Data In That Location
  **/
void LCD_GoTo(uint8_t a_line,uint8_t a_cell)
{
//0x80 this is from data sheet to write an address on the DDRAM"screen"*/
	if (a_line==1)
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	29 f4       	brne	.+10     	; 0xd06 <LCD_GoTo+0xe>
	{
		LCD_WRITE_COMMAND(0x80+a_cell);    /*0x80 means we ant to write an address and a_cell is the address we want*/
     cfc:	80 e8       	ldi	r24, 0x80	; 128
     cfe:	86 0f       	add	r24, r22
     d00:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_WRITE_COMMAND>
     d04:	08 95       	ret
	}
	else if (a_line==2)
     d06:	82 30       	cpi	r24, 0x02	; 2
     d08:	21 f4       	brne	.+8      	; 0xd12 <LCD_GoTo+0x1a>
	{
		LCD_WRITE_COMMAND(0x80+0x40+a_cell);  /*0x40 to start from cell 0 at line 2 from the data sheet*/	
     d0a:	80 ec       	ldi	r24, 0xC0	; 192
     d0c:	86 0f       	add	r24, r22
     d0e:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_WRITE_COMMAND>
     d12:	08 95       	ret

00000d14 <Car_Moving_FWD>:
	DIO_WRITEPIN(motor1_0,HIGH);        
	DIO_WRITEPIN(motor1_1,LOW);    
	
	//this is used to provide voltage to the +ve pin of the motor
	DIO_WRITEPIN(motor2_0,LOW);
	DIO_WRITEPIN(motor2_1,HIGH);
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	8a e1       	ldi	r24, 0x1A	; 26
     d18:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     d1c:	61 e0       	ldi	r22, 0x01	; 1
     d1e:	8b e1       	ldi	r24, 0x1B	; 27
     d20:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	8e e1       	ldi	r24, 0x1E	; 30
     d28:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	8f e1       	ldi	r24, 0x1F	; 31
     d30:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     d34:	08 95       	ret

00000d36 <Car_Moving_BWD>:
     d36:	61 e0       	ldi	r22, 0x01	; 1
     d38:	8a e1       	ldi	r24, 0x1A	; 26
     d3a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	8b e1       	ldi	r24, 0x1B	; 27
     d42:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     d46:	61 e0       	ldi	r22, 0x01	; 1
     d48:	8e e1       	ldi	r24, 0x1E	; 30
     d4a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	8f e1       	ldi	r24, 0x1F	; 31
     d52:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     d56:	08 95       	ret

00000d58 <Car_Stop>:
this function is used to stop the 4 wheels by stopping the 4 motors*/
void Car_Stop(void)
{
	
	
  DIO_WRITEPIN(motor1_0,LOW);          
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	8a e1       	ldi	r24, 0x1A	; 26
     d5c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
  DIO_WRITEPIN(motor1_1,LOW);           
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	8b e1       	ldi	r24, 0x1B	; 27
     d64:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
  DIO_WRITEPIN(motor2_0,LOW);
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	8e e1       	ldi	r24, 0x1E	; 30
     d6c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
  DIO_WRITEPIN(motor2_1,LOW);
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	8f e1       	ldi	r24, 0x1F	; 31
     d74:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     d78:	08 95       	ret

00000d7a <Car_Rotating_Right>:
this function is used to drive the right wheels to move FWD, and the left wheels to move BWD,
which will lead to rotation of the car */
void Car_Rotating_Right(void)
{
	//this is used to provide the ground to the -ve pin of
	DIO_WRITEPIN(motor1_0,HIGH);
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	8a e1       	ldi	r24, 0x1A	; 26
     d7e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(motor1_1,LOW);
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	8b e1       	ldi	r24, 0x1B	; 27
     d86:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	
	//this is used to provide voltage to the +ve pin of the motor
	DIO_WRITEPIN(motor2_0,LOW);
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	8e e1       	ldi	r24, 0x1E	; 30
     d8e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(motor2_1,HIGH);
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	8f e1       	ldi	r24, 0x1F	; 31
     d96:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     d9a:	08 95       	ret

00000d9c <Car_Rotating_Left>:
this function is used to drive the left wheels to move FWD, and the right wheels to move BWD,
which will lead to rotation of the car */
void Car_Rotating_Left(void)
{
	//this is used to provide the ground to the -ve pin of
	DIO_WRITEPIN(motor1_0,LOW);
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	8a e1       	ldi	r24, 0x1A	; 26
     da0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(motor1_1,HIGH);
     da4:	61 e0       	ldi	r22, 0x01	; 1
     da6:	8b e1       	ldi	r24, 0x1B	; 27
     da8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	
	//this is used to provide voltage to the +ve pin of the motor
	DIO_WRITEPIN(motor2_0,HIGH);
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	8e e1       	ldi	r24, 0x1E	; 30
     db0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	DIO_WRITEPIN(motor2_1,LOW);
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	8f e1       	ldi	r24, 0x1F	; 31
     db8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
     dbc:	08 95       	ret

00000dbe <ultrasonicgetTime>:
	//Get_Dis=1;
}


 void ultrasonicgetTime (void)
{
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
	static uint8_t flag=0;
	static uint32_t T1=0;
	static uint32_t T2=0;
	if (flag==0)
     dc6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <flag.1994>
     dca:	81 11       	cpse	r24, r1
     dcc:	14 c0       	rjmp	.+40     	; 0xdf6 <ultrasonicgetTime+0x38>
	{
		T1=TCNT1;
     dce:	8c b5       	in	r24, 0x2c	; 44
     dd0:	9d b5       	in	r25, 0x2d	; 45
     dd2:	a0 e0       	ldi	r26, 0x00	; 0
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <T1.1995>
     dda:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <T1.1995+0x1>
     dde:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <T1.1995+0x2>
     de2:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <T1.1995+0x3>
		Icu_Trigger(ECO_PIN,FALLING_EDGE);
     de6:	62 e0       	ldi	r22, 0x02	; 2
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	0e 94 95 04 	call	0x92a	; 0x92a <Icu_Trigger>
		flag=1;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <flag.1994>
     df4:	39 c0       	rjmp	.+114    	; 0xe68 <ultrasonicgetTime+0xaa>
	}
	else if (flag==1)
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	b9 f5       	brne	.+110    	; 0xe68 <ultrasonicgetTime+0xaa>
	{
		T2=TCNT1;
     dfa:	8c b5       	in	r24, 0x2c	; 44
     dfc:	9d b5       	in	r25, 0x2d	; 45
     dfe:	a0 e0       	ldi	r26, 0x00	; 0
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <T2.1996>
     e06:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <T2.1996+0x1>
     e0a:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <T2.1996+0x2>
     e0e:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <T2.1996+0x3>
		Icu_Disable(ECO_PIN);
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	0e 94 8d 04 	call	0x91a	; 0x91a <Icu_Disable>
		flag=0;
     e18:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <flag.1994>
		
		*Disptr=(T2-T1)/58;
     e1c:	c0 91 61 01 	lds	r28, 0x0161	; 0x800161 <Disptr>
     e20:	d0 91 62 01 	lds	r29, 0x0162	; 0x800162 <Disptr+0x1>
     e24:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <T2.1996>
     e28:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <T2.1996+0x1>
     e2c:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <T2.1996+0x2>
     e30:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <T2.1996+0x3>
     e34:	00 91 5c 01 	lds	r16, 0x015C	; 0x80015c <T1.1995>
     e38:	10 91 5d 01 	lds	r17, 0x015D	; 0x80015d <T1.1995+0x1>
     e3c:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <T1.1995+0x2>
     e40:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <T1.1995+0x3>
     e44:	bc 01       	movw	r22, r24
     e46:	cd 01       	movw	r24, r26
     e48:	60 1b       	sub	r22, r16
     e4a:	71 0b       	sbc	r23, r17
     e4c:	82 0b       	sbc	r24, r18
     e4e:	93 0b       	sbc	r25, r19
     e50:	2a e3       	ldi	r18, 0x3A	; 58
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	40 e0       	ldi	r20, 0x00	; 0
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__udivmodsi4>
     e5c:	28 83       	st	Y, r18
     e5e:	39 83       	std	Y+1, r19	; 0x01
     e60:	4a 83       	std	Y+2, r20	; 0x02
     e62:	5b 83       	std	Y+3, r21	; 0x03
		//TCNT1=0;
		Get_Dis=0;
     e64:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <Get_Dis>
	}
}
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	08 95       	ret

00000e72 <Ultrasonic_init_SW>:



void Ultrasonic_init_SW(void)
{
	DIO_INITPIN(TRIGGER_PIN,OUTPUT);
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	8b e0       	ldi	r24, 0x0B	; 11
     e76:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_INITPIN>
     e7a:	08 95       	ret

00000e7c <Ultrasonic_GetDistance>:
}

void Ultrasonic_GetDistance(uint32_t*dis)
{
	if (Get_Dis==0)
     e7c:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <Get_Dis>
     e80:	21 11       	cpse	r18, r1
     e82:	1f c0       	rjmp	.+62     	; 0xec2 <Ultrasonic_GetDistance+0x46>
	{
		Disptr=dis;
     e84:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <Disptr+0x1>
     e88:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <Disptr>
		Icu_SetCallback(ECO_PIN,ultrasonicgetTime);
     e8c:	6f ed       	ldi	r22, 0xDF	; 223
     e8e:	76 e0       	ldi	r23, 0x06	; 6
     e90:	82 e0       	ldi	r24, 0x02	; 2
     e92:	0e 94 98 04 	call	0x930	; 0x930 <Icu_SetCallback>
		Icu_Trigger(ECO_PIN,RISING_EDGE);
     e96:	63 e0       	ldi	r22, 0x03	; 3
     e98:	82 e0       	ldi	r24, 0x02	; 2
     e9a:	0e 94 95 04 	call	0x92a	; 0x92a <Icu_Trigger>
		Icu_Enable(ECO_PIN);
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <Icu_Enable>
		DIO_WRITEPIN(TRIGGER_PIN,HIGH);
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	8b e0       	ldi	r24, 0x0B	; 11
     ea8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eac:	8a e1       	ldi	r24, 0x1A	; 26
     eae:	8a 95       	dec	r24
     eb0:	f1 f7       	brne	.-4      	; 0xeae <Ultrasonic_GetDistance+0x32>
     eb2:	00 c0       	rjmp	.+0      	; 0xeb4 <Ultrasonic_GetDistance+0x38>
		_delay_us(10);
		DIO_WRITEPIN(TRIGGER_PIN,LOW);
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	8b e0       	ldi	r24, 0x0B	; 11
     eb8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
		Get_Dis=1;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <Get_Dis>
     ec2:	08 95       	ret

00000ec4 <main>:
#include "APP/app.h"


int main(void)
{
	sei();
     ec4:	78 94       	sei
	uint32_t diss=0;

	app_Init();
     ec6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <app_Init>
//Car_Moving_FWD();
//PWM_duty(50);



app_Start();
     eca:	0e 94 ca 03 	call	0x794	; 0x794 <app_Start>

}
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	08 95       	ret

00000ed4 <DIO_INITPIN>:
	DIO_PIN_TYPE i;
	for(i=0; i<TOTAL_PINS ;i++)
	{
		DIO_INITPIN(i,PinsStatusArray[i]);
	}
}
     ed4:	98 2f       	mov	r25, r24
     ed6:	96 95       	lsr	r25
     ed8:	96 95       	lsr	r25
     eda:	96 95       	lsr	r25
     edc:	95 30       	cpi	r25, 0x05	; 5
     ede:	08 f0       	brcs	.+2      	; 0xee2 <DIO_INITPIN+0xe>
     ee0:	f9 c0       	rjmp	.+498    	; 0x10d4 <DIO_INITPIN+0x200>
     ee2:	87 70       	andi	r24, 0x07	; 7
     ee4:	61 30       	cpi	r22, 0x01	; 1
     ee6:	31 f0       	breq	.+12     	; 0xef4 <DIO_INITPIN+0x20>
     ee8:	08 f4       	brcc	.+2      	; 0xeec <DIO_INITPIN+0x18>
     eea:	a4 c0       	rjmp	.+328    	; 0x1034 <DIO_INITPIN+0x160>
     eec:	62 30       	cpi	r22, 0x02	; 2
     eee:	09 f4       	brne	.+2      	; 0xef2 <DIO_INITPIN+0x1e>
     ef0:	51 c0       	rjmp	.+162    	; 0xf94 <DIO_INITPIN+0xc0>
     ef2:	ef c0       	rjmp	.+478    	; 0x10d2 <DIO_INITPIN+0x1fe>
     ef4:	91 30       	cpi	r25, 0x01	; 1
     ef6:	c1 f0       	breq	.+48     	; 0xf28 <DIO_INITPIN+0x54>
     ef8:	28 f0       	brcs	.+10     	; 0xf04 <DIO_INITPIN+0x30>
     efa:	92 30       	cpi	r25, 0x02	; 2
     efc:	39 f1       	breq	.+78     	; 0xf4c <DIO_INITPIN+0x78>
     efe:	93 30       	cpi	r25, 0x03	; 3
     f00:	b9 f1       	breq	.+110    	; 0xf70 <DIO_INITPIN+0x9c>
     f02:	e7 c0       	rjmp	.+462    	; 0x10d2 <DIO_INITPIN+0x1fe>
     f04:	4a b3       	in	r20, 0x1a	; 26
     f06:	21 e0       	ldi	r18, 0x01	; 1
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	b9 01       	movw	r22, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <DIO_INITPIN+0x3e>
     f0e:	66 0f       	add	r22, r22
     f10:	77 1f       	adc	r23, r23
     f12:	8a 95       	dec	r24
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <DIO_INITPIN+0x3a>
     f16:	cb 01       	movw	r24, r22
     f18:	80 95       	com	r24
     f1a:	94 2f       	mov	r25, r20
     f1c:	98 23       	and	r25, r24
     f1e:	9a bb       	out	0x1a, r25	; 26
     f20:	9b b3       	in	r25, 0x1b	; 27
     f22:	89 23       	and	r24, r25
     f24:	8b bb       	out	0x1b, r24	; 27
     f26:	d5 c0       	rjmp	.+426    	; 0x10d2 <DIO_INITPIN+0x1fe>
     f28:	47 b3       	in	r20, 0x17	; 23
     f2a:	21 e0       	ldi	r18, 0x01	; 1
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	b9 01       	movw	r22, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <DIO_INITPIN+0x62>
     f32:	66 0f       	add	r22, r22
     f34:	77 1f       	adc	r23, r23
     f36:	8a 95       	dec	r24
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <DIO_INITPIN+0x5e>
     f3a:	cb 01       	movw	r24, r22
     f3c:	80 95       	com	r24
     f3e:	94 2f       	mov	r25, r20
     f40:	98 23       	and	r25, r24
     f42:	97 bb       	out	0x17, r25	; 23
     f44:	98 b3       	in	r25, 0x18	; 24
     f46:	89 23       	and	r24, r25
     f48:	88 bb       	out	0x18, r24	; 24
     f4a:	c3 c0       	rjmp	.+390    	; 0x10d2 <DIO_INITPIN+0x1fe>
     f4c:	44 b3       	in	r20, 0x14	; 20
     f4e:	21 e0       	ldi	r18, 0x01	; 1
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	b9 01       	movw	r22, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_INITPIN+0x86>
     f56:	66 0f       	add	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	8a 95       	dec	r24
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_INITPIN+0x82>
     f5e:	cb 01       	movw	r24, r22
     f60:	80 95       	com	r24
     f62:	94 2f       	mov	r25, r20
     f64:	98 23       	and	r25, r24
     f66:	94 bb       	out	0x14, r25	; 20
     f68:	95 b3       	in	r25, 0x15	; 21
     f6a:	89 23       	and	r24, r25
     f6c:	85 bb       	out	0x15, r24	; 21
     f6e:	b1 c0       	rjmp	.+354    	; 0x10d2 <DIO_INITPIN+0x1fe>
     f70:	41 b3       	in	r20, 0x11	; 17
     f72:	21 e0       	ldi	r18, 0x01	; 1
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	b9 01       	movw	r22, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_INITPIN+0xaa>
     f7a:	66 0f       	add	r22, r22
     f7c:	77 1f       	adc	r23, r23
     f7e:	8a 95       	dec	r24
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_INITPIN+0xa6>
     f82:	cb 01       	movw	r24, r22
     f84:	80 95       	com	r24
     f86:	94 2f       	mov	r25, r20
     f88:	98 23       	and	r25, r24
     f8a:	91 bb       	out	0x11, r25	; 17
     f8c:	92 b3       	in	r25, 0x12	; 18
     f8e:	89 23       	and	r24, r25
     f90:	82 bb       	out	0x12, r24	; 18
     f92:	9f c0       	rjmp	.+318    	; 0x10d2 <DIO_INITPIN+0x1fe>
     f94:	91 30       	cpi	r25, 0x01	; 1
     f96:	c1 f0       	breq	.+48     	; 0xfc8 <DIO_INITPIN+0xf4>
     f98:	28 f0       	brcs	.+10     	; 0xfa4 <DIO_INITPIN+0xd0>
     f9a:	92 30       	cpi	r25, 0x02	; 2
     f9c:	39 f1       	breq	.+78     	; 0xfec <DIO_INITPIN+0x118>
     f9e:	93 30       	cpi	r25, 0x03	; 3
     fa0:	b9 f1       	breq	.+110    	; 0x1010 <DIO_INITPIN+0x13c>
     fa2:	97 c0       	rjmp	.+302    	; 0x10d2 <DIO_INITPIN+0x1fe>
     fa4:	4a b3       	in	r20, 0x1a	; 26
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	b9 01       	movw	r22, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_INITPIN+0xde>
     fae:	66 0f       	add	r22, r22
     fb0:	77 1f       	adc	r23, r23
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_INITPIN+0xda>
     fb6:	cb 01       	movw	r24, r22
     fb8:	96 2f       	mov	r25, r22
     fba:	90 95       	com	r25
     fbc:	94 23       	and	r25, r20
     fbe:	9a bb       	out	0x1a, r25	; 26
     fc0:	9b b3       	in	r25, 0x1b	; 27
     fc2:	89 2b       	or	r24, r25
     fc4:	8b bb       	out	0x1b, r24	; 27
     fc6:	85 c0       	rjmp	.+266    	; 0x10d2 <DIO_INITPIN+0x1fe>
     fc8:	47 b3       	in	r20, 0x17	; 23
     fca:	21 e0       	ldi	r18, 0x01	; 1
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	b9 01       	movw	r22, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_INITPIN+0x102>
     fd2:	66 0f       	add	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_INITPIN+0xfe>
     fda:	cb 01       	movw	r24, r22
     fdc:	96 2f       	mov	r25, r22
     fde:	90 95       	com	r25
     fe0:	94 23       	and	r25, r20
     fe2:	97 bb       	out	0x17, r25	; 23
     fe4:	98 b3       	in	r25, 0x18	; 24
     fe6:	89 2b       	or	r24, r25
     fe8:	88 bb       	out	0x18, r24	; 24
     fea:	73 c0       	rjmp	.+230    	; 0x10d2 <DIO_INITPIN+0x1fe>
     fec:	44 b3       	in	r20, 0x14	; 20
     fee:	21 e0       	ldi	r18, 0x01	; 1
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	b9 01       	movw	r22, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_INITPIN+0x126>
     ff6:	66 0f       	add	r22, r22
     ff8:	77 1f       	adc	r23, r23
     ffa:	8a 95       	dec	r24
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_INITPIN+0x122>
     ffe:	cb 01       	movw	r24, r22
    1000:	96 2f       	mov	r25, r22
    1002:	90 95       	com	r25
    1004:	94 23       	and	r25, r20
    1006:	94 bb       	out	0x14, r25	; 20
    1008:	95 b3       	in	r25, 0x15	; 21
    100a:	89 2b       	or	r24, r25
    100c:	85 bb       	out	0x15, r24	; 21
    100e:	61 c0       	rjmp	.+194    	; 0x10d2 <DIO_INITPIN+0x1fe>
    1010:	41 b3       	in	r20, 0x11	; 17
    1012:	21 e0       	ldi	r18, 0x01	; 1
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	b9 01       	movw	r22, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_INITPIN+0x14a>
    101a:	66 0f       	add	r22, r22
    101c:	77 1f       	adc	r23, r23
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_INITPIN+0x146>
    1022:	cb 01       	movw	r24, r22
    1024:	96 2f       	mov	r25, r22
    1026:	90 95       	com	r25
    1028:	94 23       	and	r25, r20
    102a:	91 bb       	out	0x11, r25	; 17
    102c:	92 b3       	in	r25, 0x12	; 18
    102e:	89 2b       	or	r24, r25
    1030:	82 bb       	out	0x12, r24	; 18
    1032:	4f c0       	rjmp	.+158    	; 0x10d2 <DIO_INITPIN+0x1fe>
    1034:	91 30       	cpi	r25, 0x01	; 1
    1036:	c1 f0       	breq	.+48     	; 0x1068 <DIO_INITPIN+0x194>
    1038:	28 f0       	brcs	.+10     	; 0x1044 <DIO_INITPIN+0x170>
    103a:	92 30       	cpi	r25, 0x02	; 2
    103c:	39 f1       	breq	.+78     	; 0x108c <DIO_INITPIN+0x1b8>
    103e:	93 30       	cpi	r25, 0x03	; 3
    1040:	b9 f1       	breq	.+110    	; 0x10b0 <DIO_INITPIN+0x1dc>
    1042:	47 c0       	rjmp	.+142    	; 0x10d2 <DIO_INITPIN+0x1fe>
    1044:	4b b3       	in	r20, 0x1b	; 27
    1046:	21 e0       	ldi	r18, 0x01	; 1
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	b9 01       	movw	r22, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_INITPIN+0x17e>
    104e:	66 0f       	add	r22, r22
    1050:	77 1f       	adc	r23, r23
    1052:	8a 95       	dec	r24
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_INITPIN+0x17a>
    1056:	cb 01       	movw	r24, r22
    1058:	96 2f       	mov	r25, r22
    105a:	90 95       	com	r25
    105c:	94 23       	and	r25, r20
    105e:	9b bb       	out	0x1b, r25	; 27
    1060:	9a b3       	in	r25, 0x1a	; 26
    1062:	89 2b       	or	r24, r25
    1064:	8a bb       	out	0x1a, r24	; 26
    1066:	35 c0       	rjmp	.+106    	; 0x10d2 <DIO_INITPIN+0x1fe>
    1068:	48 b3       	in	r20, 0x18	; 24
    106a:	21 e0       	ldi	r18, 0x01	; 1
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	b9 01       	movw	r22, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_INITPIN+0x1a2>
    1072:	66 0f       	add	r22, r22
    1074:	77 1f       	adc	r23, r23
    1076:	8a 95       	dec	r24
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_INITPIN+0x19e>
    107a:	cb 01       	movw	r24, r22
    107c:	96 2f       	mov	r25, r22
    107e:	90 95       	com	r25
    1080:	94 23       	and	r25, r20
    1082:	98 bb       	out	0x18, r25	; 24
    1084:	97 b3       	in	r25, 0x17	; 23
    1086:	89 2b       	or	r24, r25
    1088:	87 bb       	out	0x17, r24	; 23
    108a:	23 c0       	rjmp	.+70     	; 0x10d2 <DIO_INITPIN+0x1fe>
    108c:	45 b3       	in	r20, 0x15	; 21
    108e:	21 e0       	ldi	r18, 0x01	; 1
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	b9 01       	movw	r22, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_INITPIN+0x1c6>
    1096:	66 0f       	add	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	8a 95       	dec	r24
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_INITPIN+0x1c2>
    109e:	cb 01       	movw	r24, r22
    10a0:	96 2f       	mov	r25, r22
    10a2:	90 95       	com	r25
    10a4:	94 23       	and	r25, r20
    10a6:	95 bb       	out	0x15, r25	; 21
    10a8:	94 b3       	in	r25, 0x14	; 20
    10aa:	89 2b       	or	r24, r25
    10ac:	84 bb       	out	0x14, r24	; 20
    10ae:	11 c0       	rjmp	.+34     	; 0x10d2 <DIO_INITPIN+0x1fe>
    10b0:	42 b3       	in	r20, 0x12	; 18
    10b2:	21 e0       	ldi	r18, 0x01	; 1
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	b9 01       	movw	r22, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_INITPIN+0x1ea>
    10ba:	66 0f       	add	r22, r22
    10bc:	77 1f       	adc	r23, r23
    10be:	8a 95       	dec	r24
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_INITPIN+0x1e6>
    10c2:	cb 01       	movw	r24, r22
    10c4:	96 2f       	mov	r25, r22
    10c6:	90 95       	com	r25
    10c8:	94 23       	and	r25, r20
    10ca:	92 bb       	out	0x12, r25	; 18
    10cc:	91 b3       	in	r25, 0x11	; 17
    10ce:	89 2b       	or	r24, r25
    10d0:	81 bb       	out	0x11, r24	; 17
    10d2:	08 95       	ret
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	08 95       	ret

000010d8 <DIO_WRITEPIN>:
    10d8:	98 2f       	mov	r25, r24
    10da:	96 95       	lsr	r25
    10dc:	96 95       	lsr	r25
    10de:	96 95       	lsr	r25
    10e0:	95 30       	cpi	r25, 0x05	; 5
    10e2:	08 f0       	brcs	.+2      	; 0x10e6 <DIO_WRITEPIN+0xe>
    10e4:	8e c0       	rjmp	.+284    	; 0x1202 <DIO_WRITEPIN+0x12a>
    10e6:	63 30       	cpi	r22, 0x03	; 3
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <DIO_WRITEPIN+0x14>
    10ea:	8d c0       	rjmp	.+282    	; 0x1206 <DIO_WRITEPIN+0x12e>
    10ec:	87 70       	andi	r24, 0x07	; 7
    10ee:	61 30       	cpi	r22, 0x01	; 1
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <DIO_WRITEPIN+0x1c>
    10f2:	40 c0       	rjmp	.+128    	; 0x1174 <DIO_WRITEPIN+0x9c>
    10f4:	91 30       	cpi	r25, 0x01	; 1
    10f6:	a1 f0       	breq	.+40     	; 0x1120 <DIO_WRITEPIN+0x48>
    10f8:	28 f0       	brcs	.+10     	; 0x1104 <DIO_WRITEPIN+0x2c>
    10fa:	92 30       	cpi	r25, 0x02	; 2
    10fc:	f9 f0       	breq	.+62     	; 0x113c <DIO_WRITEPIN+0x64>
    10fe:	93 30       	cpi	r25, 0x03	; 3
    1100:	59 f1       	breq	.+86     	; 0x1158 <DIO_WRITEPIN+0x80>
    1102:	83 c0       	rjmp	.+262    	; 0x120a <DIO_WRITEPIN+0x132>
    1104:	4b b3       	in	r20, 0x1b	; 27
    1106:	21 e0       	ldi	r18, 0x01	; 1
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	b9 01       	movw	r22, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_WRITEPIN+0x3a>
    110e:	66 0f       	add	r22, r22
    1110:	77 1f       	adc	r23, r23
    1112:	8a 95       	dec	r24
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_WRITEPIN+0x36>
    1116:	cb 01       	movw	r24, r22
    1118:	84 2b       	or	r24, r20
    111a:	8b bb       	out	0x1b, r24	; 27
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	08 95       	ret
    1120:	48 b3       	in	r20, 0x18	; 24
    1122:	21 e0       	ldi	r18, 0x01	; 1
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	b9 01       	movw	r22, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_WRITEPIN+0x56>
    112a:	66 0f       	add	r22, r22
    112c:	77 1f       	adc	r23, r23
    112e:	8a 95       	dec	r24
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_WRITEPIN+0x52>
    1132:	cb 01       	movw	r24, r22
    1134:	84 2b       	or	r24, r20
    1136:	88 bb       	out	0x18, r24	; 24
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	08 95       	ret
    113c:	45 b3       	in	r20, 0x15	; 21
    113e:	21 e0       	ldi	r18, 0x01	; 1
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	b9 01       	movw	r22, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_WRITEPIN+0x72>
    1146:	66 0f       	add	r22, r22
    1148:	77 1f       	adc	r23, r23
    114a:	8a 95       	dec	r24
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_WRITEPIN+0x6e>
    114e:	cb 01       	movw	r24, r22
    1150:	84 2b       	or	r24, r20
    1152:	85 bb       	out	0x15, r24	; 21
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	08 95       	ret
    1158:	42 b3       	in	r20, 0x12	; 18
    115a:	21 e0       	ldi	r18, 0x01	; 1
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	b9 01       	movw	r22, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_WRITEPIN+0x8e>
    1162:	66 0f       	add	r22, r22
    1164:	77 1f       	adc	r23, r23
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_WRITEPIN+0x8a>
    116a:	cb 01       	movw	r24, r22
    116c:	84 2b       	or	r24, r20
    116e:	82 bb       	out	0x12, r24	; 18
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	08 95       	ret
    1174:	61 11       	cpse	r22, r1
    1176:	44 c0       	rjmp	.+136    	; 0x1200 <DIO_WRITEPIN+0x128>
    1178:	91 30       	cpi	r25, 0x01	; 1
    117a:	a9 f0       	breq	.+42     	; 0x11a6 <DIO_WRITEPIN+0xce>
    117c:	28 f0       	brcs	.+10     	; 0x1188 <DIO_WRITEPIN+0xb0>
    117e:	92 30       	cpi	r25, 0x02	; 2
    1180:	09 f1       	breq	.+66     	; 0x11c4 <DIO_WRITEPIN+0xec>
    1182:	93 30       	cpi	r25, 0x03	; 3
    1184:	71 f1       	breq	.+92     	; 0x11e2 <DIO_WRITEPIN+0x10a>
    1186:	43 c0       	rjmp	.+134    	; 0x120e <DIO_WRITEPIN+0x136>
    1188:	4b b3       	in	r20, 0x1b	; 27
    118a:	21 e0       	ldi	r18, 0x01	; 1
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	b9 01       	movw	r22, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_WRITEPIN+0xbe>
    1192:	66 0f       	add	r22, r22
    1194:	77 1f       	adc	r23, r23
    1196:	8a 95       	dec	r24
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_WRITEPIN+0xba>
    119a:	cb 01       	movw	r24, r22
    119c:	80 95       	com	r24
    119e:	84 23       	and	r24, r20
    11a0:	8b bb       	out	0x1b, r24	; 27
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	08 95       	ret
    11a6:	48 b3       	in	r20, 0x18	; 24
    11a8:	21 e0       	ldi	r18, 0x01	; 1
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	b9 01       	movw	r22, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <DIO_WRITEPIN+0xdc>
    11b0:	66 0f       	add	r22, r22
    11b2:	77 1f       	adc	r23, r23
    11b4:	8a 95       	dec	r24
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <DIO_WRITEPIN+0xd8>
    11b8:	cb 01       	movw	r24, r22
    11ba:	80 95       	com	r24
    11bc:	84 23       	and	r24, r20
    11be:	88 bb       	out	0x18, r24	; 24
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	08 95       	ret
    11c4:	45 b3       	in	r20, 0x15	; 21
    11c6:	21 e0       	ldi	r18, 0x01	; 1
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	b9 01       	movw	r22, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_WRITEPIN+0xfa>
    11ce:	66 0f       	add	r22, r22
    11d0:	77 1f       	adc	r23, r23
    11d2:	8a 95       	dec	r24
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_WRITEPIN+0xf6>
    11d6:	cb 01       	movw	r24, r22
    11d8:	80 95       	com	r24
    11da:	84 23       	and	r24, r20
    11dc:	85 bb       	out	0x15, r24	; 21
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	08 95       	ret
    11e2:	42 b3       	in	r20, 0x12	; 18
    11e4:	21 e0       	ldi	r18, 0x01	; 1
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	b9 01       	movw	r22, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_WRITEPIN+0x118>
    11ec:	66 0f       	add	r22, r22
    11ee:	77 1f       	adc	r23, r23
    11f0:	8a 95       	dec	r24
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_WRITEPIN+0x114>
    11f4:	cb 01       	movw	r24, r22
    11f6:	80 95       	com	r24
    11f8:	84 23       	and	r24, r20
    11fa:	82 bb       	out	0x12, r24	; 18
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	08 95       	ret
    1200:	08 95       	ret
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	08 95       	ret
    1206:	83 e0       	ldi	r24, 0x03	; 3
    1208:	08 95       	ret
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	08 95       	ret
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	08 95       	ret

00001212 <DIO_READPIN>:
    1212:	98 2f       	mov	r25, r24
    1214:	96 95       	lsr	r25
    1216:	96 95       	lsr	r25
    1218:	96 95       	lsr	r25
    121a:	95 30       	cpi	r25, 0x05	; 5
    121c:	08 f0       	brcs	.+2      	; 0x1220 <DIO_READPIN+0xe>
    121e:	41 c0       	rjmp	.+130    	; 0x12a2 <DIO_READPIN+0x90>
    1220:	87 70       	andi	r24, 0x07	; 7
    1222:	91 30       	cpi	r25, 0x01	; 1
    1224:	a1 f0       	breq	.+40     	; 0x124e <DIO_READPIN+0x3c>
    1226:	28 f0       	brcs	.+10     	; 0x1232 <DIO_READPIN+0x20>
    1228:	92 30       	cpi	r25, 0x02	; 2
    122a:	f9 f0       	breq	.+62     	; 0x126a <DIO_READPIN+0x58>
    122c:	93 30       	cpi	r25, 0x03	; 3
    122e:	59 f1       	breq	.+86     	; 0x1286 <DIO_READPIN+0x74>
    1230:	3a c0       	rjmp	.+116    	; 0x12a6 <DIO_READPIN+0x94>
    1232:	29 b3       	in	r18, 0x19	; 25
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	a9 01       	movw	r20, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_READPIN+0x2c>
    123a:	55 95       	asr	r21
    123c:	47 95       	ror	r20
    123e:	8a 95       	dec	r24
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_READPIN+0x28>
    1242:	ca 01       	movw	r24, r20
    1244:	81 70       	andi	r24, 0x01	; 1
    1246:	fb 01       	movw	r30, r22
    1248:	80 83       	st	Z, r24
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	08 95       	ret
    124e:	26 b3       	in	r18, 0x16	; 22
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	a9 01       	movw	r20, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_READPIN+0x48>
    1256:	55 95       	asr	r21
    1258:	47 95       	ror	r20
    125a:	8a 95       	dec	r24
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_READPIN+0x44>
    125e:	ca 01       	movw	r24, r20
    1260:	81 70       	andi	r24, 0x01	; 1
    1262:	fb 01       	movw	r30, r22
    1264:	80 83       	st	Z, r24
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	08 95       	ret
    126a:	23 b3       	in	r18, 0x13	; 19
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	a9 01       	movw	r20, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_READPIN+0x64>
    1272:	55 95       	asr	r21
    1274:	47 95       	ror	r20
    1276:	8a 95       	dec	r24
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO_READPIN+0x60>
    127a:	ca 01       	movw	r24, r20
    127c:	81 70       	andi	r24, 0x01	; 1
    127e:	fb 01       	movw	r30, r22
    1280:	80 83       	st	Z, r24
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	08 95       	ret
    1286:	20 b3       	in	r18, 0x10	; 16
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	a9 01       	movw	r20, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_READPIN+0x80>
    128e:	55 95       	asr	r21
    1290:	47 95       	ror	r20
    1292:	8a 95       	dec	r24
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_READPIN+0x7c>
    1296:	ca 01       	movw	r24, r20
    1298:	81 70       	andi	r24, 0x01	; 1
    129a:	fb 01       	movw	r30, r22
    129c:	80 83       	st	Z, r24
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	08 95       	ret
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	08 95       	ret
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	08 95       	ret

000012aa <DIO_Init>:
/******************************************************************************************************************************************************************************/
/*it intializes a certain amount of pins based on the PINS_total in the dio.h and the type of config in the dio_arr*/

void DIO_Init(void)
{
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	c9 e6       	ldi	r28, 0x69	; 105
    12b4:	d0 e0       	ldi	r29, 0x00	; 0
    12b6:	0f e8       	ldi	r16, 0x8F	; 143
    12b8:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
	for(i=0; i<Pins_Total ;i++)
	{
		DIO_INITPIN(dio_arr[i].pin,dio_arr[i].status);
    12ba:	69 81       	ldd	r22, Y+1	; 0x01
    12bc:	88 81       	ld	r24, Y
    12be:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_INITPIN>
    12c2:	22 96       	adiw	r28, 0x02	; 2
/*it intializes a certain amount of pins based on the PINS_total in the dio.h and the type of config in the dio_arr*/

void DIO_Init(void)
{
	uint8_t i;
	for(i=0; i<Pins_Total ;i++)
    12c4:	c0 17       	cp	r28, r16
    12c6:	d1 07       	cpc	r29, r17
    12c8:	c1 f7       	brne	.-16     	; 0x12ba <DIO_Init+0x10>
	{
		DIO_INITPIN(dio_arr[i].pin,dio_arr[i].status);
	}
}
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	08 95       	ret

000012d4 <DIO_write>:
//************************************************************************************************
void DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	switch(portNumber)
    12d4:	62 34       	cpi	r22, 0x42	; 66
    12d6:	59 f1       	breq	.+86     	; 0x132e <DIO_write+0x5a>
    12d8:	18 f4       	brcc	.+6      	; 0x12e0 <DIO_write+0xc>
    12da:	61 34       	cpi	r22, 0x41	; 65
    12dc:	41 f0       	breq	.+16     	; 0x12ee <DIO_write+0x1a>
    12de:	08 95       	ret
    12e0:	63 34       	cpi	r22, 0x43	; 67
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <DIO_write+0x12>
    12e4:	44 c0       	rjmp	.+136    	; 0x136e <DIO_write+0x9a>
    12e6:	64 34       	cpi	r22, 0x44	; 68
    12e8:	09 f4       	brne	.+2      	; 0x12ec <DIO_write+0x18>
    12ea:	60 c0       	rjmp	.+192    	; 0x13ac <DIO_write+0xd8>
    12ec:	08 95       	ret
	{
		case PORT_A:
		if(value== LOW)
    12ee:	41 11       	cpse	r20, r1
    12f0:	0e c0       	rjmp	.+28     	; 0x130e <DIO_write+0x3a>
		{
			PORTA &= ~(1<<pinNumber); // write 0
    12f2:	4b b3       	in	r20, 0x1b	; 27
    12f4:	21 e0       	ldi	r18, 0x01	; 1
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	b9 01       	movw	r22, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_write+0x2c>
    12fc:	66 0f       	add	r22, r22
    12fe:	77 1f       	adc	r23, r23
    1300:	8a 95       	dec	r24
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_write+0x28>
    1304:	cb 01       	movw	r24, r22
    1306:	80 95       	com	r24
    1308:	84 23       	and	r24, r20
    130a:	8b bb       	out	0x1b, r24	; 27
    130c:	08 95       	ret
		}
		else if(value==HIGH)
    130e:	41 30       	cpi	r20, 0x01	; 1
    1310:	09 f0       	breq	.+2      	; 0x1314 <DIO_write+0x40>
    1312:	6a c0       	rjmp	.+212    	; 0x13e8 <DIO_write+0x114>
		{
			PORTA |= (1<<pinNumber); // write 1
    1314:	4b b3       	in	r20, 0x1b	; 27
    1316:	21 e0       	ldi	r18, 0x01	; 1
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	b9 01       	movw	r22, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_write+0x4e>
    131e:	66 0f       	add	r22, r22
    1320:	77 1f       	adc	r23, r23
    1322:	8a 95       	dec	r24
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_write+0x4a>
    1326:	cb 01       	movw	r24, r22
    1328:	84 2b       	or	r24, r20
    132a:	8b bb       	out	0x1b, r24	; 27
    132c:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_B:
		if(value== LOW)
    132e:	41 11       	cpse	r20, r1
    1330:	0e c0       	rjmp	.+28     	; 0x134e <DIO_write+0x7a>
		{
			PORTB &= ~(1<<pinNumber); // write 0
    1332:	48 b3       	in	r20, 0x18	; 24
    1334:	21 e0       	ldi	r18, 0x01	; 1
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	b9 01       	movw	r22, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_write+0x6c>
    133c:	66 0f       	add	r22, r22
    133e:	77 1f       	adc	r23, r23
    1340:	8a 95       	dec	r24
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_write+0x68>
    1344:	cb 01       	movw	r24, r22
    1346:	80 95       	com	r24
    1348:	84 23       	and	r24, r20
    134a:	88 bb       	out	0x18, r24	; 24
    134c:	08 95       	ret
		}
		else if(value==HIGH)
    134e:	41 30       	cpi	r20, 0x01	; 1
    1350:	09 f0       	breq	.+2      	; 0x1354 <DIO_write+0x80>
    1352:	4a c0       	rjmp	.+148    	; 0x13e8 <DIO_write+0x114>
		{
			PORTB |= (1<<pinNumber); // write 1
    1354:	48 b3       	in	r20, 0x18	; 24
    1356:	21 e0       	ldi	r18, 0x01	; 1
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	b9 01       	movw	r22, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_write+0x8e>
    135e:	66 0f       	add	r22, r22
    1360:	77 1f       	adc	r23, r23
    1362:	8a 95       	dec	r24
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_write+0x8a>
    1366:	cb 01       	movw	r24, r22
    1368:	84 2b       	or	r24, r20
    136a:	88 bb       	out	0x18, r24	; 24
    136c:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_C:
		if(value== LOW)
    136e:	41 11       	cpse	r20, r1
    1370:	0e c0       	rjmp	.+28     	; 0x138e <DIO_write+0xba>
		{
			PORTC &= ~(1<<pinNumber); // write 0
    1372:	45 b3       	in	r20, 0x15	; 21
    1374:	21 e0       	ldi	r18, 0x01	; 1
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	b9 01       	movw	r22, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_write+0xac>
    137c:	66 0f       	add	r22, r22
    137e:	77 1f       	adc	r23, r23
    1380:	8a 95       	dec	r24
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_write+0xa8>
    1384:	cb 01       	movw	r24, r22
    1386:	80 95       	com	r24
    1388:	84 23       	and	r24, r20
    138a:	85 bb       	out	0x15, r24	; 21
    138c:	08 95       	ret
		}
		else if(value==HIGH)
    138e:	41 30       	cpi	r20, 0x01	; 1
    1390:	59 f5       	brne	.+86     	; 0x13e8 <DIO_write+0x114>
		{
			PORTC |= (1<<pinNumber); // write 1
    1392:	45 b3       	in	r20, 0x15	; 21
    1394:	21 e0       	ldi	r18, 0x01	; 1
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	b9 01       	movw	r22, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_write+0xcc>
    139c:	66 0f       	add	r22, r22
    139e:	77 1f       	adc	r23, r23
    13a0:	8a 95       	dec	r24
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_write+0xc8>
    13a4:	cb 01       	movw	r24, r22
    13a6:	84 2b       	or	r24, r20
    13a8:	85 bb       	out	0x15, r24	; 21
    13aa:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_D:
		if(value== LOW)
    13ac:	41 11       	cpse	r20, r1
    13ae:	0e c0       	rjmp	.+28     	; 0x13cc <DIO_write+0xf8>
		{
			PORTD &= ~(1<<pinNumber); // write 0
    13b0:	42 b3       	in	r20, 0x12	; 18
    13b2:	21 e0       	ldi	r18, 0x01	; 1
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	b9 01       	movw	r22, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_write+0xea>
    13ba:	66 0f       	add	r22, r22
    13bc:	77 1f       	adc	r23, r23
    13be:	8a 95       	dec	r24
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_write+0xe6>
    13c2:	cb 01       	movw	r24, r22
    13c4:	80 95       	com	r24
    13c6:	84 23       	and	r24, r20
    13c8:	82 bb       	out	0x12, r24	; 18
    13ca:	08 95       	ret
		}
		else if(value==HIGH)
    13cc:	41 30       	cpi	r20, 0x01	; 1
    13ce:	61 f4       	brne	.+24     	; 0x13e8 <DIO_write+0x114>
		{
			PORTD |= (1<<pinNumber); // write 1
    13d0:	42 b3       	in	r20, 0x12	; 18
    13d2:	21 e0       	ldi	r18, 0x01	; 1
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	b9 01       	movw	r22, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_write+0x10a>
    13da:	66 0f       	add	r22, r22
    13dc:	77 1f       	adc	r23, r23
    13de:	8a 95       	dec	r24
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_write+0x106>
    13e2:	cb 01       	movw	r24, r22
    13e4:	84 2b       	or	r24, r20
    13e6:	82 bb       	out	0x12, r24	; 18
    13e8:	08 95       	ret

000013ea <DIO_read>:
} // Write data to DIO


void DIO_read(uint8_t pinNumber, uint8_t portNumber,uint8_t* value)
{
	switch(portNumber)
    13ea:	62 34       	cpi	r22, 0x42	; 66
    13ec:	f9 f0       	breq	.+62     	; 0x142c <DIO_read+0x42>
    13ee:	18 f4       	brcc	.+6      	; 0x13f6 <DIO_read+0xc>
    13f0:	61 34       	cpi	r22, 0x41	; 65
    13f2:	39 f0       	breq	.+14     	; 0x1402 <DIO_read+0x18>
    13f4:	08 95       	ret
    13f6:	63 34       	cpi	r22, 0x43	; 67
    13f8:	71 f1       	breq	.+92     	; 0x1456 <DIO_read+0x6c>
    13fa:	64 34       	cpi	r22, 0x44	; 68
    13fc:	09 f4       	brne	.+2      	; 0x1400 <DIO_read+0x16>
    13fe:	40 c0       	rjmp	.+128    	; 0x1480 <DIO_read+0x96>
    1400:	08 95       	ret
	{
		case PORT_A:
		*value= (PINA & (1<<pinNumber))>>pinNumber; //get state read bit
    1402:	69 b3       	in	r22, 0x19	; 25
    1404:	21 e0       	ldi	r18, 0x01	; 1
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	08 2e       	mov	r0, r24
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_read+0x26>
    140c:	22 0f       	add	r18, r18
    140e:	33 1f       	adc	r19, r19
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_read+0x22>
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	26 23       	and	r18, r22
    1418:	37 23       	and	r19, r23
    141a:	b9 01       	movw	r22, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_read+0x38>
    141e:	75 95       	asr	r23
    1420:	67 95       	ror	r22
    1422:	8a 95       	dec	r24
    1424:	e2 f7       	brpl	.-8      	; 0x141e <DIO_read+0x34>
    1426:	fa 01       	movw	r30, r20
    1428:	60 83       	st	Z, r22
		break;
    142a:	08 95       	ret
		case PORT_B:
		*value= (PINB & (1<<pinNumber))>>pinNumber; //get state read bit
    142c:	66 b3       	in	r22, 0x16	; 22
    142e:	21 e0       	ldi	r18, 0x01	; 1
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	08 2e       	mov	r0, r24
    1434:	02 c0       	rjmp	.+4      	; 0x143a <DIO_read+0x50>
    1436:	22 0f       	add	r18, r18
    1438:	33 1f       	adc	r19, r19
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <DIO_read+0x4c>
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	26 23       	and	r18, r22
    1442:	37 23       	and	r19, r23
    1444:	b9 01       	movw	r22, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <DIO_read+0x62>
    1448:	75 95       	asr	r23
    144a:	67 95       	ror	r22
    144c:	8a 95       	dec	r24
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <DIO_read+0x5e>
    1450:	fa 01       	movw	r30, r20
    1452:	60 83       	st	Z, r22
		break;
    1454:	08 95       	ret
		case PORT_C:
		*value= (PINC & (1<<pinNumber))>>pinNumber; //get state read bit
    1456:	63 b3       	in	r22, 0x13	; 19
    1458:	21 e0       	ldi	r18, 0x01	; 1
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	08 2e       	mov	r0, r24
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_read+0x7a>
    1460:	22 0f       	add	r18, r18
    1462:	33 1f       	adc	r19, r19
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_read+0x76>
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	26 23       	and	r18, r22
    146c:	37 23       	and	r19, r23
    146e:	b9 01       	movw	r22, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_read+0x8c>
    1472:	75 95       	asr	r23
    1474:	67 95       	ror	r22
    1476:	8a 95       	dec	r24
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <DIO_read+0x88>
    147a:	fa 01       	movw	r30, r20
    147c:	60 83       	st	Z, r22
		break;
    147e:	08 95       	ret
		case PORT_D:
		*value= (PIND & (1<<pinNumber))>>pinNumber; //get state read bit
    1480:	60 b3       	in	r22, 0x10	; 16
    1482:	21 e0       	ldi	r18, 0x01	; 1
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	08 2e       	mov	r0, r24
    1488:	02 c0       	rjmp	.+4      	; 0x148e <DIO_read+0xa4>
    148a:	22 0f       	add	r18, r18
    148c:	33 1f       	adc	r19, r19
    148e:	0a 94       	dec	r0
    1490:	e2 f7       	brpl	.-8      	; 0x148a <DIO_read+0xa0>
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	26 23       	and	r18, r22
    1496:	37 23       	and	r19, r23
    1498:	b9 01       	movw	r22, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO_read+0xb6>
    149c:	75 95       	asr	r23
    149e:	67 95       	ror	r22
    14a0:	8a 95       	dec	r24
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <DIO_read+0xb2>
    14a4:	fa 01       	movw	r30, r20
    14a6:	60 83       	st	Z, r22
    14a8:	08 95       	ret

000014aa <EXI_Enable>:
/**DESCRIPTION:-
it enables one of the external interrupt
*/
EN_int__error_t EXI_Enable (EN_int_t Interrupt)
{
	switch (Interrupt)
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	41 f0       	breq	.+16     	; 0x14be <EXI_Enable+0x14>
    14ae:	18 f0       	brcs	.+6      	; 0x14b6 <EXI_Enable+0xc>
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	49 f0       	breq	.+18     	; 0x14c6 <EXI_Enable+0x1c>
    14b4:	08 95       	ret
	{
		case EXT_INT_0:
		set_bit(GICR,INT0);
    14b6:	8b b7       	in	r24, 0x3b	; 59
    14b8:	80 64       	ori	r24, 0x40	; 64
    14ba:	8b bf       	out	0x3b, r24	; 59
		break;
    14bc:	08 95       	ret
		case EXT_INT_1:
		set_bit(GICR,INT1);
    14be:	8b b7       	in	r24, 0x3b	; 59
    14c0:	80 68       	ori	r24, 0x80	; 128
    14c2:	8b bf       	out	0x3b, r24	; 59
		break;
    14c4:	08 95       	ret
		case EXT_INT_2:
		set_bit(GICR,INT2);
    14c6:	8b b7       	in	r24, 0x3b	; 59
    14c8:	80 62       	ori	r24, 0x20	; 32
    14ca:	8b bf       	out	0x3b, r24	; 59
		break;
	}
}
    14cc:	08 95       	ret

000014ce <EXI_Disable>:
it disables one of the external interrupt
*/

EN_int__error_t EXI_Disable (EN_int_t Interrupt)
{
	switch (Interrupt)
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	41 f0       	breq	.+16     	; 0x14e2 <EXI_Disable+0x14>
    14d2:	18 f0       	brcs	.+6      	; 0x14da <EXI_Disable+0xc>
    14d4:	82 30       	cpi	r24, 0x02	; 2
    14d6:	49 f0       	breq	.+18     	; 0x14ea <EXI_Disable+0x1c>
    14d8:	08 95       	ret
	{
		case EXT_INT_0:
		clear_bit(GICR,INT0);
    14da:	8b b7       	in	r24, 0x3b	; 59
    14dc:	8f 7b       	andi	r24, 0xBF	; 191
    14de:	8b bf       	out	0x3b, r24	; 59
		break;
    14e0:	08 95       	ret
		case EXT_INT_1:
		clear_bit(GICR,INT1);
    14e2:	8b b7       	in	r24, 0x3b	; 59
    14e4:	8f 77       	andi	r24, 0x7F	; 127
    14e6:	8b bf       	out	0x3b, r24	; 59
		break;
    14e8:	08 95       	ret
		case EXT_INT_2:
		clear_bit(GICR,INT2);
    14ea:	8b b7       	in	r24, 0x3b	; 59
    14ec:	8f 7d       	andi	r24, 0xDF	; 223
    14ee:	8b bf       	out	0x3b, r24	; 59
		break;
	}
}
    14f0:	08 95       	ret

000014f2 <EXI_Trigger>:
*/

EN_int__error_t EXI_Trigger(EN_int_t Interrupt,EN_trig trigger)
{
	
	switch(Interrupt)
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	49 f1       	breq	.+82     	; 0x1548 <EXI_Trigger+0x56>
    14f6:	20 f0       	brcs	.+8      	; 0x1500 <EXI_Trigger+0xe>
    14f8:	82 30       	cpi	r24, 0x02	; 2
    14fa:	09 f4       	brne	.+2      	; 0x14fe <EXI_Trigger+0xc>
    14fc:	49 c0       	rjmp	.+146    	; 0x1590 <EXI_Trigger+0x9e>
    14fe:	08 95       	ret
	{
		case EXT_INT_0:
		switch(trigger)
    1500:	61 30       	cpi	r22, 0x01	; 1
    1502:	69 f0       	breq	.+26     	; 0x151e <EXI_Trigger+0x2c>
    1504:	28 f0       	brcs	.+10     	; 0x1510 <EXI_Trigger+0x1e>
    1506:	62 30       	cpi	r22, 0x02	; 2
    1508:	89 f0       	breq	.+34     	; 0x152c <EXI_Trigger+0x3a>
    150a:	63 30       	cpi	r22, 0x03	; 3
    150c:	b1 f0       	breq	.+44     	; 0x153a <EXI_Trigger+0x48>
    150e:	08 95       	ret
		{
			case LOW_LEVEL:
			clear_bit(MCUCR,ISC00);
    1510:	85 b7       	in	r24, 0x35	; 53
    1512:	8e 7f       	andi	r24, 0xFE	; 254
    1514:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC01);
    1516:	85 b7       	in	r24, 0x35	; 53
    1518:	8d 7f       	andi	r24, 0xFD	; 253
    151a:	85 bf       	out	0x35, r24	; 53
			break;
    151c:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			set_bit(MCUCR,ISC00);
    151e:	85 b7       	in	r24, 0x35	; 53
    1520:	81 60       	ori	r24, 0x01	; 1
    1522:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC01);
    1524:	85 b7       	in	r24, 0x35	; 53
    1526:	8d 7f       	andi	r24, 0xFD	; 253
    1528:	85 bf       	out	0x35, r24	; 53
			break;
    152a:	08 95       	ret
			case FALLING_EDGE:
			clear_bit(MCUCR,ISC00);
    152c:	85 b7       	in	r24, 0x35	; 53
    152e:	8e 7f       	andi	r24, 0xFE	; 254
    1530:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC01);
    1532:	85 b7       	in	r24, 0x35	; 53
    1534:	82 60       	ori	r24, 0x02	; 2
    1536:	85 bf       	out	0x35, r24	; 53
			break;
    1538:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCR,ISC00);
    153a:	85 b7       	in	r24, 0x35	; 53
    153c:	81 60       	ori	r24, 0x01	; 1
    153e:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC01);
    1540:	85 b7       	in	r24, 0x35	; 53
    1542:	82 60       	ori	r24, 0x02	; 2
    1544:	85 bf       	out	0x35, r24	; 53
			break;
    1546:	08 95       	ret
		}
		break;
		case EXT_INT_1:
		switch(trigger)
    1548:	61 30       	cpi	r22, 0x01	; 1
    154a:	69 f0       	breq	.+26     	; 0x1566 <EXI_Trigger+0x74>
    154c:	28 f0       	brcs	.+10     	; 0x1558 <EXI_Trigger+0x66>
    154e:	62 30       	cpi	r22, 0x02	; 2
    1550:	89 f0       	breq	.+34     	; 0x1574 <EXI_Trigger+0x82>
    1552:	63 30       	cpi	r22, 0x03	; 3
    1554:	b1 f0       	breq	.+44     	; 0x1582 <EXI_Trigger+0x90>
    1556:	08 95       	ret
		{
			case LOW_LEVEL:
			clear_bit(MCUCR,ISC10);
    1558:	85 b7       	in	r24, 0x35	; 53
    155a:	8b 7f       	andi	r24, 0xFB	; 251
    155c:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC11); break;
    155e:	85 b7       	in	r24, 0x35	; 53
    1560:	87 7f       	andi	r24, 0xF7	; 247
    1562:	85 bf       	out	0x35, r24	; 53
    1564:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			set_bit(MCUCR,ISC10);
    1566:	85 b7       	in	r24, 0x35	; 53
    1568:	84 60       	ori	r24, 0x04	; 4
    156a:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC11); break;
    156c:	85 b7       	in	r24, 0x35	; 53
    156e:	87 7f       	andi	r24, 0xF7	; 247
    1570:	85 bf       	out	0x35, r24	; 53
    1572:	08 95       	ret
			case FALLING_EDGE:
			clear_bit(MCUCR,ISC10);
    1574:	85 b7       	in	r24, 0x35	; 53
    1576:	8b 7f       	andi	r24, 0xFB	; 251
    1578:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC11); break;
    157a:	85 b7       	in	r24, 0x35	; 53
    157c:	88 60       	ori	r24, 0x08	; 8
    157e:	85 bf       	out	0x35, r24	; 53
    1580:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCR,ISC10);
    1582:	85 b7       	in	r24, 0x35	; 53
    1584:	84 60       	ori	r24, 0x04	; 4
    1586:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC11); break;
    1588:	85 b7       	in	r24, 0x35	; 53
    158a:	88 60       	ori	r24, 0x08	; 8
    158c:	85 bf       	out	0x35, r24	; 53
    158e:	08 95       	ret
		}
		break;
		case EXT_INT_2:
		switch(trigger)
    1590:	62 30       	cpi	r22, 0x02	; 2
    1592:	19 f0       	breq	.+6      	; 0x159a <EXI_Trigger+0xa8>
    1594:	63 30       	cpi	r22, 0x03	; 3
    1596:	29 f0       	breq	.+10     	; 0x15a2 <EXI_Trigger+0xb0>
    1598:	08 95       	ret
		{
			case FALLING_EDGE:
			clear_bit(MCUCSR,ISC2);
    159a:	84 b7       	in	r24, 0x34	; 52
    159c:	8f 7b       	andi	r24, 0xBF	; 191
    159e:	84 bf       	out	0x34, r24	; 52
			break;
    15a0:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCSR,ISC2);
    15a2:	84 b7       	in	r24, 0x34	; 52
    15a4:	80 64       	ori	r24, 0x40	; 64
    15a6:	84 bf       	out	0x34, r24	; 52
			break;
		}
		break;
	}
}
    15a8:	08 95       	ret

000015aa <EXI_SetCallBack>:
*/


void EXI_SetCallBack(EN_int_t Interrupt,void(*ptrf)(void))
{
	switch (Interrupt)
    15aa:	88 23       	and	r24, r24
    15ac:	19 f0       	breq	.+6      	; 0x15b4 <EXI_SetCallBack+0xa>
    15ae:	82 30       	cpi	r24, 0x02	; 2
    15b0:	51 f4       	brne	.+20     	; 0x15c6 <EXI_SetCallBack+0x1c>
    15b2:	05 c0       	rjmp	.+10     	; 0x15be <EXI_SetCallBack+0x14>
	{
		case EXT_INT_0:
		ptrf_INT_0 =ptrf;
    15b4:	70 93 68 01 	sts	0x0168, r23	; 0x800168 <ptrf_INT_0+0x1>
    15b8:	60 93 67 01 	sts	0x0167, r22	; 0x800167 <ptrf_INT_0>
		break;
    15bc:	08 95       	ret
		case EXT_INT_1:
		ptrf_INT_1 =ptrf;
		break;
		case EXT_INT_2:
		ptrf_INT_2 =ptrf;
    15be:	70 93 66 01 	sts	0x0166, r23	; 0x800166 <ptrf_INT_2+0x1>
    15c2:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <ptrf_INT_2>
    15c6:	08 95       	ret

000015c8 <__vector_1>:
}
/*******************************************************ISR INT_0********************************************************/


ISR (INT0_vect)
{
    15c8:	1f 92       	push	r1
    15ca:	0f 92       	push	r0
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	0f 92       	push	r0
    15d0:	11 24       	eor	r1, r1
    15d2:	2f 93       	push	r18
    15d4:	3f 93       	push	r19
    15d6:	4f 93       	push	r20
    15d8:	5f 93       	push	r21
    15da:	6f 93       	push	r22
    15dc:	7f 93       	push	r23
    15de:	8f 93       	push	r24
    15e0:	9f 93       	push	r25
    15e2:	af 93       	push	r26
    15e4:	bf 93       	push	r27
    15e6:	ef 93       	push	r30
    15e8:	ff 93       	push	r31
	
	if (ptrf_INT_0 != NULL)
    15ea:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <ptrf_INT_0>
    15ee:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <ptrf_INT_0+0x1>
    15f2:	30 97       	sbiw	r30, 0x00	; 0
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <__vector_1+0x30>
	{
		ptrf_INT_0();
    15f6:	09 95       	icall
		

	}
}
    15f8:	ff 91       	pop	r31
    15fa:	ef 91       	pop	r30
    15fc:	bf 91       	pop	r27
    15fe:	af 91       	pop	r26
    1600:	9f 91       	pop	r25
    1602:	8f 91       	pop	r24
    1604:	7f 91       	pop	r23
    1606:	6f 91       	pop	r22
    1608:	5f 91       	pop	r21
    160a:	4f 91       	pop	r20
    160c:	3f 91       	pop	r19
    160e:	2f 91       	pop	r18
    1610:	0f 90       	pop	r0
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	0f 90       	pop	r0
    1616:	1f 90       	pop	r1
    1618:	18 95       	reti

0000161a <__vector_2>:

ISR (INT1_vect)
{
    161a:	1f 92       	push	r1
    161c:	0f 92       	push	r0
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	0f 92       	push	r0
    1622:	11 24       	eor	r1, r1
    1624:	8f 93       	push	r24
	if (ptrf_INT_1 != NULL)
	{
		//ptrf_INT_1();
		
	}
	car_flag = 1 ;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <car_flag>
}
    162c:	8f 91       	pop	r24
    162e:	0f 90       	pop	r0
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	0f 90       	pop	r0
    1634:	1f 90       	pop	r1
    1636:	18 95       	reti

00001638 <__vector_3>:

ISR (INT2_vect)
{
    1638:	1f 92       	push	r1
    163a:	0f 92       	push	r0
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	0f 92       	push	r0
    1640:	11 24       	eor	r1, r1
    1642:	2f 93       	push	r18
    1644:	3f 93       	push	r19
    1646:	4f 93       	push	r20
    1648:	5f 93       	push	r21
    164a:	6f 93       	push	r22
    164c:	7f 93       	push	r23
    164e:	8f 93       	push	r24
    1650:	9f 93       	push	r25
    1652:	af 93       	push	r26
    1654:	bf 93       	push	r27
    1656:	ef 93       	push	r30
    1658:	ff 93       	push	r31
	if (ptrf_INT_2 != NULL)
    165a:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <ptrf_INT_2>
    165e:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <ptrf_INT_2+0x1>
    1662:	30 97       	sbiw	r30, 0x00	; 0
    1664:	09 f0       	breq	.+2      	; 0x1668 <__vector_3+0x30>
	{
		ptrf_INT_2();
    1666:	09 95       	icall
	}
    1668:	ff 91       	pop	r31
    166a:	ef 91       	pop	r30
    166c:	bf 91       	pop	r27
    166e:	af 91       	pop	r26
    1670:	9f 91       	pop	r25
    1672:	8f 91       	pop	r24
    1674:	7f 91       	pop	r23
    1676:	6f 91       	pop	r22
    1678:	5f 91       	pop	r21
    167a:	4f 91       	pop	r20
    167c:	3f 91       	pop	r19
    167e:	2f 91       	pop	r18
    1680:	0f 90       	pop	r0
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	0f 90       	pop	r0
    1686:	1f 90       	pop	r1
    1688:	18 95       	reti

0000168a <PWM_gen>:
	timer0_set(6);
	TIMER_0_init();
	TIMER_0_start();
}
static void PWM_gen()
{
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
	PWM_Count++;
    168e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <PWM_Count>
    1692:	8f 5f       	subi	r24, 0xFF	; 255
    1694:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <PWM_Count>
	if (PWM_Count==PWM_count_OFF)
    1698:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <PWM_Count>
    169c:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <PWM_count_OFF>
    16a0:	50 91 6b 01 	lds	r21, 0x016B	; 0x80016b <PWM_count_OFF+0x1>
    16a4:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <PWM_count_OFF+0x2>
    16a8:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <PWM_count_OFF+0x3>
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	a0 e0       	ldi	r26, 0x00	; 0
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	84 17       	cp	r24, r20
    16b4:	95 07       	cpc	r25, r21
    16b6:	a6 07       	cpc	r26, r22
    16b8:	b7 07       	cpc	r27, r23
    16ba:	49 f4       	brne	.+18     	; 0x16ce <PWM_gen+0x44>
	{
		DIO_WRITEPIN(PWM_Pin1,HIGH);
    16bc:	61 e0       	ldi	r22, 0x01	; 1
    16be:	8c e1       	ldi	r24, 0x1C	; 28
    16c0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
		DIO_WRITEPIN(PWM_Pin2,HIGH);
    16c4:	61 e0       	ldi	r22, 0x01	; 1
    16c6:	8d e1       	ldi	r24, 0x1D	; 29
    16c8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
    16cc:	28 c0       	rjmp	.+80     	; 0x171e <PWM_gen+0x94>
	}
	else if (PWM_Count==(PWM_count_OFF+PWM_count_ON))
    16ce:	40 91 69 01 	lds	r20, 0x0169	; 0x800169 <PWM_Count>
    16d2:	00 91 6a 01 	lds	r16, 0x016A	; 0x80016a <PWM_count_OFF>
    16d6:	10 91 6b 01 	lds	r17, 0x016B	; 0x80016b <PWM_count_OFF+0x1>
    16da:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <PWM_count_OFF+0x2>
    16de:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <PWM_count_OFF+0x3>
    16e2:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <PWM_count_ON>
    16e6:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <PWM_count_ON+0x1>
    16ea:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <PWM_count_ON+0x2>
    16ee:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <PWM_count_ON+0x3>
    16f2:	50 e0       	ldi	r21, 0x00	; 0
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	80 0f       	add	r24, r16
    16fa:	91 1f       	adc	r25, r17
    16fc:	a2 1f       	adc	r26, r18
    16fe:	b3 1f       	adc	r27, r19
    1700:	48 17       	cp	r20, r24
    1702:	59 07       	cpc	r21, r25
    1704:	6a 07       	cpc	r22, r26
    1706:	7b 07       	cpc	r23, r27
    1708:	51 f4       	brne	.+20     	; 0x171e <PWM_gen+0x94>
	{
		DIO_WRITEPIN(PWM_Pin1,LOW);
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	8c e1       	ldi	r24, 0x1C	; 28
    170e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
		DIO_WRITEPIN(PWM_Pin2,LOW);
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	8d e1       	ldi	r24, 0x1D	; 29
    1716:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_WRITEPIN>
		PWM_Count=0;
    171a:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <PWM_Count>
	}
	timer0_set(6);
    171e:	86 e0       	ldi	r24, 0x06	; 6
    1720:	82 bf       	out	0x32, r24	; 50
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	08 95       	ret

00001728 <PWM_duty>:
static volatile uint32_t PWM_count_OFF=0;
static volatile uint8_t PWM_Count=0;
static void PWM_gen();

void PWM_duty(uint8_t duty)
{
    1728:	cf 92       	push	r12
    172a:	df 92       	push	r13
    172c:	ef 92       	push	r14
    172e:	ff 92       	push	r15
    1730:	cf 93       	push	r28
    1732:	c8 2f       	mov	r28, r24
	uint32_t temp=0;
	temp=((f32)1/PWM_F)*((f32)duty/100)*1000*1000;
	PWM_count_ON=temp/250;
    1734:	68 2f       	mov	r22, r24
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__floatunsisf>
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	48 ec       	ldi	r20, 0xC8	; 200
    1746:	52 e4       	ldi	r21, 0x42	; 66
    1748:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__divsf3>
    174c:	2a e0       	ldi	r18, 0x0A	; 10
    174e:	37 ed       	ldi	r19, 0xD7	; 215
    1750:	43 e2       	ldi	r20, 0x23	; 35
    1752:	5b e3       	ldi	r21, 0x3B	; 59
    1754:	0e 94 67 10 	call	0x20ce	; 0x20ce <__mulsf3>
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	4a e7       	ldi	r20, 0x7A	; 122
    175e:	54 e4       	ldi	r21, 0x44	; 68
    1760:	0e 94 67 10 	call	0x20ce	; 0x20ce <__mulsf3>
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	4a e7       	ldi	r20, 0x7A	; 122
    176a:	54 e4       	ldi	r21, 0x44	; 68
    176c:	0e 94 67 10 	call	0x20ce	; 0x20ce <__mulsf3>
    1770:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__fixunssfsi>
    1774:	0f 2e       	mov	r0, r31
    1776:	fa ef       	ldi	r31, 0xFA	; 250
    1778:	cf 2e       	mov	r12, r31
    177a:	d1 2c       	mov	r13, r1
    177c:	e1 2c       	mov	r14, r1
    177e:	f1 2c       	mov	r15, r1
    1780:	f0 2d       	mov	r31, r0
    1782:	a7 01       	movw	r20, r14
    1784:	96 01       	movw	r18, r12
    1786:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__udivmodsi4>
    178a:	20 93 6e 01 	sts	0x016E, r18	; 0x80016e <PWM_count_ON>
    178e:	30 93 6f 01 	sts	0x016F, r19	; 0x80016f <PWM_count_ON+0x1>
    1792:	40 93 70 01 	sts	0x0170, r20	; 0x800170 <PWM_count_ON+0x2>
    1796:	50 93 71 01 	sts	0x0171, r21	; 0x800171 <PWM_count_ON+0x3>
	temp=((f32)1/PWM_F)*((f32)(100-duty)/100)*1000*1000;
	PWM_count_OFF=temp/250;
    179a:	64 e6       	ldi	r22, 0x64	; 100
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	6c 1b       	sub	r22, r28
    17a0:	71 09       	sbc	r23, r1
    17a2:	07 2e       	mov	r0, r23
    17a4:	00 0c       	add	r0, r0
    17a6:	88 0b       	sbc	r24, r24
    17a8:	99 0b       	sbc	r25, r25
    17aa:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__floatsisf>
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	48 ec       	ldi	r20, 0xC8	; 200
    17b4:	52 e4       	ldi	r21, 0x42	; 66
    17b6:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__divsf3>
    17ba:	2a e0       	ldi	r18, 0x0A	; 10
    17bc:	37 ed       	ldi	r19, 0xD7	; 215
    17be:	43 e2       	ldi	r20, 0x23	; 35
    17c0:	5b e3       	ldi	r21, 0x3B	; 59
    17c2:	0e 94 67 10 	call	0x20ce	; 0x20ce <__mulsf3>
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	4a e7       	ldi	r20, 0x7A	; 122
    17cc:	54 e4       	ldi	r21, 0x44	; 68
    17ce:	0e 94 67 10 	call	0x20ce	; 0x20ce <__mulsf3>
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4a e7       	ldi	r20, 0x7A	; 122
    17d8:	54 e4       	ldi	r21, 0x44	; 68
    17da:	0e 94 67 10 	call	0x20ce	; 0x20ce <__mulsf3>
    17de:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__fixunssfsi>
    17e2:	a7 01       	movw	r20, r14
    17e4:	96 01       	movw	r18, r12
    17e6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__udivmodsi4>
    17ea:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <PWM_count_OFF>
    17ee:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <PWM_count_OFF+0x1>
    17f2:	40 93 6c 01 	sts	0x016C, r20	; 0x80016c <PWM_count_OFF+0x2>
    17f6:	50 93 6d 01 	sts	0x016D, r21	; 0x80016d <PWM_count_OFF+0x3>
	PWM_Count=0;
    17fa:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <PWM_Count>
	TIMER0_OV_SetCallBack(PWM_gen);
    17fe:	85 e4       	ldi	r24, 0x45	; 69
    1800:	9b e0       	ldi	r25, 0x0B	; 11
    1802:	0e 94 89 0c 	call	0x1912	; 0x1912 <TIMER0_OV_SetCallBack>
	TIMER0_OV_InterruptEnable();
    1806:	0e 94 85 0c 	call	0x190a	; 0x190a <TIMER0_OV_InterruptEnable>
	timer0_set(6);
    180a:	86 e0       	ldi	r24, 0x06	; 6
    180c:	82 bf       	out	0x32, r24	; 50
	TIMER_0_init();
    180e:	0e 94 11 0c 	call	0x1822	; 0x1822 <TIMER_0_init>
	TIMER_0_start();
    1812:	0e 94 3d 0c 	call	0x187a	; 0x187a <TIMER_0_start>
}
    1816:	cf 91       	pop	r28
    1818:	ff 90       	pop	r15
    181a:	ef 90       	pop	r14
    181c:	df 90       	pop	r13
    181e:	cf 90       	pop	r12
    1820:	08 95       	ret

00001822 <TIMER_0_init>:
		TCNT2 = a_value ;
		}else{
		errorStatus = INVALID_VALUE;
	}
	return errorStatus ;
}
    1822:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <Timer_cfgArray>
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	f1 f0       	breq	.+60     	; 0x1866 <TIMER_0_init+0x44>
    182a:	28 f0       	brcs	.+10     	; 0x1836 <TIMER_0_init+0x14>
    182c:	82 30       	cpi	r24, 0x02	; 2
    182e:	99 f0       	breq	.+38     	; 0x1856 <TIMER_0_init+0x34>
    1830:	84 30       	cpi	r24, 0x04	; 4
    1832:	49 f0       	breq	.+18     	; 0x1846 <TIMER_0_init+0x24>
    1834:	20 c0       	rjmp	.+64     	; 0x1876 <TIMER_0_init+0x54>
    1836:	83 b7       	in	r24, 0x33	; 51
    1838:	8f 7b       	andi	r24, 0xBF	; 191
    183a:	83 bf       	out	0x33, r24	; 51
    183c:	83 b7       	in	r24, 0x33	; 51
    183e:	87 7f       	andi	r24, 0xF7	; 247
    1840:	83 bf       	out	0x33, r24	; 51
    1842:	84 e0       	ldi	r24, 0x04	; 4
    1844:	08 95       	ret
    1846:	83 b7       	in	r24, 0x33	; 51
    1848:	80 64       	ori	r24, 0x40	; 64
    184a:	83 bf       	out	0x33, r24	; 51
    184c:	83 b7       	in	r24, 0x33	; 51
    184e:	87 7f       	andi	r24, 0xF7	; 247
    1850:	83 bf       	out	0x33, r24	; 51
    1852:	84 e0       	ldi	r24, 0x04	; 4
    1854:	08 95       	ret
    1856:	83 b7       	in	r24, 0x33	; 51
    1858:	8f 7b       	andi	r24, 0xBF	; 191
    185a:	83 bf       	out	0x33, r24	; 51
    185c:	83 b7       	in	r24, 0x33	; 51
    185e:	88 60       	ori	r24, 0x08	; 8
    1860:	83 bf       	out	0x33, r24	; 51
    1862:	84 e0       	ldi	r24, 0x04	; 4
    1864:	08 95       	ret
    1866:	83 b7       	in	r24, 0x33	; 51
    1868:	80 64       	ori	r24, 0x40	; 64
    186a:	83 bf       	out	0x33, r24	; 51
    186c:	83 b7       	in	r24, 0x33	; 51
    186e:	88 60       	ori	r24, 0x08	; 8
    1870:	83 bf       	out	0x33, r24	; 51
    1872:	84 e0       	ldi	r24, 0x04	; 4
    1874:	08 95       	ret
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	08 95       	ret

0000187a <TIMER_0_start>:
    187a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Timer_cfgArray+0x1>
    187e:	83 30       	cpi	r24, 0x03	; 3
    1880:	09 f1       	breq	.+66     	; 0x18c4 <TIMER_0_start+0x4a>
    1882:	28 f4       	brcc	.+10     	; 0x188e <TIMER_0_start+0x14>
    1884:	88 23       	and	r24, r24
    1886:	41 f0       	breq	.+16     	; 0x1898 <TIMER_0_start+0x1e>
    1888:	82 30       	cpi	r24, 0x02	; 2
    188a:	89 f0       	breq	.+34     	; 0x18ae <TIMER_0_start+0x34>
    188c:	3c c0       	rjmp	.+120    	; 0x1906 <TIMER_0_start+0x8c>
    188e:	86 30       	cpi	r24, 0x06	; 6
    1890:	21 f1       	breq	.+72     	; 0x18da <TIMER_0_start+0x60>
    1892:	87 30       	cpi	r24, 0x07	; 7
    1894:	69 f1       	breq	.+90     	; 0x18f0 <TIMER_0_start+0x76>
    1896:	37 c0       	rjmp	.+110    	; 0x1906 <TIMER_0_start+0x8c>
    1898:	83 b7       	in	r24, 0x33	; 51
    189a:	81 60       	ori	r24, 0x01	; 1
    189c:	83 bf       	out	0x33, r24	; 51
    189e:	83 b7       	in	r24, 0x33	; 51
    18a0:	8d 7f       	andi	r24, 0xFD	; 253
    18a2:	83 bf       	out	0x33, r24	; 51
    18a4:	83 b7       	in	r24, 0x33	; 51
    18a6:	8b 7f       	andi	r24, 0xFB	; 251
    18a8:	83 bf       	out	0x33, r24	; 51
    18aa:	84 e0       	ldi	r24, 0x04	; 4
    18ac:	08 95       	ret
    18ae:	83 b7       	in	r24, 0x33	; 51
    18b0:	82 60       	ori	r24, 0x02	; 2
    18b2:	83 bf       	out	0x33, r24	; 51
    18b4:	83 b7       	in	r24, 0x33	; 51
    18b6:	8e 7f       	andi	r24, 0xFE	; 254
    18b8:	83 bf       	out	0x33, r24	; 51
    18ba:	83 b7       	in	r24, 0x33	; 51
    18bc:	8b 7f       	andi	r24, 0xFB	; 251
    18be:	83 bf       	out	0x33, r24	; 51
    18c0:	84 e0       	ldi	r24, 0x04	; 4
    18c2:	08 95       	ret
    18c4:	83 b7       	in	r24, 0x33	; 51
    18c6:	81 60       	ori	r24, 0x01	; 1
    18c8:	83 bf       	out	0x33, r24	; 51
    18ca:	83 b7       	in	r24, 0x33	; 51
    18cc:	82 60       	ori	r24, 0x02	; 2
    18ce:	83 bf       	out	0x33, r24	; 51
    18d0:	83 b7       	in	r24, 0x33	; 51
    18d2:	8b 7f       	andi	r24, 0xFB	; 251
    18d4:	83 bf       	out	0x33, r24	; 51
    18d6:	84 e0       	ldi	r24, 0x04	; 4
    18d8:	08 95       	ret
    18da:	83 b7       	in	r24, 0x33	; 51
    18dc:	84 60       	ori	r24, 0x04	; 4
    18de:	83 bf       	out	0x33, r24	; 51
    18e0:	83 b7       	in	r24, 0x33	; 51
    18e2:	8d 7f       	andi	r24, 0xFD	; 253
    18e4:	83 bf       	out	0x33, r24	; 51
    18e6:	83 b7       	in	r24, 0x33	; 51
    18e8:	8e 7f       	andi	r24, 0xFE	; 254
    18ea:	83 bf       	out	0x33, r24	; 51
    18ec:	84 e0       	ldi	r24, 0x04	; 4
    18ee:	08 95       	ret
    18f0:	83 b7       	in	r24, 0x33	; 51
    18f2:	81 60       	ori	r24, 0x01	; 1
    18f4:	83 bf       	out	0x33, r24	; 51
    18f6:	83 b7       	in	r24, 0x33	; 51
    18f8:	8d 7f       	andi	r24, 0xFD	; 253
    18fa:	83 bf       	out	0x33, r24	; 51
    18fc:	83 b7       	in	r24, 0x33	; 51
    18fe:	84 60       	ori	r24, 0x04	; 4
    1900:	83 bf       	out	0x33, r24	; 51
    1902:	84 e0       	ldi	r24, 0x04	; 4
    1904:	08 95       	ret
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	08 95       	ret

0000190a <TIMER0_OV_InterruptEnable>:
    190a:	89 b7       	in	r24, 0x39	; 57
    190c:	81 60       	ori	r24, 0x01	; 1
    190e:	89 bf       	out	0x39, r24	; 57
    1910:	08 95       	ret

00001912 <TIMER0_OV_SetCallBack>:
    1912:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <Timer0_OVF_Fptr+0x1>
    1916:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <Timer0_OVF_Fptr>
    191a:	08 95       	ret

0000191c <__vector_11>:
    191c:	1f 92       	push	r1
    191e:	0f 92       	push	r0
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	0f 92       	push	r0
    1924:	11 24       	eor	r1, r1
    1926:	2f 93       	push	r18
    1928:	3f 93       	push	r19
    192a:	4f 93       	push	r20
    192c:	5f 93       	push	r21
    192e:	6f 93       	push	r22
    1930:	7f 93       	push	r23
    1932:	8f 93       	push	r24
    1934:	9f 93       	push	r25
    1936:	af 93       	push	r26
    1938:	bf 93       	push	r27
    193a:	ef 93       	push	r30
    193c:	ff 93       	push	r31
    193e:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <Timer0_OVF_Fptr>
    1942:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <Timer0_OVF_Fptr+0x1>
    1946:	30 97       	sbiw	r30, 0x00	; 0
    1948:	09 f0       	breq	.+2      	; 0x194c <__vector_11+0x30>
    194a:	09 95       	icall
    194c:	ff 91       	pop	r31
    194e:	ef 91       	pop	r30
    1950:	bf 91       	pop	r27
    1952:	af 91       	pop	r26
    1954:	9f 91       	pop	r25
    1956:	8f 91       	pop	r24
    1958:	7f 91       	pop	r23
    195a:	6f 91       	pop	r22
    195c:	5f 91       	pop	r21
    195e:	4f 91       	pop	r20
    1960:	3f 91       	pop	r19
    1962:	2f 91       	pop	r18
    1964:	0f 90       	pop	r0
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	0f 90       	pop	r0
    196a:	1f 90       	pop	r1
    196c:	18 95       	reti

0000196e <Timer1_Init>:
    196e:	88 23       	and	r24, r24
    1970:	19 f0       	breq	.+6      	; 0x1978 <Timer1_Init+0xa>
    1972:	83 30       	cpi	r24, 0x03	; 3
    1974:	71 f0       	breq	.+28     	; 0x1992 <Timer1_Init+0x24>
    1976:	19 c0       	rjmp	.+50     	; 0x19aa <Timer1_Init+0x3c>
    1978:	8f b5       	in	r24, 0x2f	; 47
    197a:	8e 7f       	andi	r24, 0xFE	; 254
    197c:	8f bd       	out	0x2f, r24	; 47
    197e:	8f b5       	in	r24, 0x2f	; 47
    1980:	8d 7f       	andi	r24, 0xFD	; 253
    1982:	8f bd       	out	0x2f, r24	; 47
    1984:	8e b5       	in	r24, 0x2e	; 46
    1986:	87 7f       	andi	r24, 0xF7	; 247
    1988:	8e bd       	out	0x2e, r24	; 46
    198a:	8e b5       	in	r24, 0x2e	; 46
    198c:	8f 7e       	andi	r24, 0xEF	; 239
    198e:	8e bd       	out	0x2e, r24	; 46
    1990:	0c c0       	rjmp	.+24     	; 0x19aa <Timer1_Init+0x3c>
    1992:	8f b5       	in	r24, 0x2f	; 47
    1994:	81 60       	ori	r24, 0x01	; 1
    1996:	8f bd       	out	0x2f, r24	; 47
    1998:	8f b5       	in	r24, 0x2f	; 47
    199a:	82 60       	ori	r24, 0x02	; 2
    199c:	8f bd       	out	0x2f, r24	; 47
    199e:	8e b5       	in	r24, 0x2e	; 46
    19a0:	88 60       	ori	r24, 0x08	; 8
    19a2:	8e bd       	out	0x2e, r24	; 46
    19a4:	8e b5       	in	r24, 0x2e	; 46
    19a6:	80 61       	ori	r24, 0x10	; 16
    19a8:	8e bd       	out	0x2e, r24	; 46
    19aa:	8e b5       	in	r24, 0x2e	; 46
    19ac:	88 7f       	andi	r24, 0xF8	; 248
    19ae:	8e bd       	out	0x2e, r24	; 46
    19b0:	8e b5       	in	r24, 0x2e	; 46
    19b2:	68 2b       	or	r22, r24
    19b4:	6e bd       	out	0x2e, r22	; 46
    19b6:	08 95       	ret

000019b8 <Timer1_OVF_InterruptEnable>:
    19b8:	89 b7       	in	r24, 0x39	; 57
    19ba:	84 60       	ori	r24, 0x04	; 4
    19bc:	89 bf       	out	0x39, r24	; 57
    19be:	08 95       	ret

000019c0 <Timer1_OVF_SetCallBack>:
    19c0:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <Timer1_OVF_Fptr+0x1>
    19c4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <Timer1_OVF_Fptr>
    19c8:	08 95       	ret

000019ca <__vector_9>:
    19ca:	1f 92       	push	r1
    19cc:	0f 92       	push	r0
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	0f 92       	push	r0
    19d2:	11 24       	eor	r1, r1
    19d4:	2f 93       	push	r18
    19d6:	3f 93       	push	r19
    19d8:	4f 93       	push	r20
    19da:	5f 93       	push	r21
    19dc:	6f 93       	push	r22
    19de:	7f 93       	push	r23
    19e0:	8f 93       	push	r24
    19e2:	9f 93       	push	r25
    19e4:	af 93       	push	r26
    19e6:	bf 93       	push	r27
    19e8:	ef 93       	push	r30
    19ea:	ff 93       	push	r31
    19ec:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <Timer1_OVF_Fptr>
    19f0:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <Timer1_OVF_Fptr+0x1>
    19f4:	30 97       	sbiw	r30, 0x00	; 0
    19f6:	09 f0       	breq	.+2      	; 0x19fa <__vector_9+0x30>
    19f8:	09 95       	icall
    19fa:	ff 91       	pop	r31
    19fc:	ef 91       	pop	r30
    19fe:	bf 91       	pop	r27
    1a00:	af 91       	pop	r26
    1a02:	9f 91       	pop	r25
    1a04:	8f 91       	pop	r24
    1a06:	7f 91       	pop	r23
    1a08:	6f 91       	pop	r22
    1a0a:	5f 91       	pop	r21
    1a0c:	4f 91       	pop	r20
    1a0e:	3f 91       	pop	r19
    1a10:	2f 91       	pop	r18
    1a12:	0f 90       	pop	r0
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	0f 90       	pop	r0
    1a18:	1f 90       	pop	r1
    1a1a:	18 95       	reti

00001a1c <TIMER_2_init>:
    1a1c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <Timer_cfgArray+0x4>
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	f1 f0       	breq	.+60     	; 0x1a60 <TIMER_2_init+0x44>
    1a24:	28 f0       	brcs	.+10     	; 0x1a30 <TIMER_2_init+0x14>
    1a26:	82 30       	cpi	r24, 0x02	; 2
    1a28:	99 f0       	breq	.+38     	; 0x1a50 <TIMER_2_init+0x34>
    1a2a:	84 30       	cpi	r24, 0x04	; 4
    1a2c:	49 f0       	breq	.+18     	; 0x1a40 <TIMER_2_init+0x24>
    1a2e:	20 c0       	rjmp	.+64     	; 0x1a70 <TIMER_2_init+0x54>
    1a30:	85 b5       	in	r24, 0x25	; 37
    1a32:	8f 7b       	andi	r24, 0xBF	; 191
    1a34:	85 bd       	out	0x25, r24	; 37
    1a36:	85 b5       	in	r24, 0x25	; 37
    1a38:	87 7f       	andi	r24, 0xF7	; 247
    1a3a:	85 bd       	out	0x25, r24	; 37
    1a3c:	84 e0       	ldi	r24, 0x04	; 4
    1a3e:	08 95       	ret
    1a40:	85 b5       	in	r24, 0x25	; 37
    1a42:	80 64       	ori	r24, 0x40	; 64
    1a44:	85 bd       	out	0x25, r24	; 37
    1a46:	85 b5       	in	r24, 0x25	; 37
    1a48:	87 7f       	andi	r24, 0xF7	; 247
    1a4a:	85 bd       	out	0x25, r24	; 37
    1a4c:	84 e0       	ldi	r24, 0x04	; 4
    1a4e:	08 95       	ret
    1a50:	85 b5       	in	r24, 0x25	; 37
    1a52:	8f 7b       	andi	r24, 0xBF	; 191
    1a54:	85 bd       	out	0x25, r24	; 37
    1a56:	85 b5       	in	r24, 0x25	; 37
    1a58:	88 60       	ori	r24, 0x08	; 8
    1a5a:	85 bd       	out	0x25, r24	; 37
    1a5c:	84 e0       	ldi	r24, 0x04	; 4
    1a5e:	08 95       	ret
    1a60:	85 b5       	in	r24, 0x25	; 37
    1a62:	80 64       	ori	r24, 0x40	; 64
    1a64:	85 bd       	out	0x25, r24	; 37
    1a66:	85 b5       	in	r24, 0x25	; 37
    1a68:	88 60       	ori	r24, 0x08	; 8
    1a6a:	85 bd       	out	0x25, r24	; 37
    1a6c:	84 e0       	ldi	r24, 0x04	; 4
    1a6e:	08 95       	ret
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	08 95       	ret

00001a74 <TIMER_2_stop>:
    1a74:	85 b5       	in	r24, 0x25	; 37
    1a76:	8e 7f       	andi	r24, 0xFE	; 254
    1a78:	85 bd       	out	0x25, r24	; 37
    1a7a:	85 b5       	in	r24, 0x25	; 37
    1a7c:	8d 7f       	andi	r24, 0xFD	; 253
    1a7e:	85 bd       	out	0x25, r24	; 37
    1a80:	85 b5       	in	r24, 0x25	; 37
    1a82:	8b 7f       	andi	r24, 0xFB	; 251
    1a84:	85 bd       	out	0x25, r24	; 37
    1a86:	08 95       	ret

00001a88 <TIMER_2_start>:


Timer_ErrorStatus TIMER_2_start(){
	Timer_ErrorStatus errorStatus = TIMER_OK;
	
	switch(Timer_cfgArray[TIMER_2].prescaler){
    1a88:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <Timer_cfgArray+0x5>
    1a8c:	8e 2f       	mov	r24, r30
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	88 30       	cpi	r24, 0x08	; 8
    1a92:	91 05       	cpc	r25, r1
    1a94:	08 f0       	brcs	.+2      	; 0x1a98 <TIMER_2_start+0x10>
    1a96:	52 c0       	rjmp	.+164    	; 0x1b3c <TIMER_2_start+0xb4>
    1a98:	fc 01       	movw	r30, r24
    1a9a:	e6 5d       	subi	r30, 0xD6	; 214
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__tablejump2__>
		
		case PRECALER_1 :
		set_bit(TCCR2,CS20);
    1aa2:	85 b5       	in	r24, 0x25	; 37
    1aa4:	81 60       	ori	r24, 0x01	; 1
    1aa6:	85 bd       	out	0x25, r24	; 37
		clear_bit(TCCR2,CS21);
    1aa8:	85 b5       	in	r24, 0x25	; 37
    1aaa:	8d 7f       	andi	r24, 0xFD	; 253
    1aac:	85 bd       	out	0x25, r24	; 37
		clear_bit(TCCR2,CS22);
    1aae:	85 b5       	in	r24, 0x25	; 37
    1ab0:	8b 7f       	andi	r24, 0xFB	; 251
    1ab2:	85 bd       	out	0x25, r24	; 37
}



Timer_ErrorStatus TIMER_2_start(){
	Timer_ErrorStatus errorStatus = TIMER_OK;
    1ab4:	84 e0       	ldi	r24, 0x04	; 4
		
		case PRECALER_1 :
		set_bit(TCCR2,CS20);
		clear_bit(TCCR2,CS21);
		clear_bit(TCCR2,CS22);
		break;
    1ab6:	08 95       	ret
		
		case PRECALER_8 :
		set_bit(TCCR2,CS21);
    1ab8:	85 b5       	in	r24, 0x25	; 37
    1aba:	82 60       	ori	r24, 0x02	; 2
    1abc:	85 bd       	out	0x25, r24	; 37
		clear_bit(TCCR2,CS20);
    1abe:	85 b5       	in	r24, 0x25	; 37
    1ac0:	8e 7f       	andi	r24, 0xFE	; 254
    1ac2:	85 bd       	out	0x25, r24	; 37
		clear_bit(TCCR2,CS22);
    1ac4:	85 b5       	in	r24, 0x25	; 37
    1ac6:	8b 7f       	andi	r24, 0xFB	; 251
    1ac8:	85 bd       	out	0x25, r24	; 37
}



Timer_ErrorStatus TIMER_2_start(){
	Timer_ErrorStatus errorStatus = TIMER_OK;
    1aca:	84 e0       	ldi	r24, 0x04	; 4
		
		case PRECALER_8 :
		set_bit(TCCR2,CS21);
		clear_bit(TCCR2,CS20);
		clear_bit(TCCR2,CS22);
		break;
    1acc:	08 95       	ret
		
		case PRECALER_32 :
		set_bit(TCCR2,CS20);
    1ace:	85 b5       	in	r24, 0x25	; 37
    1ad0:	81 60       	ori	r24, 0x01	; 1
    1ad2:	85 bd       	out	0x25, r24	; 37
		set_bit(TCCR2,CS21);
    1ad4:	85 b5       	in	r24, 0x25	; 37
    1ad6:	82 60       	ori	r24, 0x02	; 2
    1ad8:	85 bd       	out	0x25, r24	; 37
		clear_bit(TCCR2,CS22);
    1ada:	85 b5       	in	r24, 0x25	; 37
    1adc:	8b 7f       	andi	r24, 0xFB	; 251
    1ade:	85 bd       	out	0x25, r24	; 37
}



Timer_ErrorStatus TIMER_2_start(){
	Timer_ErrorStatus errorStatus = TIMER_OK;
    1ae0:	84 e0       	ldi	r24, 0x04	; 4
		
		case PRECALER_32 :
		set_bit(TCCR2,CS20);
		set_bit(TCCR2,CS21);
		clear_bit(TCCR2,CS22);
		break;
    1ae2:	08 95       	ret
		
		case PRECALER_64 :
		set_bit(TCCR2,CS22);
    1ae4:	85 b5       	in	r24, 0x25	; 37
    1ae6:	84 60       	ori	r24, 0x04	; 4
    1ae8:	85 bd       	out	0x25, r24	; 37
		clear_bit(TCCR2,CS21);
    1aea:	85 b5       	in	r24, 0x25	; 37
    1aec:	8d 7f       	andi	r24, 0xFD	; 253
    1aee:	85 bd       	out	0x25, r24	; 37
		clear_bit(TCCR2,CS20);
    1af0:	85 b5       	in	r24, 0x25	; 37
    1af2:	8e 7f       	andi	r24, 0xFE	; 254
    1af4:	85 bd       	out	0x25, r24	; 37
}



Timer_ErrorStatus TIMER_2_start(){
	Timer_ErrorStatus errorStatus = TIMER_OK;
    1af6:	84 e0       	ldi	r24, 0x04	; 4
		
		case PRECALER_64 :
		set_bit(TCCR2,CS22);
		clear_bit(TCCR2,CS21);
		clear_bit(TCCR2,CS20);
		break;
    1af8:	08 95       	ret
		
		case PRECALER_128 :
		set_bit(TCCR2,CS20);
    1afa:	85 b5       	in	r24, 0x25	; 37
    1afc:	81 60       	ori	r24, 0x01	; 1
    1afe:	85 bd       	out	0x25, r24	; 37
		clear_bit(TCCR2,CS21);
    1b00:	85 b5       	in	r24, 0x25	; 37
    1b02:	8d 7f       	andi	r24, 0xFD	; 253
    1b04:	85 bd       	out	0x25, r24	; 37
		set_bit(TCCR2,CS22);
    1b06:	85 b5       	in	r24, 0x25	; 37
    1b08:	84 60       	ori	r24, 0x04	; 4
    1b0a:	85 bd       	out	0x25, r24	; 37
}



Timer_ErrorStatus TIMER_2_start(){
	Timer_ErrorStatus errorStatus = TIMER_OK;
    1b0c:	84 e0       	ldi	r24, 0x04	; 4
		
		case PRECALER_128 :
		set_bit(TCCR2,CS20);
		clear_bit(TCCR2,CS21);
		set_bit(TCCR2,CS22);
		break;
    1b0e:	08 95       	ret
		
		case PRECALER_256 :
		set_bit(TCCR2,CS22);
    1b10:	85 b5       	in	r24, 0x25	; 37
    1b12:	84 60       	ori	r24, 0x04	; 4
    1b14:	85 bd       	out	0x25, r24	; 37
		clear_bit(TCCR2,CS20);
    1b16:	85 b5       	in	r24, 0x25	; 37
    1b18:	8e 7f       	andi	r24, 0xFE	; 254
    1b1a:	85 bd       	out	0x25, r24	; 37
		set_bit(TCCR2,CS21);
    1b1c:	85 b5       	in	r24, 0x25	; 37
    1b1e:	82 60       	ori	r24, 0x02	; 2
    1b20:	85 bd       	out	0x25, r24	; 37
}



Timer_ErrorStatus TIMER_2_start(){
	Timer_ErrorStatus errorStatus = TIMER_OK;
    1b22:	84 e0       	ldi	r24, 0x04	; 4
		
		case PRECALER_256 :
		set_bit(TCCR2,CS22);
		clear_bit(TCCR2,CS20);
		set_bit(TCCR2,CS21);
		break;
    1b24:	08 95       	ret
			
		case PRECALER_1024 :
		set_bit(TCCR2,CS20);
    1b26:	85 b5       	in	r24, 0x25	; 37
    1b28:	81 60       	ori	r24, 0x01	; 1
    1b2a:	85 bd       	out	0x25, r24	; 37
		set_bit(TCCR2,CS21);
    1b2c:	85 b5       	in	r24, 0x25	; 37
    1b2e:	82 60       	ori	r24, 0x02	; 2
    1b30:	85 bd       	out	0x25, r24	; 37
		set_bit(TCCR2,CS22);
    1b32:	85 b5       	in	r24, 0x25	; 37
    1b34:	84 60       	ori	r24, 0x04	; 4
    1b36:	85 bd       	out	0x25, r24	; 37
}



Timer_ErrorStatus TIMER_2_start(){
	Timer_ErrorStatus errorStatus = TIMER_OK;
    1b38:	84 e0       	ldi	r24, 0x04	; 4
			
		case PRECALER_1024 :
		set_bit(TCCR2,CS20);
		set_bit(TCCR2,CS21);
		set_bit(TCCR2,CS22);
		break;
    1b3a:	08 95       	ret
		
		
		default:
		errorStatus= INVALID_PRESCALER;
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	
	return errorStatus ;
}
    1b3e:	08 95       	ret

00001b40 <TIMER_2_OvfNum>:



Timer_ErrorStatus TIMER_2_OvfNum(double overflow){
    1b40:	8f 92       	push	r8
    1b42:	9f 92       	push	r9
    1b44:	af 92       	push	r10
    1b46:	bf 92       	push	r11
    1b48:	cf 92       	push	r12
    1b4a:	df 92       	push	r13
    1b4c:	ef 92       	push	r14
    1b4e:	ff 92       	push	r15
    1b50:	4b 01       	movw	r8, r22
    1b52:	5c 01       	movw	r10, r24
	Timer_ErrorStatus errorStatus = TIMER_OK;
	double num_ovf = 0;
	if (overflow > 0)
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	a9 01       	movw	r20, r18
    1b5a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__gesf2>
    1b5e:	18 16       	cp	r1, r24
    1b60:	ec f4       	brge	.+58     	; 0x1b9c <TIMER_2_OvfNum+0x5c>
    1b62:	c1 2c       	mov	r12, r1
    1b64:	d1 2c       	mov	r13, r1
    1b66:	76 01       	movw	r14, r12
	{
		
		while(num_ovf<overflow){
			
			while(read_bit(TIFR,TOV2)==0);
    1b68:	08 b6       	in	r0, 0x38	; 56
    1b6a:	06 fe       	sbrs	r0, 6
    1b6c:	fd cf       	rjmp	.-6      	; 0x1b68 <TIMER_2_OvfNum+0x28>
			set_bit(TIFR,TOV2);
    1b6e:	88 b7       	in	r24, 0x38	; 56
    1b70:	80 64       	ori	r24, 0x40	; 64
    1b72:	88 bf       	out	0x38, r24	; 56
			num_ovf++;
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e8       	ldi	r20, 0x80	; 128
    1b7a:	5f e3       	ldi	r21, 0x3F	; 63
    1b7c:	c7 01       	movw	r24, r14
    1b7e:	b6 01       	movw	r22, r12
    1b80:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__addsf3>
    1b84:	6b 01       	movw	r12, r22
    1b86:	7c 01       	movw	r14, r24
	Timer_ErrorStatus errorStatus = TIMER_OK;
	double num_ovf = 0;
	if (overflow > 0)
	{
		
		while(num_ovf<overflow){
    1b88:	9b 01       	movw	r18, r22
    1b8a:	ac 01       	movw	r20, r24
    1b8c:	c5 01       	movw	r24, r10
    1b8e:	b4 01       	movw	r22, r8
    1b90:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__gesf2>
    1b94:	18 16       	cp	r1, r24
    1b96:	44 f3       	brlt	.-48     	; 0x1b68 <TIMER_2_OvfNum+0x28>
}



Timer_ErrorStatus TIMER_2_OvfNum(double overflow){
	Timer_ErrorStatus errorStatus = TIMER_OK;
    1b98:	84 e0       	ldi	r24, 0x04	; 4
    1b9a:	12 c0       	rjmp	.+36     	; 0x1bc0 <TIMER_2_OvfNum+0x80>
			while(read_bit(TIFR,TOV2)==0);
			set_bit(TIFR,TOV2);
			num_ovf++;
		}
		num_ovf = 0;
	}else if (overflow <= 0)
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	a9 01       	movw	r20, r18
    1ba2:	c5 01       	movw	r24, r10
    1ba4:	b4 01       	movw	r22, r8
    1ba6:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__cmpsf2>
    1baa:	18 16       	cp	r1, r24
    1bac:	44 f0       	brlt	.+16     	; 0x1bbe <TIMER_2_OvfNum+0x7e>
	{
		overflow = 1 ;
		while(num_ovf<overflow){
			
			while(read_bit(TIFR,TOV2)==0);
    1bae:	08 b6       	in	r0, 0x38	; 56
    1bb0:	06 fe       	sbrs	r0, 6
    1bb2:	fd cf       	rjmp	.-6      	; 0x1bae <TIMER_2_OvfNum+0x6e>
			set_bit(TIFR,TOV2);
    1bb4:	88 b7       	in	r24, 0x38	; 56
    1bb6:	80 64       	ori	r24, 0x40	; 64
    1bb8:	88 bf       	out	0x38, r24	; 56
}



Timer_ErrorStatus TIMER_2_OvfNum(double overflow){
	Timer_ErrorStatus errorStatus = TIMER_OK;
    1bba:	84 e0       	ldi	r24, 0x04	; 4
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <TIMER_2_OvfNum+0x80>
		}
		num_ovf = 0;
	}
	
	else{
		errorStatus = INVALID_OVF;
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return errorStatus;
}
    1bc0:	ff 90       	pop	r15
    1bc2:	ef 90       	pop	r14
    1bc4:	df 90       	pop	r13
    1bc6:	cf 90       	pop	r12
    1bc8:	bf 90       	pop	r11
    1bca:	af 90       	pop	r10
    1bcc:	9f 90       	pop	r9
    1bce:	8f 90       	pop	r8
    1bd0:	08 95       	ret

00001bd2 <TIMER_2_DELAY_MS>:



void TIMER_2_DELAY_MS(double time_ms){
    1bd2:	cf 92       	push	r12
    1bd4:	df 92       	push	r13
    1bd6:	ef 92       	push	r14
    1bd8:	ff 92       	push	r15
	double ovfNum2  ;
	double t2 ;
	t2 = time_ms/1000 ;
	ovfNum2 = ceil (t2 / 0.000256) ;
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	4a e7       	ldi	r20, 0x7A	; 122
    1be0:	54 e4       	ldi	r21, 0x44	; 68
    1be2:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__divsf3>
    1be6:	2d eb       	ldi	r18, 0xBD	; 189
    1be8:	37 e3       	ldi	r19, 0x37	; 55
    1bea:	46 e8       	ldi	r20, 0x86	; 134
    1bec:	59 e3       	ldi	r21, 0x39	; 57
    1bee:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__divsf3>
    1bf2:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <ceil>
    1bf6:	6b 01       	movw	r12, r22
    1bf8:	7c 01       	movw	r14, r24
	TIMER_2_init(NORMAL_MODE);
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <TIMER_2_init>
Timer_ErrorStatus TIMER_2_setIntialValue(uint8_t a_value){
	Timer_ErrorStatus errorStatus = TIMER_OK;

	if(a_value < TIMR2_MAX_VALUE && a_value >= 0){
		
		TCNT2 = a_value ;
    1c02:	14 bc       	out	0x24, r1	; 36
	double t2 ;
	t2 = time_ms/1000 ;
	ovfNum2 = ceil (t2 / 0.000256) ;
	TIMER_2_init(NORMAL_MODE);
	TIMER_2_setIntialValue(0);
	TIMER_2_start(PRECALER_1);
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <TIMER_2_start>
	TIMER_2_OvfNum(ovfNum2);
    1c0c:	c7 01       	movw	r24, r14
    1c0e:	b6 01       	movw	r22, r12
    1c10:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <TIMER_2_OvfNum>
	
}
    1c14:	ff 90       	pop	r15
    1c16:	ef 90       	pop	r14
    1c18:	df 90       	pop	r13
    1c1a:	cf 90       	pop	r12
    1c1c:	08 95       	ret

00001c1e <TIMER_2_INT>:




void TIMER_2_INT(){
	sei();
    1c1e:	78 94       	sei
	set_bit(TIMSK,TOIE2);
    1c20:	89 b7       	in	r24, 0x39	; 57
    1c22:	80 64       	ori	r24, 0x40	; 64
    1c24:	89 bf       	out	0x39, r24	; 57
	TIMER_2_init();
    1c26:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <TIMER_2_init>
Timer_ErrorStatus TIMER_2_setIntialValue(uint8_t a_value){
	Timer_ErrorStatus errorStatus = TIMER_OK;

	if(a_value < TIMR2_MAX_VALUE && a_value >= 0){
		
		TCNT2 = a_value ;
    1c2a:	14 bc       	out	0x24, r1	; 36
void TIMER_2_INT(){
	sei();
	set_bit(TIMSK,TOIE2);
	TIMER_2_init();
	TIMER_2_setIntialValue(0);
	TIMER_2_start();
    1c2c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <TIMER_2_start>
    1c30:	08 95       	ret

00001c32 <TIMER_2_SetCallBack>:

static void (*ptrf_TIMER_2)(void)=NULL;

void TIMER_2_SetCallBack(void(*ptrf)(void)){
	
	ptrf_TIMER_2 = ptrf;
    1c32:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <ptrf_TIMER_2+0x1>
    1c36:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <ptrf_TIMER_2>
    1c3a:	08 95       	ret

00001c3c <__vector_5>:
	
}

ISR(TIMER2_OVF){
    1c3c:	1f 92       	push	r1
    1c3e:	0f 92       	push	r0
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	0f 92       	push	r0
    1c44:	11 24       	eor	r1, r1
    1c46:	2f 93       	push	r18
    1c48:	3f 93       	push	r19
    1c4a:	4f 93       	push	r20
    1c4c:	5f 93       	push	r21
    1c4e:	6f 93       	push	r22
    1c50:	7f 93       	push	r23
    1c52:	8f 93       	push	r24
    1c54:	9f 93       	push	r25
    1c56:	af 93       	push	r26
    1c58:	bf 93       	push	r27
    1c5a:	ef 93       	push	r30
    1c5c:	ff 93       	push	r31
	
	
	ptrf_TIMER_2();
    1c5e:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <ptrf_TIMER_2>
    1c62:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <ptrf_TIMER_2+0x1>
    1c66:	09 95       	icall
	
	
    1c68:	ff 91       	pop	r31
    1c6a:	ef 91       	pop	r30
    1c6c:	bf 91       	pop	r27
    1c6e:	af 91       	pop	r26
    1c70:	9f 91       	pop	r25
    1c72:	8f 91       	pop	r24
    1c74:	7f 91       	pop	r23
    1c76:	6f 91       	pop	r22
    1c78:	5f 91       	pop	r21
    1c7a:	4f 91       	pop	r20
    1c7c:	3f 91       	pop	r19
    1c7e:	2f 91       	pop	r18
    1c80:	0f 90       	pop	r0
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	0f 90       	pop	r0
    1c86:	1f 90       	pop	r1
    1c88:	18 95       	reti

00001c8a <__subsf3>:
    1c8a:	50 58       	subi	r21, 0x80	; 128

00001c8c <__addsf3>:
    1c8c:	bb 27       	eor	r27, r27
    1c8e:	aa 27       	eor	r26, r26
    1c90:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__addsf3x>
    1c94:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__fp_round>
    1c98:	0e 94 02 10 	call	0x2004	; 0x2004 <__fp_pscA>
    1c9c:	38 f0       	brcs	.+14     	; 0x1cac <__addsf3+0x20>
    1c9e:	0e 94 09 10 	call	0x2012	; 0x2012 <__fp_pscB>
    1ca2:	20 f0       	brcs	.+8      	; 0x1cac <__addsf3+0x20>
    1ca4:	39 f4       	brne	.+14     	; 0x1cb4 <__addsf3+0x28>
    1ca6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ca8:	19 f4       	brne	.+6      	; 0x1cb0 <__addsf3+0x24>
    1caa:	26 f4       	brtc	.+8      	; 0x1cb4 <__addsf3+0x28>
    1cac:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__fp_nan>
    1cb0:	0e f4       	brtc	.+2      	; 0x1cb4 <__addsf3+0x28>
    1cb2:	e0 95       	com	r30
    1cb4:	e7 fb       	bst	r30, 7
    1cb6:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__fp_inf>

00001cba <__addsf3x>:
    1cba:	e9 2f       	mov	r30, r25
    1cbc:	0e 94 21 10 	call	0x2042	; 0x2042 <__fp_split3>
    1cc0:	58 f3       	brcs	.-42     	; 0x1c98 <__addsf3+0xc>
    1cc2:	ba 17       	cp	r27, r26
    1cc4:	62 07       	cpc	r22, r18
    1cc6:	73 07       	cpc	r23, r19
    1cc8:	84 07       	cpc	r24, r20
    1cca:	95 07       	cpc	r25, r21
    1ccc:	20 f0       	brcs	.+8      	; 0x1cd6 <__addsf3x+0x1c>
    1cce:	79 f4       	brne	.+30     	; 0x1cee <__addsf3x+0x34>
    1cd0:	a6 f5       	brtc	.+104    	; 0x1d3a <__addsf3x+0x80>
    1cd2:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__fp_zero>
    1cd6:	0e f4       	brtc	.+2      	; 0x1cda <__addsf3x+0x20>
    1cd8:	e0 95       	com	r30
    1cda:	0b 2e       	mov	r0, r27
    1cdc:	ba 2f       	mov	r27, r26
    1cde:	a0 2d       	mov	r26, r0
    1ce0:	0b 01       	movw	r0, r22
    1ce2:	b9 01       	movw	r22, r18
    1ce4:	90 01       	movw	r18, r0
    1ce6:	0c 01       	movw	r0, r24
    1ce8:	ca 01       	movw	r24, r20
    1cea:	a0 01       	movw	r20, r0
    1cec:	11 24       	eor	r1, r1
    1cee:	ff 27       	eor	r31, r31
    1cf0:	59 1b       	sub	r21, r25
    1cf2:	99 f0       	breq	.+38     	; 0x1d1a <__addsf3x+0x60>
    1cf4:	59 3f       	cpi	r21, 0xF9	; 249
    1cf6:	50 f4       	brcc	.+20     	; 0x1d0c <__addsf3x+0x52>
    1cf8:	50 3e       	cpi	r21, 0xE0	; 224
    1cfa:	68 f1       	brcs	.+90     	; 0x1d56 <__addsf3x+0x9c>
    1cfc:	1a 16       	cp	r1, r26
    1cfe:	f0 40       	sbci	r31, 0x00	; 0
    1d00:	a2 2f       	mov	r26, r18
    1d02:	23 2f       	mov	r18, r19
    1d04:	34 2f       	mov	r19, r20
    1d06:	44 27       	eor	r20, r20
    1d08:	58 5f       	subi	r21, 0xF8	; 248
    1d0a:	f3 cf       	rjmp	.-26     	; 0x1cf2 <__addsf3x+0x38>
    1d0c:	46 95       	lsr	r20
    1d0e:	37 95       	ror	r19
    1d10:	27 95       	ror	r18
    1d12:	a7 95       	ror	r26
    1d14:	f0 40       	sbci	r31, 0x00	; 0
    1d16:	53 95       	inc	r21
    1d18:	c9 f7       	brne	.-14     	; 0x1d0c <__addsf3x+0x52>
    1d1a:	7e f4       	brtc	.+30     	; 0x1d3a <__addsf3x+0x80>
    1d1c:	1f 16       	cp	r1, r31
    1d1e:	ba 0b       	sbc	r27, r26
    1d20:	62 0b       	sbc	r22, r18
    1d22:	73 0b       	sbc	r23, r19
    1d24:	84 0b       	sbc	r24, r20
    1d26:	ba f0       	brmi	.+46     	; 0x1d56 <__addsf3x+0x9c>
    1d28:	91 50       	subi	r25, 0x01	; 1
    1d2a:	a1 f0       	breq	.+40     	; 0x1d54 <__addsf3x+0x9a>
    1d2c:	ff 0f       	add	r31, r31
    1d2e:	bb 1f       	adc	r27, r27
    1d30:	66 1f       	adc	r22, r22
    1d32:	77 1f       	adc	r23, r23
    1d34:	88 1f       	adc	r24, r24
    1d36:	c2 f7       	brpl	.-16     	; 0x1d28 <__addsf3x+0x6e>
    1d38:	0e c0       	rjmp	.+28     	; 0x1d56 <__addsf3x+0x9c>
    1d3a:	ba 0f       	add	r27, r26
    1d3c:	62 1f       	adc	r22, r18
    1d3e:	73 1f       	adc	r23, r19
    1d40:	84 1f       	adc	r24, r20
    1d42:	48 f4       	brcc	.+18     	; 0x1d56 <__addsf3x+0x9c>
    1d44:	87 95       	ror	r24
    1d46:	77 95       	ror	r23
    1d48:	67 95       	ror	r22
    1d4a:	b7 95       	ror	r27
    1d4c:	f7 95       	ror	r31
    1d4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d50:	08 f0       	brcs	.+2      	; 0x1d54 <__addsf3x+0x9a>
    1d52:	b0 cf       	rjmp	.-160    	; 0x1cb4 <__addsf3+0x28>
    1d54:	93 95       	inc	r25
    1d56:	88 0f       	add	r24, r24
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <__addsf3x+0xa2>
    1d5a:	99 27       	eor	r25, r25
    1d5c:	ee 0f       	add	r30, r30
    1d5e:	97 95       	ror	r25
    1d60:	87 95       	ror	r24
    1d62:	08 95       	ret

00001d64 <ceil>:
    1d64:	0e 94 43 10 	call	0x2086	; 0x2086 <__fp_trunc>
    1d68:	90 f0       	brcs	.+36     	; 0x1d8e <ceil+0x2a>
    1d6a:	9f 37       	cpi	r25, 0x7F	; 127
    1d6c:	48 f4       	brcc	.+18     	; 0x1d80 <ceil+0x1c>
    1d6e:	91 11       	cpse	r25, r1
    1d70:	16 f4       	brtc	.+4      	; 0x1d76 <ceil+0x12>
    1d72:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__fp_szero>
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	80 e8       	ldi	r24, 0x80	; 128
    1d7c:	9f e3       	ldi	r25, 0x3F	; 63
    1d7e:	08 95       	ret
    1d80:	26 f0       	brts	.+8      	; 0x1d8a <ceil+0x26>
    1d82:	1b 16       	cp	r1, r27
    1d84:	61 1d       	adc	r22, r1
    1d86:	71 1d       	adc	r23, r1
    1d88:	81 1d       	adc	r24, r1
    1d8a:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__fp_mintl>
    1d8e:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__fp_mpack>

00001d92 <__cmpsf2>:
    1d92:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__fp_cmp>
    1d96:	08 f4       	brcc	.+2      	; 0x1d9a <__cmpsf2+0x8>
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	08 95       	ret

00001d9c <__divsf3>:
    1d9c:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__divsf3x>
    1da0:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__fp_round>
    1da4:	0e 94 09 10 	call	0x2012	; 0x2012 <__fp_pscB>
    1da8:	58 f0       	brcs	.+22     	; 0x1dc0 <__divsf3+0x24>
    1daa:	0e 94 02 10 	call	0x2004	; 0x2004 <__fp_pscA>
    1dae:	40 f0       	brcs	.+16     	; 0x1dc0 <__divsf3+0x24>
    1db0:	29 f4       	brne	.+10     	; 0x1dbc <__divsf3+0x20>
    1db2:	5f 3f       	cpi	r21, 0xFF	; 255
    1db4:	29 f0       	breq	.+10     	; 0x1dc0 <__divsf3+0x24>
    1db6:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__fp_inf>
    1dba:	51 11       	cpse	r21, r1
    1dbc:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__fp_szero>
    1dc0:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__fp_nan>

00001dc4 <__divsf3x>:
    1dc4:	0e 94 21 10 	call	0x2042	; 0x2042 <__fp_split3>
    1dc8:	68 f3       	brcs	.-38     	; 0x1da4 <__divsf3+0x8>

00001dca <__divsf3_pse>:
    1dca:	99 23       	and	r25, r25
    1dcc:	b1 f3       	breq	.-20     	; 0x1dba <__divsf3+0x1e>
    1dce:	55 23       	and	r21, r21
    1dd0:	91 f3       	breq	.-28     	; 0x1db6 <__divsf3+0x1a>
    1dd2:	95 1b       	sub	r25, r21
    1dd4:	55 0b       	sbc	r21, r21
    1dd6:	bb 27       	eor	r27, r27
    1dd8:	aa 27       	eor	r26, r26
    1dda:	62 17       	cp	r22, r18
    1ddc:	73 07       	cpc	r23, r19
    1dde:	84 07       	cpc	r24, r20
    1de0:	38 f0       	brcs	.+14     	; 0x1df0 <__divsf3_pse+0x26>
    1de2:	9f 5f       	subi	r25, 0xFF	; 255
    1de4:	5f 4f       	sbci	r21, 0xFF	; 255
    1de6:	22 0f       	add	r18, r18
    1de8:	33 1f       	adc	r19, r19
    1dea:	44 1f       	adc	r20, r20
    1dec:	aa 1f       	adc	r26, r26
    1dee:	a9 f3       	breq	.-22     	; 0x1dda <__divsf3_pse+0x10>
    1df0:	35 d0       	rcall	.+106    	; 0x1e5c <__divsf3_pse+0x92>
    1df2:	0e 2e       	mov	r0, r30
    1df4:	3a f0       	brmi	.+14     	; 0x1e04 <__divsf3_pse+0x3a>
    1df6:	e0 e8       	ldi	r30, 0x80	; 128
    1df8:	32 d0       	rcall	.+100    	; 0x1e5e <__divsf3_pse+0x94>
    1dfa:	91 50       	subi	r25, 0x01	; 1
    1dfc:	50 40       	sbci	r21, 0x00	; 0
    1dfe:	e6 95       	lsr	r30
    1e00:	00 1c       	adc	r0, r0
    1e02:	ca f7       	brpl	.-14     	; 0x1df6 <__divsf3_pse+0x2c>
    1e04:	2b d0       	rcall	.+86     	; 0x1e5c <__divsf3_pse+0x92>
    1e06:	fe 2f       	mov	r31, r30
    1e08:	29 d0       	rcall	.+82     	; 0x1e5c <__divsf3_pse+0x92>
    1e0a:	66 0f       	add	r22, r22
    1e0c:	77 1f       	adc	r23, r23
    1e0e:	88 1f       	adc	r24, r24
    1e10:	bb 1f       	adc	r27, r27
    1e12:	26 17       	cp	r18, r22
    1e14:	37 07       	cpc	r19, r23
    1e16:	48 07       	cpc	r20, r24
    1e18:	ab 07       	cpc	r26, r27
    1e1a:	b0 e8       	ldi	r27, 0x80	; 128
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <__divsf3_pse+0x56>
    1e1e:	bb 0b       	sbc	r27, r27
    1e20:	80 2d       	mov	r24, r0
    1e22:	bf 01       	movw	r22, r30
    1e24:	ff 27       	eor	r31, r31
    1e26:	93 58       	subi	r25, 0x83	; 131
    1e28:	5f 4f       	sbci	r21, 0xFF	; 255
    1e2a:	3a f0       	brmi	.+14     	; 0x1e3a <__divsf3_pse+0x70>
    1e2c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e2e:	51 05       	cpc	r21, r1
    1e30:	78 f0       	brcs	.+30     	; 0x1e50 <__divsf3_pse+0x86>
    1e32:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__fp_inf>
    1e36:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__fp_szero>
    1e3a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e3c:	e4 f3       	brlt	.-8      	; 0x1e36 <__divsf3_pse+0x6c>
    1e3e:	98 3e       	cpi	r25, 0xE8	; 232
    1e40:	d4 f3       	brlt	.-12     	; 0x1e36 <__divsf3_pse+0x6c>
    1e42:	86 95       	lsr	r24
    1e44:	77 95       	ror	r23
    1e46:	67 95       	ror	r22
    1e48:	b7 95       	ror	r27
    1e4a:	f7 95       	ror	r31
    1e4c:	9f 5f       	subi	r25, 0xFF	; 255
    1e4e:	c9 f7       	brne	.-14     	; 0x1e42 <__divsf3_pse+0x78>
    1e50:	88 0f       	add	r24, r24
    1e52:	91 1d       	adc	r25, r1
    1e54:	96 95       	lsr	r25
    1e56:	87 95       	ror	r24
    1e58:	97 f9       	bld	r25, 7
    1e5a:	08 95       	ret
    1e5c:	e1 e0       	ldi	r30, 0x01	; 1
    1e5e:	66 0f       	add	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	bb 1f       	adc	r27, r27
    1e66:	62 17       	cp	r22, r18
    1e68:	73 07       	cpc	r23, r19
    1e6a:	84 07       	cpc	r24, r20
    1e6c:	ba 07       	cpc	r27, r26
    1e6e:	20 f0       	brcs	.+8      	; 0x1e78 <__divsf3_pse+0xae>
    1e70:	62 1b       	sub	r22, r18
    1e72:	73 0b       	sbc	r23, r19
    1e74:	84 0b       	sbc	r24, r20
    1e76:	ba 0b       	sbc	r27, r26
    1e78:	ee 1f       	adc	r30, r30
    1e7a:	88 f7       	brcc	.-30     	; 0x1e5e <__divsf3_pse+0x94>
    1e7c:	e0 95       	com	r30
    1e7e:	08 95       	ret

00001e80 <__fixunssfsi>:
    1e80:	0e 94 29 10 	call	0x2052	; 0x2052 <__fp_splitA>
    1e84:	88 f0       	brcs	.+34     	; 0x1ea8 <__fixunssfsi+0x28>
    1e86:	9f 57       	subi	r25, 0x7F	; 127
    1e88:	98 f0       	brcs	.+38     	; 0x1eb0 <__fixunssfsi+0x30>
    1e8a:	b9 2f       	mov	r27, r25
    1e8c:	99 27       	eor	r25, r25
    1e8e:	b7 51       	subi	r27, 0x17	; 23
    1e90:	b0 f0       	brcs	.+44     	; 0x1ebe <__fixunssfsi+0x3e>
    1e92:	e1 f0       	breq	.+56     	; 0x1ecc <__fixunssfsi+0x4c>
    1e94:	66 0f       	add	r22, r22
    1e96:	77 1f       	adc	r23, r23
    1e98:	88 1f       	adc	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	1a f0       	brmi	.+6      	; 0x1ea4 <__fixunssfsi+0x24>
    1e9e:	ba 95       	dec	r27
    1ea0:	c9 f7       	brne	.-14     	; 0x1e94 <__fixunssfsi+0x14>
    1ea2:	14 c0       	rjmp	.+40     	; 0x1ecc <__fixunssfsi+0x4c>
    1ea4:	b1 30       	cpi	r27, 0x01	; 1
    1ea6:	91 f0       	breq	.+36     	; 0x1ecc <__fixunssfsi+0x4c>
    1ea8:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__fp_zero>
    1eac:	b1 e0       	ldi	r27, 0x01	; 1
    1eae:	08 95       	ret
    1eb0:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__fp_zero>
    1eb4:	67 2f       	mov	r22, r23
    1eb6:	78 2f       	mov	r23, r24
    1eb8:	88 27       	eor	r24, r24
    1eba:	b8 5f       	subi	r27, 0xF8	; 248
    1ebc:	39 f0       	breq	.+14     	; 0x1ecc <__fixunssfsi+0x4c>
    1ebe:	b9 3f       	cpi	r27, 0xF9	; 249
    1ec0:	cc f3       	brlt	.-14     	; 0x1eb4 <__fixunssfsi+0x34>
    1ec2:	86 95       	lsr	r24
    1ec4:	77 95       	ror	r23
    1ec6:	67 95       	ror	r22
    1ec8:	b3 95       	inc	r27
    1eca:	d9 f7       	brne	.-10     	; 0x1ec2 <__fixunssfsi+0x42>
    1ecc:	3e f4       	brtc	.+14     	; 0x1edc <__fixunssfsi+0x5c>
    1ece:	90 95       	com	r25
    1ed0:	80 95       	com	r24
    1ed2:	70 95       	com	r23
    1ed4:	61 95       	neg	r22
    1ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eda:	9f 4f       	sbci	r25, 0xFF	; 255
    1edc:	08 95       	ret

00001ede <__floatunsisf>:
    1ede:	e8 94       	clt
    1ee0:	09 c0       	rjmp	.+18     	; 0x1ef4 <__floatsisf+0x12>

00001ee2 <__floatsisf>:
    1ee2:	97 fb       	bst	r25, 7
    1ee4:	3e f4       	brtc	.+14     	; 0x1ef4 <__floatsisf+0x12>
    1ee6:	90 95       	com	r25
    1ee8:	80 95       	com	r24
    1eea:	70 95       	com	r23
    1eec:	61 95       	neg	r22
    1eee:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef4:	99 23       	and	r25, r25
    1ef6:	a9 f0       	breq	.+42     	; 0x1f22 <__floatsisf+0x40>
    1ef8:	f9 2f       	mov	r31, r25
    1efa:	96 e9       	ldi	r25, 0x96	; 150
    1efc:	bb 27       	eor	r27, r27
    1efe:	93 95       	inc	r25
    1f00:	f6 95       	lsr	r31
    1f02:	87 95       	ror	r24
    1f04:	77 95       	ror	r23
    1f06:	67 95       	ror	r22
    1f08:	b7 95       	ror	r27
    1f0a:	f1 11       	cpse	r31, r1
    1f0c:	f8 cf       	rjmp	.-16     	; 0x1efe <__floatsisf+0x1c>
    1f0e:	fa f4       	brpl	.+62     	; 0x1f4e <__floatsisf+0x6c>
    1f10:	bb 0f       	add	r27, r27
    1f12:	11 f4       	brne	.+4      	; 0x1f18 <__floatsisf+0x36>
    1f14:	60 ff       	sbrs	r22, 0
    1f16:	1b c0       	rjmp	.+54     	; 0x1f4e <__floatsisf+0x6c>
    1f18:	6f 5f       	subi	r22, 0xFF	; 255
    1f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f20:	16 c0       	rjmp	.+44     	; 0x1f4e <__floatsisf+0x6c>
    1f22:	88 23       	and	r24, r24
    1f24:	11 f0       	breq	.+4      	; 0x1f2a <__floatsisf+0x48>
    1f26:	96 e9       	ldi	r25, 0x96	; 150
    1f28:	11 c0       	rjmp	.+34     	; 0x1f4c <__floatsisf+0x6a>
    1f2a:	77 23       	and	r23, r23
    1f2c:	21 f0       	breq	.+8      	; 0x1f36 <__floatsisf+0x54>
    1f2e:	9e e8       	ldi	r25, 0x8E	; 142
    1f30:	87 2f       	mov	r24, r23
    1f32:	76 2f       	mov	r23, r22
    1f34:	05 c0       	rjmp	.+10     	; 0x1f40 <__floatsisf+0x5e>
    1f36:	66 23       	and	r22, r22
    1f38:	71 f0       	breq	.+28     	; 0x1f56 <__floatsisf+0x74>
    1f3a:	96 e8       	ldi	r25, 0x86	; 134
    1f3c:	86 2f       	mov	r24, r22
    1f3e:	70 e0       	ldi	r23, 0x00	; 0
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	2a f0       	brmi	.+10     	; 0x1f4e <__floatsisf+0x6c>
    1f44:	9a 95       	dec	r25
    1f46:	66 0f       	add	r22, r22
    1f48:	77 1f       	adc	r23, r23
    1f4a:	88 1f       	adc	r24, r24
    1f4c:	da f7       	brpl	.-10     	; 0x1f44 <__floatsisf+0x62>
    1f4e:	88 0f       	add	r24, r24
    1f50:	96 95       	lsr	r25
    1f52:	87 95       	ror	r24
    1f54:	97 f9       	bld	r25, 7
    1f56:	08 95       	ret

00001f58 <__fp_cmp>:
    1f58:	99 0f       	add	r25, r25
    1f5a:	00 08       	sbc	r0, r0
    1f5c:	55 0f       	add	r21, r21
    1f5e:	aa 0b       	sbc	r26, r26
    1f60:	e0 e8       	ldi	r30, 0x80	; 128
    1f62:	fe ef       	ldi	r31, 0xFE	; 254
    1f64:	16 16       	cp	r1, r22
    1f66:	17 06       	cpc	r1, r23
    1f68:	e8 07       	cpc	r30, r24
    1f6a:	f9 07       	cpc	r31, r25
    1f6c:	c0 f0       	brcs	.+48     	; 0x1f9e <__fp_cmp+0x46>
    1f6e:	12 16       	cp	r1, r18
    1f70:	13 06       	cpc	r1, r19
    1f72:	e4 07       	cpc	r30, r20
    1f74:	f5 07       	cpc	r31, r21
    1f76:	98 f0       	brcs	.+38     	; 0x1f9e <__fp_cmp+0x46>
    1f78:	62 1b       	sub	r22, r18
    1f7a:	73 0b       	sbc	r23, r19
    1f7c:	84 0b       	sbc	r24, r20
    1f7e:	95 0b       	sbc	r25, r21
    1f80:	39 f4       	brne	.+14     	; 0x1f90 <__fp_cmp+0x38>
    1f82:	0a 26       	eor	r0, r26
    1f84:	61 f0       	breq	.+24     	; 0x1f9e <__fp_cmp+0x46>
    1f86:	23 2b       	or	r18, r19
    1f88:	24 2b       	or	r18, r20
    1f8a:	25 2b       	or	r18, r21
    1f8c:	21 f4       	brne	.+8      	; 0x1f96 <__fp_cmp+0x3e>
    1f8e:	08 95       	ret
    1f90:	0a 26       	eor	r0, r26
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <__fp_cmp+0x3e>
    1f94:	a1 40       	sbci	r26, 0x01	; 1
    1f96:	a6 95       	lsr	r26
    1f98:	8f ef       	ldi	r24, 0xFF	; 255
    1f9a:	81 1d       	adc	r24, r1
    1f9c:	81 1d       	adc	r24, r1
    1f9e:	08 95       	ret

00001fa0 <__fp_inf>:
    1fa0:	97 f9       	bld	r25, 7
    1fa2:	9f 67       	ori	r25, 0x7F	; 127
    1fa4:	80 e8       	ldi	r24, 0x80	; 128
    1fa6:	70 e0       	ldi	r23, 0x00	; 0
    1fa8:	60 e0       	ldi	r22, 0x00	; 0
    1faa:	08 95       	ret

00001fac <__fp_mintl>:
    1fac:	88 23       	and	r24, r24
    1fae:	71 f4       	brne	.+28     	; 0x1fcc <__fp_mintl+0x20>
    1fb0:	77 23       	and	r23, r23
    1fb2:	21 f0       	breq	.+8      	; 0x1fbc <__fp_mintl+0x10>
    1fb4:	98 50       	subi	r25, 0x08	; 8
    1fb6:	87 2b       	or	r24, r23
    1fb8:	76 2f       	mov	r23, r22
    1fba:	07 c0       	rjmp	.+14     	; 0x1fca <__fp_mintl+0x1e>
    1fbc:	66 23       	and	r22, r22
    1fbe:	11 f4       	brne	.+4      	; 0x1fc4 <__fp_mintl+0x18>
    1fc0:	99 27       	eor	r25, r25
    1fc2:	0d c0       	rjmp	.+26     	; 0x1fde <__fp_mintl+0x32>
    1fc4:	90 51       	subi	r25, 0x10	; 16
    1fc6:	86 2b       	or	r24, r22
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	60 e0       	ldi	r22, 0x00	; 0
    1fcc:	2a f0       	brmi	.+10     	; 0x1fd8 <__fp_mintl+0x2c>
    1fce:	9a 95       	dec	r25
    1fd0:	66 0f       	add	r22, r22
    1fd2:	77 1f       	adc	r23, r23
    1fd4:	88 1f       	adc	r24, r24
    1fd6:	da f7       	brpl	.-10     	; 0x1fce <__fp_mintl+0x22>
    1fd8:	88 0f       	add	r24, r24
    1fda:	96 95       	lsr	r25
    1fdc:	87 95       	ror	r24
    1fde:	97 f9       	bld	r25, 7
    1fe0:	08 95       	ret

00001fe2 <__fp_mpack>:
    1fe2:	9f 3f       	cpi	r25, 0xFF	; 255
    1fe4:	31 f0       	breq	.+12     	; 0x1ff2 <__fp_mpack_finite+0xc>

00001fe6 <__fp_mpack_finite>:
    1fe6:	91 50       	subi	r25, 0x01	; 1
    1fe8:	20 f4       	brcc	.+8      	; 0x1ff2 <__fp_mpack_finite+0xc>
    1fea:	87 95       	ror	r24
    1fec:	77 95       	ror	r23
    1fee:	67 95       	ror	r22
    1ff0:	b7 95       	ror	r27
    1ff2:	88 0f       	add	r24, r24
    1ff4:	91 1d       	adc	r25, r1
    1ff6:	96 95       	lsr	r25
    1ff8:	87 95       	ror	r24
    1ffa:	97 f9       	bld	r25, 7
    1ffc:	08 95       	ret

00001ffe <__fp_nan>:
    1ffe:	9f ef       	ldi	r25, 0xFF	; 255
    2000:	80 ec       	ldi	r24, 0xC0	; 192
    2002:	08 95       	ret

00002004 <__fp_pscA>:
    2004:	00 24       	eor	r0, r0
    2006:	0a 94       	dec	r0
    2008:	16 16       	cp	r1, r22
    200a:	17 06       	cpc	r1, r23
    200c:	18 06       	cpc	r1, r24
    200e:	09 06       	cpc	r0, r25
    2010:	08 95       	ret

00002012 <__fp_pscB>:
    2012:	00 24       	eor	r0, r0
    2014:	0a 94       	dec	r0
    2016:	12 16       	cp	r1, r18
    2018:	13 06       	cpc	r1, r19
    201a:	14 06       	cpc	r1, r20
    201c:	05 06       	cpc	r0, r21
    201e:	08 95       	ret

00002020 <__fp_round>:
    2020:	09 2e       	mov	r0, r25
    2022:	03 94       	inc	r0
    2024:	00 0c       	add	r0, r0
    2026:	11 f4       	brne	.+4      	; 0x202c <__fp_round+0xc>
    2028:	88 23       	and	r24, r24
    202a:	52 f0       	brmi	.+20     	; 0x2040 <__fp_round+0x20>
    202c:	bb 0f       	add	r27, r27
    202e:	40 f4       	brcc	.+16     	; 0x2040 <__fp_round+0x20>
    2030:	bf 2b       	or	r27, r31
    2032:	11 f4       	brne	.+4      	; 0x2038 <__fp_round+0x18>
    2034:	60 ff       	sbrs	r22, 0
    2036:	04 c0       	rjmp	.+8      	; 0x2040 <__fp_round+0x20>
    2038:	6f 5f       	subi	r22, 0xFF	; 255
    203a:	7f 4f       	sbci	r23, 0xFF	; 255
    203c:	8f 4f       	sbci	r24, 0xFF	; 255
    203e:	9f 4f       	sbci	r25, 0xFF	; 255
    2040:	08 95       	ret

00002042 <__fp_split3>:
    2042:	57 fd       	sbrc	r21, 7
    2044:	90 58       	subi	r25, 0x80	; 128
    2046:	44 0f       	add	r20, r20
    2048:	55 1f       	adc	r21, r21
    204a:	59 f0       	breq	.+22     	; 0x2062 <__fp_splitA+0x10>
    204c:	5f 3f       	cpi	r21, 0xFF	; 255
    204e:	71 f0       	breq	.+28     	; 0x206c <__fp_splitA+0x1a>
    2050:	47 95       	ror	r20

00002052 <__fp_splitA>:
    2052:	88 0f       	add	r24, r24
    2054:	97 fb       	bst	r25, 7
    2056:	99 1f       	adc	r25, r25
    2058:	61 f0       	breq	.+24     	; 0x2072 <__fp_splitA+0x20>
    205a:	9f 3f       	cpi	r25, 0xFF	; 255
    205c:	79 f0       	breq	.+30     	; 0x207c <__fp_splitA+0x2a>
    205e:	87 95       	ror	r24
    2060:	08 95       	ret
    2062:	12 16       	cp	r1, r18
    2064:	13 06       	cpc	r1, r19
    2066:	14 06       	cpc	r1, r20
    2068:	55 1f       	adc	r21, r21
    206a:	f2 cf       	rjmp	.-28     	; 0x2050 <__fp_split3+0xe>
    206c:	46 95       	lsr	r20
    206e:	f1 df       	rcall	.-30     	; 0x2052 <__fp_splitA>
    2070:	08 c0       	rjmp	.+16     	; 0x2082 <__fp_splitA+0x30>
    2072:	16 16       	cp	r1, r22
    2074:	17 06       	cpc	r1, r23
    2076:	18 06       	cpc	r1, r24
    2078:	99 1f       	adc	r25, r25
    207a:	f1 cf       	rjmp	.-30     	; 0x205e <__fp_splitA+0xc>
    207c:	86 95       	lsr	r24
    207e:	71 05       	cpc	r23, r1
    2080:	61 05       	cpc	r22, r1
    2082:	08 94       	sec
    2084:	08 95       	ret

00002086 <__fp_trunc>:
    2086:	0e 94 29 10 	call	0x2052	; 0x2052 <__fp_splitA>
    208a:	a0 f0       	brcs	.+40     	; 0x20b4 <__fp_trunc+0x2e>
    208c:	be e7       	ldi	r27, 0x7E	; 126
    208e:	b9 17       	cp	r27, r25
    2090:	88 f4       	brcc	.+34     	; 0x20b4 <__fp_trunc+0x2e>
    2092:	bb 27       	eor	r27, r27
    2094:	9f 38       	cpi	r25, 0x8F	; 143
    2096:	60 f4       	brcc	.+24     	; 0x20b0 <__fp_trunc+0x2a>
    2098:	16 16       	cp	r1, r22
    209a:	b1 1d       	adc	r27, r1
    209c:	67 2f       	mov	r22, r23
    209e:	78 2f       	mov	r23, r24
    20a0:	88 27       	eor	r24, r24
    20a2:	98 5f       	subi	r25, 0xF8	; 248
    20a4:	f7 cf       	rjmp	.-18     	; 0x2094 <__fp_trunc+0xe>
    20a6:	86 95       	lsr	r24
    20a8:	77 95       	ror	r23
    20aa:	67 95       	ror	r22
    20ac:	b1 1d       	adc	r27, r1
    20ae:	93 95       	inc	r25
    20b0:	96 39       	cpi	r25, 0x96	; 150
    20b2:	c8 f3       	brcs	.-14     	; 0x20a6 <__fp_trunc+0x20>
    20b4:	08 95       	ret

000020b6 <__fp_zero>:
    20b6:	e8 94       	clt

000020b8 <__fp_szero>:
    20b8:	bb 27       	eor	r27, r27
    20ba:	66 27       	eor	r22, r22
    20bc:	77 27       	eor	r23, r23
    20be:	cb 01       	movw	r24, r22
    20c0:	97 f9       	bld	r25, 7
    20c2:	08 95       	ret

000020c4 <__gesf2>:
    20c4:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__fp_cmp>
    20c8:	08 f4       	brcc	.+2      	; 0x20cc <__gesf2+0x8>
    20ca:	8f ef       	ldi	r24, 0xFF	; 255
    20cc:	08 95       	ret

000020ce <__mulsf3>:
    20ce:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__mulsf3x>
    20d2:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__fp_round>
    20d6:	0e 94 02 10 	call	0x2004	; 0x2004 <__fp_pscA>
    20da:	38 f0       	brcs	.+14     	; 0x20ea <__mulsf3+0x1c>
    20dc:	0e 94 09 10 	call	0x2012	; 0x2012 <__fp_pscB>
    20e0:	20 f0       	brcs	.+8      	; 0x20ea <__mulsf3+0x1c>
    20e2:	95 23       	and	r25, r21
    20e4:	11 f0       	breq	.+4      	; 0x20ea <__mulsf3+0x1c>
    20e6:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__fp_inf>
    20ea:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__fp_nan>
    20ee:	11 24       	eor	r1, r1
    20f0:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__fp_szero>

000020f4 <__mulsf3x>:
    20f4:	0e 94 21 10 	call	0x2042	; 0x2042 <__fp_split3>
    20f8:	70 f3       	brcs	.-36     	; 0x20d6 <__mulsf3+0x8>

000020fa <__mulsf3_pse>:
    20fa:	95 9f       	mul	r25, r21
    20fc:	c1 f3       	breq	.-16     	; 0x20ee <__mulsf3+0x20>
    20fe:	95 0f       	add	r25, r21
    2100:	50 e0       	ldi	r21, 0x00	; 0
    2102:	55 1f       	adc	r21, r21
    2104:	62 9f       	mul	r22, r18
    2106:	f0 01       	movw	r30, r0
    2108:	72 9f       	mul	r23, r18
    210a:	bb 27       	eor	r27, r27
    210c:	f0 0d       	add	r31, r0
    210e:	b1 1d       	adc	r27, r1
    2110:	63 9f       	mul	r22, r19
    2112:	aa 27       	eor	r26, r26
    2114:	f0 0d       	add	r31, r0
    2116:	b1 1d       	adc	r27, r1
    2118:	aa 1f       	adc	r26, r26
    211a:	64 9f       	mul	r22, r20
    211c:	66 27       	eor	r22, r22
    211e:	b0 0d       	add	r27, r0
    2120:	a1 1d       	adc	r26, r1
    2122:	66 1f       	adc	r22, r22
    2124:	82 9f       	mul	r24, r18
    2126:	22 27       	eor	r18, r18
    2128:	b0 0d       	add	r27, r0
    212a:	a1 1d       	adc	r26, r1
    212c:	62 1f       	adc	r22, r18
    212e:	73 9f       	mul	r23, r19
    2130:	b0 0d       	add	r27, r0
    2132:	a1 1d       	adc	r26, r1
    2134:	62 1f       	adc	r22, r18
    2136:	83 9f       	mul	r24, r19
    2138:	a0 0d       	add	r26, r0
    213a:	61 1d       	adc	r22, r1
    213c:	22 1f       	adc	r18, r18
    213e:	74 9f       	mul	r23, r20
    2140:	33 27       	eor	r19, r19
    2142:	a0 0d       	add	r26, r0
    2144:	61 1d       	adc	r22, r1
    2146:	23 1f       	adc	r18, r19
    2148:	84 9f       	mul	r24, r20
    214a:	60 0d       	add	r22, r0
    214c:	21 1d       	adc	r18, r1
    214e:	82 2f       	mov	r24, r18
    2150:	76 2f       	mov	r23, r22
    2152:	6a 2f       	mov	r22, r26
    2154:	11 24       	eor	r1, r1
    2156:	9f 57       	subi	r25, 0x7F	; 127
    2158:	50 40       	sbci	r21, 0x00	; 0
    215a:	9a f0       	brmi	.+38     	; 0x2182 <__mulsf3_pse+0x88>
    215c:	f1 f0       	breq	.+60     	; 0x219a <__mulsf3_pse+0xa0>
    215e:	88 23       	and	r24, r24
    2160:	4a f0       	brmi	.+18     	; 0x2174 <__mulsf3_pse+0x7a>
    2162:	ee 0f       	add	r30, r30
    2164:	ff 1f       	adc	r31, r31
    2166:	bb 1f       	adc	r27, r27
    2168:	66 1f       	adc	r22, r22
    216a:	77 1f       	adc	r23, r23
    216c:	88 1f       	adc	r24, r24
    216e:	91 50       	subi	r25, 0x01	; 1
    2170:	50 40       	sbci	r21, 0x00	; 0
    2172:	a9 f7       	brne	.-22     	; 0x215e <__mulsf3_pse+0x64>
    2174:	9e 3f       	cpi	r25, 0xFE	; 254
    2176:	51 05       	cpc	r21, r1
    2178:	80 f0       	brcs	.+32     	; 0x219a <__mulsf3_pse+0xa0>
    217a:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__fp_inf>
    217e:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__fp_szero>
    2182:	5f 3f       	cpi	r21, 0xFF	; 255
    2184:	e4 f3       	brlt	.-8      	; 0x217e <__mulsf3_pse+0x84>
    2186:	98 3e       	cpi	r25, 0xE8	; 232
    2188:	d4 f3       	brlt	.-12     	; 0x217e <__mulsf3_pse+0x84>
    218a:	86 95       	lsr	r24
    218c:	77 95       	ror	r23
    218e:	67 95       	ror	r22
    2190:	b7 95       	ror	r27
    2192:	f7 95       	ror	r31
    2194:	e7 95       	ror	r30
    2196:	9f 5f       	subi	r25, 0xFF	; 255
    2198:	c1 f7       	brne	.-16     	; 0x218a <__mulsf3_pse+0x90>
    219a:	fe 2b       	or	r31, r30
    219c:	88 0f       	add	r24, r24
    219e:	91 1d       	adc	r25, r1
    21a0:	96 95       	lsr	r25
    21a2:	87 95       	ror	r24
    21a4:	97 f9       	bld	r25, 7
    21a6:	08 95       	ret

000021a8 <__udivmodsi4>:
    21a8:	a1 e2       	ldi	r26, 0x21	; 33
    21aa:	1a 2e       	mov	r1, r26
    21ac:	aa 1b       	sub	r26, r26
    21ae:	bb 1b       	sub	r27, r27
    21b0:	fd 01       	movw	r30, r26
    21b2:	0d c0       	rjmp	.+26     	; 0x21ce <__udivmodsi4_ep>

000021b4 <__udivmodsi4_loop>:
    21b4:	aa 1f       	adc	r26, r26
    21b6:	bb 1f       	adc	r27, r27
    21b8:	ee 1f       	adc	r30, r30
    21ba:	ff 1f       	adc	r31, r31
    21bc:	a2 17       	cp	r26, r18
    21be:	b3 07       	cpc	r27, r19
    21c0:	e4 07       	cpc	r30, r20
    21c2:	f5 07       	cpc	r31, r21
    21c4:	20 f0       	brcs	.+8      	; 0x21ce <__udivmodsi4_ep>
    21c6:	a2 1b       	sub	r26, r18
    21c8:	b3 0b       	sbc	r27, r19
    21ca:	e4 0b       	sbc	r30, r20
    21cc:	f5 0b       	sbc	r31, r21

000021ce <__udivmodsi4_ep>:
    21ce:	66 1f       	adc	r22, r22
    21d0:	77 1f       	adc	r23, r23
    21d2:	88 1f       	adc	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	1a 94       	dec	r1
    21d8:	69 f7       	brne	.-38     	; 0x21b4 <__udivmodsi4_loop>
    21da:	60 95       	com	r22
    21dc:	70 95       	com	r23
    21de:	80 95       	com	r24
    21e0:	90 95       	com	r25
    21e2:	9b 01       	movw	r18, r22
    21e4:	ac 01       	movw	r20, r24
    21e6:	bd 01       	movw	r22, r26
    21e8:	cf 01       	movw	r24, r30
    21ea:	08 95       	ret

000021ec <__tablejump2__>:
    21ec:	ee 0f       	add	r30, r30
    21ee:	ff 1f       	adc	r31, r31
    21f0:	05 90       	lpm	r0, Z+
    21f2:	f4 91       	lpm	r31, Z
    21f4:	e0 2d       	mov	r30, r0
    21f6:	09 94       	ijmp

000021f8 <_exit>:
    21f8:	f8 94       	cli

000021fa <__stop_program>:
    21fa:	ff cf       	rjmp	.-2      	; 0x21fa <__stop_program>
